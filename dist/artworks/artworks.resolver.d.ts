import { ArtworksService } from './artworks.service';
import { Artwork } from './entities/artwork.entity';
import { CreateArtworkInput } from './dto/create-artwork.input';
import { UpdateArtworkInput } from './dto/update-artwork.input';
import { FindArtworksInput } from './dto/find-artworks.input';
import { FavoriteArtwork } from './entities/favoriteArtwork.entity';
import { ArtworkCollaborator } from './entities/artworkCollaborator.entity';
import { ArtworkTag } from './entities/artworkTag.entity';
import { ArtworkAddress } from './entities/artworkAddress.entity';
import { ArtworkColor } from './entities/artworkColor.entity';
import { ArtworkMovement } from './entities/artworkMovement.entity';
import { ArtworkMaterial } from './entities/artworkMaterial.entity';
import { JwtPayload } from 'src/auth/interfaces/jwt-payload.interface';
import { User } from '../users/entities/user.entity';
export declare class ArtworksResolver {
    private readonly artworksService;
    constructor(artworksService: ArtworksService);
    createArtwork(jwt: JwtPayload, createArtworkInput: CreateArtworkInput): Promise<Artwork>;
    findAll(findArtworksInput?: FindArtworksInput): Promise<Artwork[]>;
    findOne(id: number): Promise<Artwork>;
    updateArtwork(updateArtworkInput: UpdateArtworkInput): Promise<Artwork>;
    removeArtwork(id: number): Promise<Artwork>;
    markUnmarkFavoriteArtwork(jwt: JwtPayload, id: number): Promise<FavoriteArtwork>;
    favoriteCount(artwork: Artwork): Promise<number>;
    collaborators(artwork: Artwork): Promise<ArtworkCollaborator[]>;
    tags(artwork: Artwork): Promise<ArtworkTag[]>;
    addresses(artwork: Artwork): Promise<ArtworkAddress[]>;
    colors(artwork: Artwork): Promise<ArtworkColor[]>;
    movements(artwork: Artwork): Promise<ArtworkMovement[]>;
    materials(artwork: Artwork): Promise<ArtworkMaterial[]>;
    artist(artwork: Artwork): Promise<User>;
}
