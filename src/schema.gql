# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Artwork {
  """ID from the artwork"""
  id: Int!

  """ID from the artist"""
  artistId: Int!

  """Title of the artwork"""
  title: String!

  """Description of the artwork"""
  description: String

  """URL from the AWS S3 where is stored the artwork image"""
  imageUrl: String

  """Minimum working hours to complete the artwork"""
  minWorkingHours: Int

  """Maximum working hours to complete the artwork"""
  maxWorkingHours: Int

  """Minimum price for the artwork"""
  minPrice: Float

  """Maximum price for the artwork"""
  maxPrice: Float

  """Minimum height required to do the artwork"""
  minHeight: Float

  """Maximum height allowed to do the artwork"""
  maxHeight: Float

  """Minimum width required to do the artwork"""
  minWidth: Float

  """Maximum width allowed to do the artwork"""
  maxWidth: Float

  """Address from the artwork"""
  address: String

  """Geo longitude from the address of the artwork"""
  longitude: Float

  """Geo latitude from the address of the artwork"""
  latitude: Float

  """Publication date of the artwork"""
  createdDate: DateTime

  """Date of deletion of the artwork"""
  deletedDate: DateTime

  """Boolean to know if the artwork is soft deleted"""
  isDeleted: Boolean
  favoriteCount: Int!
  collaborators: [ArtworkCollaborator!]!
  tags: [ArtworkTag!]!
  colors: [ArtworkColor!]!
  movements: [ArtworkMovement!]!
  materials: [ArtworkMaterial!]!
  artist: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FavoriteArtwork {
  """ID from the record"""
  id: Int!

  """ID from the artwork"""
  artworkId: Int!

  """ID from the user"""
  userId: Int!

  """Date of creation of the record"""
  createdDate: DateTime!
}

type User {
  """ID from the user"""
  id: Int!

  """Type ID from the user"""
  typeId: UserTypes!

  """First name from the user"""
  firstName: String!

  """Last name from the user"""
  lastName: String!

  """Email address from the user"""
  email: String!

  """Auth password from the user"""
  pass: String!

  """Phone number from the user"""
  phone: String

  """Gender from the user"""
  gender: String

  """Birthdate of the user"""
  birthdate: DateTime

  """Home address from the user"""
  address: String

  """Geo longitude from the home address of the user"""
  longitude: Float

  """Geo latitude from the home address of the user"""
  latitude: Float

  """Contact information from the user"""
  contact: String

  """URL from the AWS S3 where is stored the user photo"""
  photoUrl: String

  """Google UID for auth"""
  googleUid: String

  """Facebook UID for auth"""
  facebookUid: String

  """Firebase token"""
  firebaseToken: String

  """Registration date of the user"""
  createdDate: DateTime

  """Date of deletion of the user"""
  deletedDate: DateTime

  """Boolean to know if the user is soft deleted"""
  isDeleted: Boolean
  rating: Float!
  followers: [Follower!]!
  followersCount: Int!
  collections: [Collection!]!
}

"""User types supported"""
enum UserTypes {
  GUEST
  ARTIST
  ADMIN
}

type ArtworkCollaborator {
  """ID from the record"""
  id: Int!

  """ID from the artist"""
  artistId: Int!

  """ID from the artwork"""
  artworkId: Int!

  """Data from the artist collaborator"""
  artist: User!
}

type ArtworkTag {
  """ID from the record"""
  id: Int!

  """ID from the artwork"""
  artworkId: Int!

  """Tag assigned to the artwork"""
  tag: String!
}

type ArtworkColor {
  """ID from the record"""
  id: Int!

  """ID from the artwork"""
  artworkId: Int!

  """Color contained on the artwork"""
  color: String!
}

type ArtworkMovement {
  """ID from the record"""
  id: Int!

  """ID from the artwork"""
  artworkId: Int!

  """Movement from the artwork"""
  movement: String!
}

type ArtworkMaterial {
  """ID from the record"""
  id: Int!

  """ID from the artwork"""
  artworkId: Int!

  """Material from the artwork"""
  material: String!
}

type UserRating {
  """ID from the record"""
  id: Int!

  """ID from the user"""
  userId: Int!

  """ID from the qualifier"""
  qualifierId: Int!

  """Assigned rating"""
  rating: Int!
}

type Follower {
  """ID from the record"""
  id: Int!

  """ID from the user"""
  userId: Int!

  """ID from the follower"""
  followerId: Int!

  """Date of creation of the record"""
  createdDate: DateTime!

  """Data from the follower user"""
  follower: User
}

type Collection {
  """ID from the collection"""
  id: Int!

  """ID from the user"""
  userId: Int!

  """Name of the collection"""
  name: String!

  """URL from the AWS S3 where is stored the image"""
  imageUrl: String

  """Creation date of the record"""
  createdDate: DateTime
  artworks: [Artwork!]!
}

type Notification {
  """ID from the notification"""
  id: Int!

  """ID from the user who owns the notification"""
  userId: Int!

  """Type ID from the notification"""
  typeId: NotificationTypes

  """Title of the notification"""
  title: String

  """Content of the notification"""
  content: String

  """Link of the notification"""
  link: String

  """Creation date of the notification"""
  createdDate: String

  """Boolean to know if the user has viewed the notification"""
  viewed: Boolean
}

"""Notification types supported"""
enum NotificationTypes {
  INFO
  SUCCESS
  ERROR
}

type ArtworkCollection {
  """ID from the record"""
  id: Int!

  """ID from the artwork"""
  artworkId: Int!

  """ID from the collection"""
  collectionId: Int!
}

type Comment {
  """ID from the comment"""
  id: Int!

  """ID from the user that created the comment"""
  commentatorId: Int!

  """Comment body"""
  comment: String!

  """ID from the user that is being commented"""
  userId: Int

  """ID from the artwork that is being commented"""
  artworkId: Int

  """ID from the comment that is being commented"""
  commentId: Int

  """Creation date of the record"""
  createdDate: String
}

type Report {
  """ID from the report"""
  id: Int!

  """ID from the user that created the report"""
  reporterId: Int!

  """Report description"""
  description: String!

  """ID from the user that is being reported"""
  userId: Int

  """ID from the artwork that is being reported"""
  artworkId: Int

  """ID from the comment that is being reported"""
  commentId: Int

  """Creation date of the record"""
  createdDate: DateTime
}

type AuthResponse {
  token: String!
  user: User!
}

type Event {
  """ID from the event"""
  id: Int!

  """ID from the user"""
  userId: Int!

  """ID from the artwork"""
  artworkId: Int!

  """Type ID from the event"""
  typeId: EventTypes!

  """Creation date of the record"""
  createdDate: DateTime
}

"""Event types supported"""
enum EventTypes {
  VISIT
  COMMENT
  FAVORITE
}

input ArtworkInput {
  """ID from the artwork"""
  id: Int!

  """ID from the artist"""
  artistId: Int!

  """Title of the artwork"""
  title: String!

  """Description of the artwork"""
  description: String

  """URL from the AWS S3 where is stored the artwork image"""
  imageUrl: String

  """Minimum working hours to complete the artwork"""
  minWorkingHours: Int

  """Maximum working hours to complete the artwork"""
  maxWorkingHours: Int

  """Minimum price for the artwork"""
  minPrice: Float

  """Maximum price for the artwork"""
  maxPrice: Float

  """Minimum height required to do the artwork"""
  minHeight: Float

  """Maximum height allowed to do the artwork"""
  maxHeight: Float

  """Minimum width required to do the artwork"""
  minWidth: Float

  """Maximum width allowed to do the artwork"""
  maxWidth: Float

  """Address from the artwork"""
  address: String

  """Geo longitude from the address of the artwork"""
  longitude: Float

  """Geo latitude from the address of the artwork"""
  latitude: Float

  """Publication date of the artwork"""
  createdDate: DateTime

  """Date of deletion of the artwork"""
  deletedDate: DateTime

  """Boolean to know if the artwork is soft deleted"""
  isDeleted: Boolean
}

input UserType {
  """ID from the user"""
  id: Int!

  """Type ID from the user"""
  typeId: UserTypes!

  """First name from the user"""
  firstName: String!

  """Last name from the user"""
  lastName: String!

  """Email address from the user"""
  email: String!

  """Auth password from the user"""
  pass: String!

  """Phone number from the user"""
  phone: String

  """Gender from the user"""
  gender: String

  """Birthdate of the user"""
  birthdate: DateTime

  """Home address from the user"""
  address: String

  """Geo longitude from the home address of the user"""
  longitude: Float

  """Geo latitude from the home address of the user"""
  latitude: Float

  """Contact information from the user"""
  contact: String

  """URL from the AWS S3 where is stored the user photo"""
  photoUrl: String

  """Google UID for auth"""
  googleUid: String

  """Facebook UID for auth"""
  facebookUid: String

  """Firebase token"""
  firebaseToken: String

  """Registration date of the user"""
  createdDate: DateTime

  """Date of deletion of the user"""
  deletedDate: DateTime

  """Boolean to know if the user is soft deleted"""
  isDeleted: Boolean
}

input CollectionInput {
  """ID from the collection"""
  id: Int!

  """ID from the user"""
  userId: Int!

  """Name of the collection"""
  name: String!

  """URL from the AWS S3 where is stored the image"""
  imageUrl: String

  """Creation date of the record"""
  createdDate: DateTime
}

input CommentInput {
  """ID from the comment"""
  id: Int!

  """ID from the user that created the comment"""
  commentatorId: Int!

  """Comment body"""
  comment: String!

  """ID from the user that is being commented"""
  userId: Int

  """ID from the artwork that is being commented"""
  artworkId: Int

  """ID from the comment that is being commented"""
  commentId: Int

  """Creation date of the record"""
  createdDate: String
}

input ReportInput {
  """ID from the report"""
  id: Int!

  """ID from the user that created the report"""
  reporterId: Int!

  """Report description"""
  description: String!

  """ID from the user that is being reported"""
  userId: Int

  """ID from the artwork that is being reported"""
  artworkId: Int

  """ID from the comment that is being reported"""
  commentId: Int

  """Creation date of the record"""
  createdDate: DateTime
}

input EventInput {
  """ID from the event"""
  id: Int!

  """ID from the user"""
  userId: Int!

  """ID from the artwork"""
  artworkId: Int!

  """Type ID from the event"""
  typeId: EventTypes!

  """Creation date of the record"""
  createdDate: DateTime
}

type Query {
  artworks(filters: FindArtworksInput): [Artwork!]!
  findArtworksByGeoRadius(
    """Maximum radius in meters for the geographical search"""
    radius: Int!
  ): [Artwork!]
  artwork(id: Int!): Artwork
  users(filters: FindUsersInput): [User!]!
  user(id: Int!): User
  followedArtists: [User!]!
  notifications: [Notification!]!
  comments(userId: Int, artworkId: Int, commentId: Int): [Comment!]!
  chatConversation(userId: Int!): [Comment!]!
  listOfCommentedUsers: [User!]!
  reports(userId: Int, artworkId: Int, commentId: Int): [Report!]!
  login(loginInput: LoginInput!): AuthResponse!
  getArtworkRecommendations(numberOfRecommendations: Int): [Artwork!]!
}

input FindArtworksInput {
  """ID from the artwork"""
  id: Int

  """ID from the artist"""
  artistId: Int

  """Title of the artwork"""
  title: String

  """Description of the artwork"""
  description: String

  """URL from the AWS S3 where is stored the artwork image"""
  imageUrl: String

  """Minimum working hours to complete the artwork"""
  minWorkingHours: Int

  """Maximum working hours to complete the artwork"""
  maxWorkingHours: Int

  """Minimum price for the artwork"""
  minPrice: Float

  """Maximum price for the artwork"""
  maxPrice: Float

  """Minimum height required to do the artwork"""
  minHeight: Float

  """Maximum height allowed to do the artwork"""
  maxHeight: Float

  """Minimum width required to do the artwork"""
  minWidth: Float

  """Maximum width allowed to do the artwork"""
  maxWidth: Float

  """Address from the artwork"""
  address: String

  """Geo longitude from the address of the artwork"""
  longitude: Float

  """Geo latitude from the address of the artwork"""
  latitude: Float

  """Publication date of the artwork"""
  createdDate: DateTime

  """Date of deletion of the artwork"""
  deletedDate: DateTime

  """Boolean to know if the artwork is soft deleted"""
  isDeleted: Boolean

  """
  Computes the Euclidean distance between this color ant the colors of all artworks
  """
  color: String

  """Artistic movements"""
  movements: [String!]

  """Artistic tags"""
  tags: [String!]

  """Artistic materials"""
  materials: [String!]
}

input FindUsersInput {
  """ID from the user"""
  id: Int

  """Type ID from the user"""
  typeId: UserTypes

  """First name from the user"""
  firstName: String

  """Last name from the user"""
  lastName: String

  """Email address from the user"""
  email: String

  """Auth password from the user"""
  pass: String

  """Phone number from the user"""
  phone: String

  """Gender from the user"""
  gender: String

  """Birthdate of the user"""
  birthdate: DateTime

  """Home address from the user"""
  address: String

  """Geo longitude from the home address of the user"""
  longitude: Float

  """Geo latitude from the home address of the user"""
  latitude: Float

  """Contact information from the user"""
  contact: String

  """URL from the AWS S3 where is stored the user photo"""
  photoUrl: String

  """Google UID for auth"""
  googleUid: String

  """Facebook UID for auth"""
  facebookUid: String

  """Firebase token"""
  firebaseToken: String

  """Registration date of the user"""
  createdDate: DateTime

  """Date of deletion of the user"""
  deletedDate: DateTime

  """Boolean to know if the user is soft deleted"""
  isDeleted: Boolean
}

input LoginInput {
  """Email address from the user"""
  email: String!

  """Auth password from the user"""
  pass: String!
}

type Mutation {
  createArtwork(createArtworkInput: CreateArtworkInput!): Artwork!
  updateArtwork(updateArtworkInput: UpdateArtworkInput!): Artwork!
  removeArtwork(id: Int!): Artwork!
  markUnmarkFavoriteArtwork(id: Int!): FavoriteArtwork!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  rateUser(id: Int!, rating: Int!): UserRating!
  followUnfollowUser(id: Int!): Follower!
  createGlobalNotification(title: String!): Notification!
  markNotificationAsViewed(id: Int!): Notification!
  removeNotification(id: Int!): Notification!

  """Method to auto generate test data"""
  runSeed: Boolean!

  """Method to reset the data from the DB (delete and then run the seed)"""
  resetDataFromDB: Boolean!
  createCollection(createCollectionInput: CreateCollectionInput!): Collection!
  updateCollection(updateCollectionInput: UpdateCollectionInput!): Collection!
  removeCollection(id: Int!): Collection!
  addRemoveArtworkFromCollection(collectionId: Int!, artworkId: Int!): ArtworkCollection!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(id: Int!, comment: String!): Comment!
  removeComment(id: Int!): Comment!
  createReport(createReportInput: CreateReportInput!): Report!
  updateReport(id: Int!, description: String!): Report!
  removeReport(id: Int!): Report!
  createEvent(createEventInput: CreateEventInput!): Event!
}

input CreateArtworkInput {
  """Title of the artwork"""
  title: String!

  """Description of the artwork"""
  description: String

  """URL from the AWS S3 where is stored the artwork image"""
  imageUrl: String

  """Minimum working hours to complete the artwork"""
  minWorkingHours: Int

  """Maximum working hours to complete the artwork"""
  maxWorkingHours: Int

  """Minimum price for the artwork"""
  minPrice: Float

  """Maximum price for the artwork"""
  maxPrice: Float

  """Minimum height required to do the artwork"""
  minHeight: Float

  """Maximum height allowed to do the artwork"""
  maxHeight: Float

  """Minimum width required to do the artwork"""
  minWidth: Float

  """Maximum width allowed to do the artwork"""
  maxWidth: Float

  """Address from the artwork"""
  address: String

  """Geo longitude from the address of the artwork"""
  longitude: Float

  """Geo latitude from the address of the artwork"""
  latitude: Float

  """Publication date of the artwork"""
  createdDate: DateTime

  """Date of deletion of the artwork"""
  deletedDate: DateTime

  """Boolean to know if the artwork is soft deleted"""
  isDeleted: Boolean

  """Photo from the user"""
  photo: String

  """List of collaborators artists"""
  collaborators: [Int!]

  """List of tags from the artwork"""
  tags: [String!]

  """List of addresses from the artwork"""
  addresses: [String!]

  """List of artistic movements from the artwork"""
  movements: [String!]

  """List of materials from the artwork"""
  materials: [String!]
}

input UpdateArtworkInput {
  """Title of the artwork"""
  title: String

  """Description of the artwork"""
  description: String

  """URL from the AWS S3 where is stored the artwork image"""
  imageUrl: String

  """Minimum working hours to complete the artwork"""
  minWorkingHours: Int

  """Maximum working hours to complete the artwork"""
  maxWorkingHours: Int

  """Minimum price for the artwork"""
  minPrice: Float

  """Maximum price for the artwork"""
  maxPrice: Float

  """Minimum height required to do the artwork"""
  minHeight: Float

  """Maximum height allowed to do the artwork"""
  maxHeight: Float

  """Minimum width required to do the artwork"""
  minWidth: Float

  """Maximum width allowed to do the artwork"""
  maxWidth: Float

  """Address from the artwork"""
  address: String

  """Geo longitude from the address of the artwork"""
  longitude: Float

  """Geo latitude from the address of the artwork"""
  latitude: Float

  """Publication date of the artwork"""
  createdDate: DateTime

  """Date of deletion of the artwork"""
  deletedDate: DateTime

  """Boolean to know if the artwork is soft deleted"""
  isDeleted: Boolean

  """Photo from the user"""
  photo: String

  """List of collaborators artists"""
  collaborators: [Int!]

  """List of tags from the artwork"""
  tags: [String!]

  """List of addresses from the artwork"""
  addresses: [String!]

  """List of artistic movements from the artwork"""
  movements: [String!]

  """List of materials from the artwork"""
  materials: [String!]

  """ID from the artwork to update"""
  id: Int!
}

input CreateUserInput {
  """Type ID from the user"""
  typeId: UserTypes!

  """First name from the user"""
  firstName: String!

  """Last name from the user"""
  lastName: String!

  """Email address from the user"""
  email: String!

  """Auth password from the user"""
  pass: String!

  """Phone number from the user"""
  phone: String

  """Gender from the user"""
  gender: String

  """Birthdate of the user"""
  birthdate: DateTime

  """Home address from the user"""
  address: String

  """Geo longitude from the home address of the user"""
  longitude: Float

  """Geo latitude from the home address of the user"""
  latitude: Float

  """Contact information from the user"""
  contact: String

  """URL from the AWS S3 where is stored the user photo"""
  photoUrl: String

  """Google UID for auth"""
  googleUid: String

  """Facebook UID for auth"""
  facebookUid: String

  """Firebase token"""
  firebaseToken: String

  """Registration date of the user"""
  createdDate: DateTime

  """Date of deletion of the user"""
  deletedDate: DateTime

  """Boolean to know if the user is soft deleted"""
  isDeleted: Boolean

  """Photo from the user"""
  photo: String
}

input UpdateUserInput {
  """Type ID from the user"""
  typeId: UserTypes

  """First name from the user"""
  firstName: String

  """Last name from the user"""
  lastName: String

  """Email address from the user"""
  email: String

  """Auth password from the user"""
  pass: String

  """Phone number from the user"""
  phone: String

  """Gender from the user"""
  gender: String

  """Birthdate of the user"""
  birthdate: DateTime

  """Home address from the user"""
  address: String

  """Geo longitude from the home address of the user"""
  longitude: Float

  """Geo latitude from the home address of the user"""
  latitude: Float

  """Contact information from the user"""
  contact: String

  """URL from the AWS S3 where is stored the user photo"""
  photoUrl: String

  """Google UID for auth"""
  googleUid: String

  """Facebook UID for auth"""
  facebookUid: String

  """Firebase token"""
  firebaseToken: String

  """Registration date of the user"""
  createdDate: DateTime

  """Date of deletion of the user"""
  deletedDate: DateTime

  """Boolean to know if the user is soft deleted"""
  isDeleted: Boolean

  """Photo from the user"""
  photo: String

  """ID from the user to update"""
  id: Int!
}

input CreateCollectionInput {
  """Name of the collection"""
  name: String!

  """URL from the AWS S3 where is stored the image"""
  imageUrl: String

  """Creation date of the record"""
  createdDate: DateTime
}

input UpdateCollectionInput {
  """Name of the collection"""
  name: String

  """URL from the AWS S3 where is stored the image"""
  imageUrl: String

  """Creation date of the record"""
  createdDate: DateTime

  """ID from the collection to update"""
  id: Int!
}

input CreateCommentInput {
  """Comment body"""
  comment: String!

  """ID from the user that is being commented"""
  userId: Int

  """ID from the artwork that is being commented"""
  artworkId: Int

  """ID from the comment that is being commented"""
  commentId: Int

  """Creation date of the record"""
  createdDate: String
}

input CreateReportInput {
  """Report description"""
  description: String!

  """ID from the user that is being reported"""
  userId: Int

  """ID from the artwork that is being reported"""
  artworkId: Int

  """ID from the comment that is being reported"""
  commentId: Int

  """Creation date of the record"""
  createdDate: DateTime
}

input CreateEventInput {
  """ID from the artwork"""
  artworkId: Int!

  """Type ID from the event"""
  typeId: EventTypes!

  """Creation date of the record"""
  createdDate: DateTime
}

type Subscription {
  userNotifications(userId: Int): Notification!
  globalNotifications: Notification!
  commentAdded(userId: Int, artworkId: Int, commentId: Int): Comment!
}