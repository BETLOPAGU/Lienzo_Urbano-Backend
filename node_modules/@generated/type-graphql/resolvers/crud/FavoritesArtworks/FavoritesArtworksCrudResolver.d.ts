import { GraphQLResolveInfo } from "graphql";
import { AggregateFavoritesArtworksArgs } from "./args/AggregateFavoritesArtworksArgs";
import { CreateManyFavoritesArtworksArgs } from "./args/CreateManyFavoritesArtworksArgs";
import { CreateOneFavoritesArtworksArgs } from "./args/CreateOneFavoritesArtworksArgs";
import { DeleteManyFavoritesArtworksArgs } from "./args/DeleteManyFavoritesArtworksArgs";
import { DeleteOneFavoritesArtworksArgs } from "./args/DeleteOneFavoritesArtworksArgs";
import { FindFirstFavoritesArtworksArgs } from "./args/FindFirstFavoritesArtworksArgs";
import { FindFirstFavoritesArtworksOrThrowArgs } from "./args/FindFirstFavoritesArtworksOrThrowArgs";
import { FindManyFavoritesArtworksArgs } from "./args/FindManyFavoritesArtworksArgs";
import { FindUniqueFavoritesArtworksArgs } from "./args/FindUniqueFavoritesArtworksArgs";
import { FindUniqueFavoritesArtworksOrThrowArgs } from "./args/FindUniqueFavoritesArtworksOrThrowArgs";
import { GroupByFavoritesArtworksArgs } from "./args/GroupByFavoritesArtworksArgs";
import { UpdateManyFavoritesArtworksArgs } from "./args/UpdateManyFavoritesArtworksArgs";
import { UpdateOneFavoritesArtworksArgs } from "./args/UpdateOneFavoritesArtworksArgs";
import { UpsertOneFavoritesArtworksArgs } from "./args/UpsertOneFavoritesArtworksArgs";
import { FavoritesArtworks } from "../../../models/FavoritesArtworks";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateFavoritesArtworks } from "../../outputs/AggregateFavoritesArtworks";
import { FavoritesArtworksGroupBy } from "../../outputs/FavoritesArtworksGroupBy";
export declare class FavoritesArtworksCrudResolver {
    aggregateFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: AggregateFavoritesArtworksArgs): Promise<AggregateFavoritesArtworks>;
    createManyFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: CreateManyFavoritesArtworksArgs): Promise<AffectedRowsOutput>;
    createOneFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: CreateOneFavoritesArtworksArgs): Promise<FavoritesArtworks>;
    deleteManyFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: DeleteManyFavoritesArtworksArgs): Promise<AffectedRowsOutput>;
    deleteOneFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: DeleteOneFavoritesArtworksArgs): Promise<FavoritesArtworks | null>;
    findFirstFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: FindFirstFavoritesArtworksArgs): Promise<FavoritesArtworks | null>;
    findFirstFavoritesArtworksOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstFavoritesArtworksOrThrowArgs): Promise<FavoritesArtworks | null>;
    findManyFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: FindManyFavoritesArtworksArgs): Promise<FavoritesArtworks[]>;
    findUniqueFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: FindUniqueFavoritesArtworksArgs): Promise<FavoritesArtworks | null>;
    findUniqueFavoritesArtworksOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindUniqueFavoritesArtworksOrThrowArgs): Promise<FavoritesArtworks | null>;
    groupByFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: GroupByFavoritesArtworksArgs): Promise<FavoritesArtworksGroupBy[]>;
    updateManyFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: UpdateManyFavoritesArtworksArgs): Promise<AffectedRowsOutput>;
    updateOneFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: UpdateOneFavoritesArtworksArgs): Promise<FavoritesArtworks | null>;
    upsertOneFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: UpsertOneFavoritesArtworksArgs): Promise<FavoritesArtworks>;
}
