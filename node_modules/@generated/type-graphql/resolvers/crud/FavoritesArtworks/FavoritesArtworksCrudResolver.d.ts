import { GraphQLResolveInfo } from "graphql";
import { AggregateFavoritesArtworksArgs } from "./args/AggregateFavoritesArtworksArgs";
import { CreateFavoritesArtworksArgs } from "./args/CreateFavoritesArtworksArgs";
import { CreateManyFavoritesArtworksArgs } from "./args/CreateManyFavoritesArtworksArgs";
import { DeleteFavoritesArtworksArgs } from "./args/DeleteFavoritesArtworksArgs";
import { DeleteManyFavoritesArtworksArgs } from "./args/DeleteManyFavoritesArtworksArgs";
import { FindFirstFavoritesArtworksArgs } from "./args/FindFirstFavoritesArtworksArgs";
import { FindManyFavoritesArtworksArgs } from "./args/FindManyFavoritesArtworksArgs";
import { FindUniqueFavoritesArtworksArgs } from "./args/FindUniqueFavoritesArtworksArgs";
import { GroupByFavoritesArtworksArgs } from "./args/GroupByFavoritesArtworksArgs";
import { UpdateFavoritesArtworksArgs } from "./args/UpdateFavoritesArtworksArgs";
import { UpdateManyFavoritesArtworksArgs } from "./args/UpdateManyFavoritesArtworksArgs";
import { UpsertFavoritesArtworksArgs } from "./args/UpsertFavoritesArtworksArgs";
import { FavoritesArtworks } from "../../../models/FavoritesArtworks";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateFavoritesArtworks } from "../../outputs/AggregateFavoritesArtworks";
import { FavoritesArtworksGroupBy } from "../../outputs/FavoritesArtworksGroupBy";
export declare class FavoritesArtworksCrudResolver {
    findUniqueFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: FindUniqueFavoritesArtworksArgs): Promise<FavoritesArtworks | null>;
    findFirstFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: FindFirstFavoritesArtworksArgs): Promise<FavoritesArtworks | null>;
    findManyFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: FindManyFavoritesArtworksArgs): Promise<FavoritesArtworks[]>;
    createFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: CreateFavoritesArtworksArgs): Promise<FavoritesArtworks>;
    createManyFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: CreateManyFavoritesArtworksArgs): Promise<AffectedRowsOutput>;
    deleteFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: DeleteFavoritesArtworksArgs): Promise<FavoritesArtworks | null>;
    updateFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: UpdateFavoritesArtworksArgs): Promise<FavoritesArtworks | null>;
    deleteManyFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: DeleteManyFavoritesArtworksArgs): Promise<AffectedRowsOutput>;
    updateManyFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: UpdateManyFavoritesArtworksArgs): Promise<AffectedRowsOutput>;
    upsertFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: UpsertFavoritesArtworksArgs): Promise<FavoritesArtworks>;
    aggregateFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: AggregateFavoritesArtworksArgs): Promise<AggregateFavoritesArtworks>;
    groupByFavoritesArtworks(ctx: any, info: GraphQLResolveInfo, args: GroupByFavoritesArtworksArgs): Promise<FavoritesArtworksGroupBy[]>;
}
