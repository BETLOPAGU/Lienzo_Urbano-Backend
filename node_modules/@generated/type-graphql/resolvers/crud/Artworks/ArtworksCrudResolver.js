"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArtworksCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const graphql_fields_1 = tslib_1.__importDefault(require("graphql-fields"));
const AggregateArtworksArgs_1 = require("./args/AggregateArtworksArgs");
const CreateManyArtworksArgs_1 = require("./args/CreateManyArtworksArgs");
const CreateOneArtworksArgs_1 = require("./args/CreateOneArtworksArgs");
const DeleteManyArtworksArgs_1 = require("./args/DeleteManyArtworksArgs");
const DeleteOneArtworksArgs_1 = require("./args/DeleteOneArtworksArgs");
const FindFirstArtworksArgs_1 = require("./args/FindFirstArtworksArgs");
const FindFirstArtworksOrThrowArgs_1 = require("./args/FindFirstArtworksOrThrowArgs");
const FindManyArtworksArgs_1 = require("./args/FindManyArtworksArgs");
const FindUniqueArtworksArgs_1 = require("./args/FindUniqueArtworksArgs");
const FindUniqueArtworksOrThrowArgs_1 = require("./args/FindUniqueArtworksOrThrowArgs");
const GroupByArtworksArgs_1 = require("./args/GroupByArtworksArgs");
const UpdateManyArtworksArgs_1 = require("./args/UpdateManyArtworksArgs");
const UpdateOneArtworksArgs_1 = require("./args/UpdateOneArtworksArgs");
const UpsertOneArtworksArgs_1 = require("./args/UpsertOneArtworksArgs");
const helpers_1 = require("../../../helpers");
const Artworks_1 = require("../../../models/Artworks");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateArtworks_1 = require("../../outputs/AggregateArtworks");
const ArtworksGroupBy_1 = require("../../outputs/ArtworksGroupBy");
let ArtworksCrudResolver = class ArtworksCrudResolver {
    async aggregateArtworks(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).artworks.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async createManyArtworks(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).artworks.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createOneArtworks(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).artworks.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyArtworks(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).artworks.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneArtworks(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).artworks.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstArtworks(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).artworks.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstArtworksOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).artworks.findFirstOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findManyArtworks(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).artworks.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findUniqueArtworks(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).artworks.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findUniqueArtworksOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).artworks.findUniqueOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupByArtworks(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).artworks.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManyArtworks(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).artworks.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneArtworks(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).artworks.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneArtworks(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).artworks.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateArtworks_1.AggregateArtworks, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateArtworksArgs_1.AggregateArtworksArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ArtworksCrudResolver.prototype, "aggregateArtworks", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyArtworksArgs_1.CreateManyArtworksArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ArtworksCrudResolver.prototype, "createManyArtworks", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Artworks_1.Artworks, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneArtworksArgs_1.CreateOneArtworksArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ArtworksCrudResolver.prototype, "createOneArtworks", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManyArtworksArgs_1.DeleteManyArtworksArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ArtworksCrudResolver.prototype, "deleteManyArtworks", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Artworks_1.Artworks, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneArtworksArgs_1.DeleteOneArtworksArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ArtworksCrudResolver.prototype, "deleteOneArtworks", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Artworks_1.Artworks, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstArtworksArgs_1.FindFirstArtworksArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ArtworksCrudResolver.prototype, "findFirstArtworks", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Artworks_1.Artworks, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstArtworksOrThrowArgs_1.FindFirstArtworksOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ArtworksCrudResolver.prototype, "findFirstArtworksOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [Artworks_1.Artworks], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyArtworksArgs_1.FindManyArtworksArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ArtworksCrudResolver.prototype, "findManyArtworks", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Artworks_1.Artworks, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueArtworksArgs_1.FindUniqueArtworksArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ArtworksCrudResolver.prototype, "findUniqueArtworks", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Artworks_1.Artworks, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueArtworksOrThrowArgs_1.FindUniqueArtworksOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ArtworksCrudResolver.prototype, "findUniqueArtworksOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [ArtworksGroupBy_1.ArtworksGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupByArtworksArgs_1.GroupByArtworksArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ArtworksCrudResolver.prototype, "groupByArtworks", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManyArtworksArgs_1.UpdateManyArtworksArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ArtworksCrudResolver.prototype, "updateManyArtworks", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Artworks_1.Artworks, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneArtworksArgs_1.UpdateOneArtworksArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ArtworksCrudResolver.prototype, "updateOneArtworks", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Artworks_1.Artworks, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneArtworksArgs_1.UpsertOneArtworksArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ArtworksCrudResolver.prototype, "upsertOneArtworks", null);
ArtworksCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => Artworks_1.Artworks)
], ArtworksCrudResolver);
exports.ArtworksCrudResolver = ArtworksCrudResolver;
