import { GraphQLResolveInfo } from "graphql";
import { AggregateArtworksArgs } from "./args/AggregateArtworksArgs";
import { CreateArtworksArgs } from "./args/CreateArtworksArgs";
import { CreateManyArtworksArgs } from "./args/CreateManyArtworksArgs";
import { DeleteArtworksArgs } from "./args/DeleteArtworksArgs";
import { DeleteManyArtworksArgs } from "./args/DeleteManyArtworksArgs";
import { FindFirstArtworksArgs } from "./args/FindFirstArtworksArgs";
import { FindManyArtworksArgs } from "./args/FindManyArtworksArgs";
import { FindUniqueArtworksArgs } from "./args/FindUniqueArtworksArgs";
import { GroupByArtworksArgs } from "./args/GroupByArtworksArgs";
import { UpdateArtworksArgs } from "./args/UpdateArtworksArgs";
import { UpdateManyArtworksArgs } from "./args/UpdateManyArtworksArgs";
import { UpsertArtworksArgs } from "./args/UpsertArtworksArgs";
import { Artworks } from "../../../models/Artworks";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateArtworks } from "../../outputs/AggregateArtworks";
import { ArtworksGroupBy } from "../../outputs/ArtworksGroupBy";
export declare class ArtworksCrudResolver {
    findUniqueArtworks(ctx: any, info: GraphQLResolveInfo, args: FindUniqueArtworksArgs): Promise<Artworks | null>;
    findFirstArtworks(ctx: any, info: GraphQLResolveInfo, args: FindFirstArtworksArgs): Promise<Artworks | null>;
    findManyArtworks(ctx: any, info: GraphQLResolveInfo, args: FindManyArtworksArgs): Promise<Artworks[]>;
    createArtworks(ctx: any, info: GraphQLResolveInfo, args: CreateArtworksArgs): Promise<Artworks>;
    createManyArtworks(ctx: any, info: GraphQLResolveInfo, args: CreateManyArtworksArgs): Promise<AffectedRowsOutput>;
    deleteArtworks(ctx: any, info: GraphQLResolveInfo, args: DeleteArtworksArgs): Promise<Artworks | null>;
    updateArtworks(ctx: any, info: GraphQLResolveInfo, args: UpdateArtworksArgs): Promise<Artworks | null>;
    deleteManyArtworks(ctx: any, info: GraphQLResolveInfo, args: DeleteManyArtworksArgs): Promise<AffectedRowsOutput>;
    updateManyArtworks(ctx: any, info: GraphQLResolveInfo, args: UpdateManyArtworksArgs): Promise<AffectedRowsOutput>;
    upsertArtworks(ctx: any, info: GraphQLResolveInfo, args: UpsertArtworksArgs): Promise<Artworks>;
    aggregateArtworks(ctx: any, info: GraphQLResolveInfo, args: AggregateArtworksArgs): Promise<AggregateArtworks>;
    groupByArtworks(ctx: any, info: GraphQLResolveInfo, args: GroupByArtworksArgs): Promise<ArtworksGroupBy[]>;
}
