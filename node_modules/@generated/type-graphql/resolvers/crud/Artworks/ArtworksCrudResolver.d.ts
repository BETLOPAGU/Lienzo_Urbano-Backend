import { GraphQLResolveInfo } from "graphql";
import { AggregateArtworksArgs } from "./args/AggregateArtworksArgs";
import { CreateManyArtworksArgs } from "./args/CreateManyArtworksArgs";
import { CreateOneArtworksArgs } from "./args/CreateOneArtworksArgs";
import { DeleteManyArtworksArgs } from "./args/DeleteManyArtworksArgs";
import { DeleteOneArtworksArgs } from "./args/DeleteOneArtworksArgs";
import { FindFirstArtworksArgs } from "./args/FindFirstArtworksArgs";
import { FindFirstArtworksOrThrowArgs } from "./args/FindFirstArtworksOrThrowArgs";
import { FindManyArtworksArgs } from "./args/FindManyArtworksArgs";
import { FindUniqueArtworksArgs } from "./args/FindUniqueArtworksArgs";
import { FindUniqueArtworksOrThrowArgs } from "./args/FindUniqueArtworksOrThrowArgs";
import { GroupByArtworksArgs } from "./args/GroupByArtworksArgs";
import { UpdateManyArtworksArgs } from "./args/UpdateManyArtworksArgs";
import { UpdateOneArtworksArgs } from "./args/UpdateOneArtworksArgs";
import { UpsertOneArtworksArgs } from "./args/UpsertOneArtworksArgs";
import { Artworks } from "../../../models/Artworks";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateArtworks } from "../../outputs/AggregateArtworks";
import { ArtworksGroupBy } from "../../outputs/ArtworksGroupBy";
export declare class ArtworksCrudResolver {
    aggregateArtworks(ctx: any, info: GraphQLResolveInfo, args: AggregateArtworksArgs): Promise<AggregateArtworks>;
    createManyArtworks(ctx: any, info: GraphQLResolveInfo, args: CreateManyArtworksArgs): Promise<AffectedRowsOutput>;
    createOneArtworks(ctx: any, info: GraphQLResolveInfo, args: CreateOneArtworksArgs): Promise<Artworks>;
    deleteManyArtworks(ctx: any, info: GraphQLResolveInfo, args: DeleteManyArtworksArgs): Promise<AffectedRowsOutput>;
    deleteOneArtworks(ctx: any, info: GraphQLResolveInfo, args: DeleteOneArtworksArgs): Promise<Artworks | null>;
    findFirstArtworks(ctx: any, info: GraphQLResolveInfo, args: FindFirstArtworksArgs): Promise<Artworks | null>;
    findFirstArtworksOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstArtworksOrThrowArgs): Promise<Artworks | null>;
    findManyArtworks(ctx: any, info: GraphQLResolveInfo, args: FindManyArtworksArgs): Promise<Artworks[]>;
    findUniqueArtworks(ctx: any, info: GraphQLResolveInfo, args: FindUniqueArtworksArgs): Promise<Artworks | null>;
    findUniqueArtworksOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindUniqueArtworksOrThrowArgs): Promise<Artworks | null>;
    groupByArtworks(ctx: any, info: GraphQLResolveInfo, args: GroupByArtworksArgs): Promise<ArtworksGroupBy[]>;
    updateManyArtworks(ctx: any, info: GraphQLResolveInfo, args: UpdateManyArtworksArgs): Promise<AffectedRowsOutput>;
    updateOneArtworks(ctx: any, info: GraphQLResolveInfo, args: UpdateOneArtworksArgs): Promise<Artworks | null>;
    upsertOneArtworks(ctx: any, info: GraphQLResolveInfo, args: UpsertOneArtworksArgs): Promise<Artworks>;
}
