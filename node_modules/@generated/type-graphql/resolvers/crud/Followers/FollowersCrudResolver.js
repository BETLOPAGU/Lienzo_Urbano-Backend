"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FollowersCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const graphql_fields_1 = tslib_1.__importDefault(require("graphql-fields"));
const AggregateFollowersArgs_1 = require("./args/AggregateFollowersArgs");
const CreateManyFollowersArgs_1 = require("./args/CreateManyFollowersArgs");
const CreateOneFollowersArgs_1 = require("./args/CreateOneFollowersArgs");
const DeleteManyFollowersArgs_1 = require("./args/DeleteManyFollowersArgs");
const DeleteOneFollowersArgs_1 = require("./args/DeleteOneFollowersArgs");
const FindFirstFollowersArgs_1 = require("./args/FindFirstFollowersArgs");
const FindFirstFollowersOrThrowArgs_1 = require("./args/FindFirstFollowersOrThrowArgs");
const FindManyFollowersArgs_1 = require("./args/FindManyFollowersArgs");
const FindUniqueFollowersArgs_1 = require("./args/FindUniqueFollowersArgs");
const FindUniqueFollowersOrThrowArgs_1 = require("./args/FindUniqueFollowersOrThrowArgs");
const GroupByFollowersArgs_1 = require("./args/GroupByFollowersArgs");
const UpdateManyFollowersArgs_1 = require("./args/UpdateManyFollowersArgs");
const UpdateOneFollowersArgs_1 = require("./args/UpdateOneFollowersArgs");
const UpsertOneFollowersArgs_1 = require("./args/UpsertOneFollowersArgs");
const helpers_1 = require("../../../helpers");
const Followers_1 = require("../../../models/Followers");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateFollowers_1 = require("../../outputs/AggregateFollowers");
const FollowersGroupBy_1 = require("../../outputs/FollowersGroupBy");
let FollowersCrudResolver = class FollowersCrudResolver {
    async aggregateFollowers(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).followers.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async createManyFollowers(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).followers.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createOneFollowers(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).followers.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyFollowers(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).followers.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneFollowers(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).followers.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstFollowers(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).followers.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstFollowersOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).followers.findFirstOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findManyFollowers(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).followers.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findUniqueFollowers(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).followers.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findUniqueFollowersOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).followers.findUniqueOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupByFollowers(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).followers.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManyFollowers(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).followers.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneFollowers(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).followers.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneFollowers(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).followers.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateFollowers_1.AggregateFollowers, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateFollowersArgs_1.AggregateFollowersArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FollowersCrudResolver.prototype, "aggregateFollowers", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyFollowersArgs_1.CreateManyFollowersArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FollowersCrudResolver.prototype, "createManyFollowers", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Followers_1.Followers, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneFollowersArgs_1.CreateOneFollowersArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FollowersCrudResolver.prototype, "createOneFollowers", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManyFollowersArgs_1.DeleteManyFollowersArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FollowersCrudResolver.prototype, "deleteManyFollowers", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Followers_1.Followers, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneFollowersArgs_1.DeleteOneFollowersArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FollowersCrudResolver.prototype, "deleteOneFollowers", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Followers_1.Followers, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstFollowersArgs_1.FindFirstFollowersArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FollowersCrudResolver.prototype, "findFirstFollowers", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Followers_1.Followers, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstFollowersOrThrowArgs_1.FindFirstFollowersOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FollowersCrudResolver.prototype, "findFirstFollowersOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [Followers_1.Followers], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyFollowersArgs_1.FindManyFollowersArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FollowersCrudResolver.prototype, "findManyFollowers", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Followers_1.Followers, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueFollowersArgs_1.FindUniqueFollowersArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FollowersCrudResolver.prototype, "findUniqueFollowers", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Followers_1.Followers, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueFollowersOrThrowArgs_1.FindUniqueFollowersOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FollowersCrudResolver.prototype, "findUniqueFollowersOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [FollowersGroupBy_1.FollowersGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupByFollowersArgs_1.GroupByFollowersArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FollowersCrudResolver.prototype, "groupByFollowers", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManyFollowersArgs_1.UpdateManyFollowersArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FollowersCrudResolver.prototype, "updateManyFollowers", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Followers_1.Followers, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneFollowersArgs_1.UpdateOneFollowersArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FollowersCrudResolver.prototype, "updateOneFollowers", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Followers_1.Followers, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneFollowersArgs_1.UpsertOneFollowersArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FollowersCrudResolver.prototype, "upsertOneFollowers", null);
FollowersCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => Followers_1.Followers)
], FollowersCrudResolver);
exports.FollowersCrudResolver = FollowersCrudResolver;
