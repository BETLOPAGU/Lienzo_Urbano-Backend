"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArtworksGroupBy = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const ArtworksAvgAggregate_1 = require("../outputs/ArtworksAvgAggregate");
const ArtworksCountAggregate_1 = require("../outputs/ArtworksCountAggregate");
const ArtworksMaxAggregate_1 = require("../outputs/ArtworksMaxAggregate");
const ArtworksMinAggregate_1 = require("../outputs/ArtworksMinAggregate");
const ArtworksSumAggregate_1 = require("../outputs/ArtworksSumAggregate");
let ArtworksGroupBy = class ArtworksGroupBy {
};
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Number)
], ArtworksGroupBy.prototype, "id", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Number)
], ArtworksGroupBy.prototype, "artistId", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], ArtworksGroupBy.prototype, "title", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], ArtworksGroupBy.prototype, "description", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", String)
], ArtworksGroupBy.prototype, "imageUrl", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => Date, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", Date)
], ArtworksGroupBy.prototype, "publicationDate", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", String)
], ArtworksGroupBy.prototype, "categories", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => ArtworksCountAggregate_1.ArtworksCountAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", ArtworksCountAggregate_1.ArtworksCountAggregate)
], ArtworksGroupBy.prototype, "_count", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => ArtworksAvgAggregate_1.ArtworksAvgAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", ArtworksAvgAggregate_1.ArtworksAvgAggregate)
], ArtworksGroupBy.prototype, "_avg", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => ArtworksSumAggregate_1.ArtworksSumAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", ArtworksSumAggregate_1.ArtworksSumAggregate)
], ArtworksGroupBy.prototype, "_sum", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => ArtworksMinAggregate_1.ArtworksMinAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", ArtworksMinAggregate_1.ArtworksMinAggregate)
], ArtworksGroupBy.prototype, "_min", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => ArtworksMaxAggregate_1.ArtworksMaxAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", ArtworksMaxAggregate_1.ArtworksMaxAggregate)
], ArtworksGroupBy.prototype, "_max", void 0);
ArtworksGroupBy = tslib_1.__decorate([
    TypeGraphQL.ObjectType("ArtworksGroupBy", {
        isAbstract: true
    })
], ArtworksGroupBy);
exports.ArtworksGroupBy = ArtworksGroupBy;
