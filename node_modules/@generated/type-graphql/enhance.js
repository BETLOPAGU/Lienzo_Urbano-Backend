"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib_1 = require("tslib");
const tslib = tslib_1.__importStar(require("tslib"));
const crudResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = tslib_1.__importStar(require("./resolvers/crud/args.index"));
const actionResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = tslib_1.__importStar(require("./resolvers/relations/resolvers.index"));
const models = tslib_1.__importStar(require("./models"));
const outputTypes = tslib_1.__importStar(require("./resolvers/outputs"));
const inputTypes = tslib_1.__importStar(require("./resolvers/inputs"));
const crudResolversMap = {
    Users: crudResolvers.UsersCrudResolver,
    Artworks: crudResolvers.ArtworksCrudResolver,
    Comments: crudResolvers.CommentsCrudResolver,
    FavoritesArtworks: crudResolvers.FavoritesArtworksCrudResolver,
    Followers: crudResolvers.FollowersCrudResolver
};
const actionResolversMap = {
    Users: {
        findUniqueUsers: actionResolvers.FindUniqueUsersResolver,
        findFirstUsers: actionResolvers.FindFirstUsersResolver,
        findManyUsers: actionResolvers.FindManyUsersResolver,
        createUsers: actionResolvers.CreateUsersResolver,
        createManyUsers: actionResolvers.CreateManyUsersResolver,
        deleteUsers: actionResolvers.DeleteUsersResolver,
        updateUsers: actionResolvers.UpdateUsersResolver,
        deleteManyUsers: actionResolvers.DeleteManyUsersResolver,
        updateManyUsers: actionResolvers.UpdateManyUsersResolver,
        upsertUsers: actionResolvers.UpsertUsersResolver,
        aggregateUsers: actionResolvers.AggregateUsersResolver,
        groupByUsers: actionResolvers.GroupByUsersResolver
    },
    Artworks: {
        findUniqueArtworks: actionResolvers.FindUniqueArtworksResolver,
        findFirstArtworks: actionResolvers.FindFirstArtworksResolver,
        findManyArtworks: actionResolvers.FindManyArtworksResolver,
        createArtworks: actionResolvers.CreateArtworksResolver,
        createManyArtworks: actionResolvers.CreateManyArtworksResolver,
        deleteArtworks: actionResolvers.DeleteArtworksResolver,
        updateArtworks: actionResolvers.UpdateArtworksResolver,
        deleteManyArtworks: actionResolvers.DeleteManyArtworksResolver,
        updateManyArtworks: actionResolvers.UpdateManyArtworksResolver,
        upsertArtworks: actionResolvers.UpsertArtworksResolver,
        aggregateArtworks: actionResolvers.AggregateArtworksResolver,
        groupByArtworks: actionResolvers.GroupByArtworksResolver
    },
    Comments: {
        findUniqueComments: actionResolvers.FindUniqueCommentsResolver,
        findFirstComments: actionResolvers.FindFirstCommentsResolver,
        findManyComments: actionResolvers.FindManyCommentsResolver,
        createComments: actionResolvers.CreateCommentsResolver,
        createManyComments: actionResolvers.CreateManyCommentsResolver,
        deleteComments: actionResolvers.DeleteCommentsResolver,
        updateComments: actionResolvers.UpdateCommentsResolver,
        deleteManyComments: actionResolvers.DeleteManyCommentsResolver,
        updateManyComments: actionResolvers.UpdateManyCommentsResolver,
        upsertComments: actionResolvers.UpsertCommentsResolver,
        aggregateComments: actionResolvers.AggregateCommentsResolver,
        groupByComments: actionResolvers.GroupByCommentsResolver
    },
    FavoritesArtworks: {
        findUniqueFavoritesArtworks: actionResolvers.FindUniqueFavoritesArtworksResolver,
        findFirstFavoritesArtworks: actionResolvers.FindFirstFavoritesArtworksResolver,
        findManyFavoritesArtworks: actionResolvers.FindManyFavoritesArtworksResolver,
        createFavoritesArtworks: actionResolvers.CreateFavoritesArtworksResolver,
        createManyFavoritesArtworks: actionResolvers.CreateManyFavoritesArtworksResolver,
        deleteFavoritesArtworks: actionResolvers.DeleteFavoritesArtworksResolver,
        updateFavoritesArtworks: actionResolvers.UpdateFavoritesArtworksResolver,
        deleteManyFavoritesArtworks: actionResolvers.DeleteManyFavoritesArtworksResolver,
        updateManyFavoritesArtworks: actionResolvers.UpdateManyFavoritesArtworksResolver,
        upsertFavoritesArtworks: actionResolvers.UpsertFavoritesArtworksResolver,
        aggregateFavoritesArtworks: actionResolvers.AggregateFavoritesArtworksResolver,
        groupByFavoritesArtworks: actionResolvers.GroupByFavoritesArtworksResolver
    },
    Followers: {
        findUniqueFollowers: actionResolvers.FindUniqueFollowersResolver,
        findFirstFollowers: actionResolvers.FindFirstFollowersResolver,
        findManyFollowers: actionResolvers.FindManyFollowersResolver,
        createFollowers: actionResolvers.CreateFollowersResolver,
        createManyFollowers: actionResolvers.CreateManyFollowersResolver,
        deleteFollowers: actionResolvers.DeleteFollowersResolver,
        updateFollowers: actionResolvers.UpdateFollowersResolver,
        deleteManyFollowers: actionResolvers.DeleteManyFollowersResolver,
        updateManyFollowers: actionResolvers.UpdateManyFollowersResolver,
        upsertFollowers: actionResolvers.UpsertFollowersResolver,
        aggregateFollowers: actionResolvers.AggregateFollowersResolver,
        groupByFollowers: actionResolvers.GroupByFollowersResolver
    }
};
const crudResolversInfo = {
    Users: ["findUniqueUsers", "findFirstUsers", "findManyUsers", "createUsers", "createManyUsers", "deleteUsers", "updateUsers", "deleteManyUsers", "updateManyUsers", "upsertUsers", "aggregateUsers", "groupByUsers"],
    Artworks: ["findUniqueArtworks", "findFirstArtworks", "findManyArtworks", "createArtworks", "createManyArtworks", "deleteArtworks", "updateArtworks", "deleteManyArtworks", "updateManyArtworks", "upsertArtworks", "aggregateArtworks", "groupByArtworks"],
    Comments: ["findUniqueComments", "findFirstComments", "findManyComments", "createComments", "createManyComments", "deleteComments", "updateComments", "deleteManyComments", "updateManyComments", "upsertComments", "aggregateComments", "groupByComments"],
    FavoritesArtworks: ["findUniqueFavoritesArtworks", "findFirstFavoritesArtworks", "findManyFavoritesArtworks", "createFavoritesArtworks", "createManyFavoritesArtworks", "deleteFavoritesArtworks", "updateFavoritesArtworks", "deleteManyFavoritesArtworks", "updateManyFavoritesArtworks", "upsertFavoritesArtworks", "aggregateFavoritesArtworks", "groupByFavoritesArtworks"],
    Followers: ["findUniqueFollowers", "findFirstFollowers", "findManyFollowers", "createFollowers", "createManyFollowers", "deleteFollowers", "updateFollowers", "deleteManyFollowers", "updateManyFollowers", "upsertFollowers", "aggregateFollowers", "groupByFollowers"]
};
const argsInfo = {
    FindUniqueUsersArgs: ["where"],
    FindFirstUsersArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUsersArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUsersArgs: ["data"],
    CreateManyUsersArgs: ["data", "skipDuplicates"],
    DeleteUsersArgs: ["where"],
    UpdateUsersArgs: ["data", "where"],
    DeleteManyUsersArgs: ["where"],
    UpdateManyUsersArgs: ["data", "where"],
    UpsertUsersArgs: ["where", "create", "update"],
    AggregateUsersArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUsersArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueArtworksArgs: ["where"],
    FindFirstArtworksArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyArtworksArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateArtworksArgs: ["data"],
    CreateManyArtworksArgs: ["data", "skipDuplicates"],
    DeleteArtworksArgs: ["where"],
    UpdateArtworksArgs: ["data", "where"],
    DeleteManyArtworksArgs: ["where"],
    UpdateManyArtworksArgs: ["data", "where"],
    UpsertArtworksArgs: ["where", "create", "update"],
    AggregateArtworksArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByArtworksArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCommentsArgs: ["where"],
    FindFirstCommentsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCommentsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCommentsArgs: ["data"],
    CreateManyCommentsArgs: ["data", "skipDuplicates"],
    DeleteCommentsArgs: ["where"],
    UpdateCommentsArgs: ["data", "where"],
    DeleteManyCommentsArgs: ["where"],
    UpdateManyCommentsArgs: ["data", "where"],
    UpsertCommentsArgs: ["where", "create", "update"],
    AggregateCommentsArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCommentsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueFavoritesArtworksArgs: ["where"],
    FindFirstFavoritesArtworksArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyFavoritesArtworksArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateFavoritesArtworksArgs: ["data"],
    CreateManyFavoritesArtworksArgs: ["data", "skipDuplicates"],
    DeleteFavoritesArtworksArgs: ["where"],
    UpdateFavoritesArtworksArgs: ["data", "where"],
    DeleteManyFavoritesArtworksArgs: ["where"],
    UpdateManyFavoritesArtworksArgs: ["data", "where"],
    UpsertFavoritesArtworksArgs: ["where", "create", "update"],
    AggregateFavoritesArtworksArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByFavoritesArtworksArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueFollowersArgs: ["where"],
    FindFirstFollowersArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyFollowersArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateFollowersArgs: ["data"],
    CreateManyFollowersArgs: ["data", "skipDuplicates"],
    DeleteFollowersArgs: ["where"],
    UpdateFollowersArgs: ["data", "where"],
    DeleteManyFollowersArgs: ["where"],
    UpdateManyFollowersArgs: ["data", "where"],
    UpsertFollowersArgs: ["where", "create", "update"],
    AggregateFollowersArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByFollowersArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
                tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    Users: relationResolvers.UsersRelationsResolver,
    Artworks: relationResolvers.ArtworksRelationsResolver,
    Comments: relationResolvers.CommentsRelationsResolver,
    FavoritesArtworks: relationResolvers.FavoritesArtworksRelationsResolver,
    Followers: relationResolvers.FollowersRelationsResolver
};
const relationResolversInfo = {
    Users: ["artworks", "comments", "favoritesArtworks", "followers_followers_artistIdTousers", "followers_followers_userIdTousers"],
    Artworks: ["users", "comments", "favoritesArtworks"],
    Comments: ["artworks", "users"],
    FavoritesArtworks: ["artworks", "users"],
    Followers: ["users_followers_artistIdTousers", "users_followers_userIdTousers"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    Users: ["id", "typeId", "name", "email", "pass", "address", "contact", "photoUrl"],
    Artworks: ["id", "artistId", "title", "description", "imageUrl", "publicationDate", "categories"],
    Comments: ["id", "artworkId", "userId", "comment", "postingDate"],
    FavoritesArtworks: ["id", "userId", "artworkId", "createdDate"],
    Followers: ["id", "userId", "artistId", "createdDate"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateUsers: ["_count", "_avg", "_sum", "_min", "_max"],
    UsersGroupBy: ["id", "typeId", "name", "email", "pass", "address", "contact", "photoUrl", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateArtworks: ["_count", "_avg", "_sum", "_min", "_max"],
    ArtworksGroupBy: ["id", "artistId", "title", "description", "imageUrl", "publicationDate", "categories", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateComments: ["_count", "_avg", "_sum", "_min", "_max"],
    CommentsGroupBy: ["id", "artworkId", "userId", "comment", "postingDate", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateFavoritesArtworks: ["_count", "_avg", "_sum", "_min", "_max"],
    FavoritesArtworksGroupBy: ["id", "userId", "artworkId", "createdDate", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateFollowers: ["_count", "_avg", "_sum", "_min", "_max"],
    FollowersGroupBy: ["id", "userId", "artistId", "createdDate", "_count", "_avg", "_sum", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    UsersCount: ["artworks", "comments", "favoritesArtworks", "followers_followers_artistIdTousers", "followers_followers_userIdTousers"],
    UsersCountAggregate: ["id", "typeId", "name", "email", "pass", "address", "contact", "photoUrl", "_all"],
    UsersAvgAggregate: ["id", "typeId"],
    UsersSumAggregate: ["id", "typeId"],
    UsersMinAggregate: ["id", "typeId", "name", "email", "pass", "address", "contact", "photoUrl"],
    UsersMaxAggregate: ["id", "typeId", "name", "email", "pass", "address", "contact", "photoUrl"],
    ArtworksCount: ["comments", "favoritesArtworks"],
    ArtworksCountAggregate: ["id", "artistId", "title", "description", "imageUrl", "publicationDate", "categories", "_all"],
    ArtworksAvgAggregate: ["id", "artistId"],
    ArtworksSumAggregate: ["id", "artistId"],
    ArtworksMinAggregate: ["id", "artistId", "title", "description", "imageUrl", "publicationDate", "categories"],
    ArtworksMaxAggregate: ["id", "artistId", "title", "description", "imageUrl", "publicationDate", "categories"],
    CommentsCountAggregate: ["id", "artworkId", "userId", "comment", "postingDate", "_all"],
    CommentsAvgAggregate: ["id", "artworkId", "userId"],
    CommentsSumAggregate: ["id", "artworkId", "userId"],
    CommentsMinAggregate: ["id", "artworkId", "userId", "comment", "postingDate"],
    CommentsMaxAggregate: ["id", "artworkId", "userId", "comment", "postingDate"],
    FavoritesArtworksCountAggregate: ["id", "userId", "artworkId", "createdDate", "_all"],
    FavoritesArtworksAvgAggregate: ["id", "userId", "artworkId"],
    FavoritesArtworksSumAggregate: ["id", "userId", "artworkId"],
    FavoritesArtworksMinAggregate: ["id", "userId", "artworkId", "createdDate"],
    FavoritesArtworksMaxAggregate: ["id", "userId", "artworkId", "createdDate"],
    FollowersCountAggregate: ["id", "userId", "artistId", "createdDate", "_all"],
    FollowersAvgAggregate: ["id", "userId", "artistId"],
    FollowersSumAggregate: ["id", "userId", "artistId"],
    FollowersMinAggregate: ["id", "userId", "artistId", "createdDate"],
    FollowersMaxAggregate: ["id", "userId", "artistId", "createdDate"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    UsersWhereInput: ["AND", "OR", "NOT", "id", "typeId", "name", "email", "pass", "address", "contact", "photoUrl", "artworks", "comments", "favoritesArtworks", "followers_followers_artistIdTousers", "followers_followers_userIdTousers"],
    UsersOrderByWithRelationInput: ["id", "typeId", "name", "email", "pass", "address", "contact", "photoUrl", "artworks", "comments", "favoritesArtworks", "followers_followers_artistIdTousers", "followers_followers_userIdTousers"],
    UsersWhereUniqueInput: ["id", "email"],
    UsersOrderByWithAggregationInput: ["id", "typeId", "name", "email", "pass", "address", "contact", "photoUrl", "_count", "_avg", "_max", "_min", "_sum"],
    UsersScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "typeId", "name", "email", "pass", "address", "contact", "photoUrl"],
    ArtworksWhereInput: ["AND", "OR", "NOT", "id", "artistId", "title", "description", "imageUrl", "publicationDate", "categories", "users", "comments", "favoritesArtworks"],
    ArtworksOrderByWithRelationInput: ["id", "artistId", "title", "description", "imageUrl", "publicationDate", "categories", "users", "comments", "favoritesArtworks"],
    ArtworksWhereUniqueInput: ["id"],
    ArtworksOrderByWithAggregationInput: ["id", "artistId", "title", "description", "imageUrl", "publicationDate", "categories", "_count", "_avg", "_max", "_min", "_sum"],
    ArtworksScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "artistId", "title", "description", "imageUrl", "publicationDate", "categories"],
    CommentsWhereInput: ["AND", "OR", "NOT", "id", "artworkId", "userId", "comment", "postingDate", "artworks", "users"],
    CommentsOrderByWithRelationInput: ["id", "artworkId", "userId", "comment", "postingDate", "artworks", "users"],
    CommentsWhereUniqueInput: ["id"],
    CommentsOrderByWithAggregationInput: ["id", "artworkId", "userId", "comment", "postingDate", "_count", "_avg", "_max", "_min", "_sum"],
    CommentsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "artworkId", "userId", "comment", "postingDate"],
    FavoritesArtworksWhereInput: ["AND", "OR", "NOT", "id", "userId", "artworkId", "createdDate", "artworks", "users"],
    FavoritesArtworksOrderByWithRelationInput: ["id", "userId", "artworkId", "createdDate", "artworks", "users"],
    FavoritesArtworksWhereUniqueInput: ["id"],
    FavoritesArtworksOrderByWithAggregationInput: ["id", "userId", "artworkId", "createdDate", "_count", "_avg", "_max", "_min", "_sum"],
    FavoritesArtworksScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId", "artworkId", "createdDate"],
    FollowersWhereInput: ["AND", "OR", "NOT", "id", "userId", "artistId", "createdDate", "users_followers_artistIdTousers", "users_followers_userIdTousers"],
    FollowersOrderByWithRelationInput: ["id", "userId", "artistId", "createdDate", "users_followers_artistIdTousers", "users_followers_userIdTousers"],
    FollowersWhereUniqueInput: ["id"],
    FollowersOrderByWithAggregationInput: ["id", "userId", "artistId", "createdDate", "_count", "_avg", "_max", "_min", "_sum"],
    FollowersScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId", "artistId", "createdDate"],
    UsersCreateInput: ["typeId", "name", "email", "pass", "address", "contact", "photoUrl", "artworks", "comments", "favoritesArtworks", "followers_followers_artistIdTousers", "followers_followers_userIdTousers"],
    UsersUpdateInput: ["typeId", "name", "email", "pass", "address", "contact", "photoUrl", "artworks", "comments", "favoritesArtworks", "followers_followers_artistIdTousers", "followers_followers_userIdTousers"],
    UsersCreateManyInput: ["id", "typeId", "name", "email", "pass", "address", "contact", "photoUrl"],
    UsersUpdateManyMutationInput: ["typeId", "name", "email", "pass", "address", "contact", "photoUrl"],
    ArtworksCreateInput: ["title", "description", "imageUrl", "publicationDate", "categories", "users", "comments", "favoritesArtworks"],
    ArtworksUpdateInput: ["title", "description", "imageUrl", "publicationDate", "categories", "users", "comments", "favoritesArtworks"],
    ArtworksCreateManyInput: ["id", "artistId", "title", "description", "imageUrl", "publicationDate", "categories"],
    ArtworksUpdateManyMutationInput: ["title", "description", "imageUrl", "publicationDate", "categories"],
    CommentsCreateInput: ["comment", "postingDate", "artworks", "users"],
    CommentsUpdateInput: ["comment", "postingDate", "artworks", "users"],
    CommentsCreateManyInput: ["id", "artworkId", "userId", "comment", "postingDate"],
    CommentsUpdateManyMutationInput: ["comment", "postingDate"],
    FavoritesArtworksCreateInput: ["createdDate", "artworks", "users"],
    FavoritesArtworksUpdateInput: ["createdDate", "artworks", "users"],
    FavoritesArtworksCreateManyInput: ["id", "userId", "artworkId", "createdDate"],
    FavoritesArtworksUpdateManyMutationInput: ["createdDate"],
    FollowersCreateInput: ["createdDate", "users_followers_artistIdTousers", "users_followers_userIdTousers"],
    FollowersUpdateInput: ["createdDate", "users_followers_artistIdTousers", "users_followers_userIdTousers"],
    FollowersCreateManyInput: ["id", "userId", "artistId", "createdDate"],
    FollowersUpdateManyMutationInput: ["createdDate"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    ArtworksListRelationFilter: ["every", "some", "none"],
    CommentsListRelationFilter: ["every", "some", "none"],
    FavoritesArtworksListRelationFilter: ["every", "some", "none"],
    FollowersListRelationFilter: ["every", "some", "none"],
    ArtworksOrderByRelationAggregateInput: ["_count"],
    CommentsOrderByRelationAggregateInput: ["_count"],
    FavoritesArtworksOrderByRelationAggregateInput: ["_count"],
    FollowersOrderByRelationAggregateInput: ["_count"],
    UsersCountOrderByAggregateInput: ["id", "typeId", "name", "email", "pass", "address", "contact", "photoUrl"],
    UsersAvgOrderByAggregateInput: ["id", "typeId"],
    UsersMaxOrderByAggregateInput: ["id", "typeId", "name", "email", "pass", "address", "contact", "photoUrl"],
    UsersMinOrderByAggregateInput: ["id", "typeId", "name", "email", "pass", "address", "contact", "photoUrl"],
    UsersSumOrderByAggregateInput: ["id", "typeId"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    UsersRelationFilter: ["is", "isNot"],
    ArtworksCountOrderByAggregateInput: ["id", "artistId", "title", "description", "imageUrl", "publicationDate", "categories"],
    ArtworksAvgOrderByAggregateInput: ["id", "artistId"],
    ArtworksMaxOrderByAggregateInput: ["id", "artistId", "title", "description", "imageUrl", "publicationDate", "categories"],
    ArtworksMinOrderByAggregateInput: ["id", "artistId", "title", "description", "imageUrl", "publicationDate", "categories"],
    ArtworksSumOrderByAggregateInput: ["id", "artistId"],
    DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    ArtworksRelationFilter: ["is", "isNot"],
    CommentsCountOrderByAggregateInput: ["id", "artworkId", "userId", "comment", "postingDate"],
    CommentsAvgOrderByAggregateInput: ["id", "artworkId", "userId"],
    CommentsMaxOrderByAggregateInput: ["id", "artworkId", "userId", "comment", "postingDate"],
    CommentsMinOrderByAggregateInput: ["id", "artworkId", "userId", "comment", "postingDate"],
    CommentsSumOrderByAggregateInput: ["id", "artworkId", "userId"],
    FavoritesArtworksCountOrderByAggregateInput: ["id", "userId", "artworkId", "createdDate"],
    FavoritesArtworksAvgOrderByAggregateInput: ["id", "userId", "artworkId"],
    FavoritesArtworksMaxOrderByAggregateInput: ["id", "userId", "artworkId", "createdDate"],
    FavoritesArtworksMinOrderByAggregateInput: ["id", "userId", "artworkId", "createdDate"],
    FavoritesArtworksSumOrderByAggregateInput: ["id", "userId", "artworkId"],
    FollowersCountOrderByAggregateInput: ["id", "userId", "artistId", "createdDate"],
    FollowersAvgOrderByAggregateInput: ["id", "userId", "artistId"],
    FollowersMaxOrderByAggregateInput: ["id", "userId", "artistId", "createdDate"],
    FollowersMinOrderByAggregateInput: ["id", "userId", "artistId", "createdDate"],
    FollowersSumOrderByAggregateInput: ["id", "userId", "artistId"],
    ArtworksCreateNestedManyWithoutUsersInput: ["create", "connectOrCreate", "createMany", "connect"],
    CommentsCreateNestedManyWithoutUsersInput: ["create", "connectOrCreate", "createMany", "connect"],
    FavoritesArtworksCreateNestedManyWithoutUsersInput: ["create", "connectOrCreate", "createMany", "connect"],
    FollowersCreateNestedManyWithoutUsers_followers_artistIdTousersInput: ["create", "connectOrCreate", "createMany", "connect"],
    FollowersCreateNestedManyWithoutUsers_followers_userIdTousersInput: ["create", "connectOrCreate", "createMany", "connect"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    StringFieldUpdateOperationsInput: ["set"],
    NullableStringFieldUpdateOperationsInput: ["set"],
    ArtworksUpdateManyWithoutUsersInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CommentsUpdateManyWithoutUsersInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    FavoritesArtworksUpdateManyWithoutUsersInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    FollowersUpdateManyWithoutUsers_followers_artistIdTousersInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    FollowersUpdateManyWithoutUsers_followers_userIdTousersInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UsersCreateNestedOneWithoutArtworksInput: ["create", "connectOrCreate", "connect"],
    CommentsCreateNestedManyWithoutArtworksInput: ["create", "connectOrCreate", "createMany", "connect"],
    FavoritesArtworksCreateNestedManyWithoutArtworksInput: ["create", "connectOrCreate", "createMany", "connect"],
    NullableDateTimeFieldUpdateOperationsInput: ["set"],
    UsersUpdateOneRequiredWithoutArtworksInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    CommentsUpdateManyWithoutArtworksInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    FavoritesArtworksUpdateManyWithoutArtworksInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ArtworksCreateNestedOneWithoutCommentsInput: ["create", "connectOrCreate", "connect"],
    UsersCreateNestedOneWithoutCommentsInput: ["create", "connectOrCreate", "connect"],
    ArtworksUpdateOneRequiredWithoutCommentsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UsersUpdateOneRequiredWithoutCommentsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ArtworksCreateNestedOneWithoutFavoritesArtworksInput: ["create", "connectOrCreate", "connect"],
    UsersCreateNestedOneWithoutFavoritesArtworksInput: ["create", "connectOrCreate", "connect"],
    ArtworksUpdateOneRequiredWithoutFavoritesArtworksInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UsersUpdateOneRequiredWithoutFavoritesArtworksInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UsersCreateNestedOneWithoutFollowers_followers_artistIdTousersInput: ["create", "connectOrCreate", "connect"],
    UsersCreateNestedOneWithoutFollowers_followers_userIdTousersInput: ["create", "connectOrCreate", "connect"],
    UsersUpdateOneRequiredWithoutFollowers_followers_artistIdTousersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UsersUpdateOneRequiredWithoutFollowers_followers_userIdTousersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    ArtworksCreateWithoutUsersInput: ["title", "description", "imageUrl", "publicationDate", "categories", "comments", "favoritesArtworks"],
    ArtworksCreateOrConnectWithoutUsersInput: ["where", "create"],
    ArtworksCreateManyUsersInputEnvelope: ["data", "skipDuplicates"],
    CommentsCreateWithoutUsersInput: ["comment", "postingDate", "artworks"],
    CommentsCreateOrConnectWithoutUsersInput: ["where", "create"],
    CommentsCreateManyUsersInputEnvelope: ["data", "skipDuplicates"],
    FavoritesArtworksCreateWithoutUsersInput: ["createdDate", "artworks"],
    FavoritesArtworksCreateOrConnectWithoutUsersInput: ["where", "create"],
    FavoritesArtworksCreateManyUsersInputEnvelope: ["data", "skipDuplicates"],
    FollowersCreateWithoutUsers_followers_artistIdTousersInput: ["createdDate", "users_followers_userIdTousers"],
    FollowersCreateOrConnectWithoutUsers_followers_artistIdTousersInput: ["where", "create"],
    FollowersCreateManyUsers_followers_artistIdTousersInputEnvelope: ["data", "skipDuplicates"],
    FollowersCreateWithoutUsers_followers_userIdTousersInput: ["createdDate", "users_followers_artistIdTousers"],
    FollowersCreateOrConnectWithoutUsers_followers_userIdTousersInput: ["where", "create"],
    FollowersCreateManyUsers_followers_userIdTousersInputEnvelope: ["data", "skipDuplicates"],
    ArtworksUpsertWithWhereUniqueWithoutUsersInput: ["where", "update", "create"],
    ArtworksUpdateWithWhereUniqueWithoutUsersInput: ["where", "data"],
    ArtworksUpdateManyWithWhereWithoutUsersInput: ["where", "data"],
    ArtworksScalarWhereInput: ["AND", "OR", "NOT", "id", "artistId", "title", "description", "imageUrl", "publicationDate", "categories"],
    CommentsUpsertWithWhereUniqueWithoutUsersInput: ["where", "update", "create"],
    CommentsUpdateWithWhereUniqueWithoutUsersInput: ["where", "data"],
    CommentsUpdateManyWithWhereWithoutUsersInput: ["where", "data"],
    CommentsScalarWhereInput: ["AND", "OR", "NOT", "id", "artworkId", "userId", "comment", "postingDate"],
    FavoritesArtworksUpsertWithWhereUniqueWithoutUsersInput: ["where", "update", "create"],
    FavoritesArtworksUpdateWithWhereUniqueWithoutUsersInput: ["where", "data"],
    FavoritesArtworksUpdateManyWithWhereWithoutUsersInput: ["where", "data"],
    FavoritesArtworksScalarWhereInput: ["AND", "OR", "NOT", "id", "userId", "artworkId", "createdDate"],
    FollowersUpsertWithWhereUniqueWithoutUsers_followers_artistIdTousersInput: ["where", "update", "create"],
    FollowersUpdateWithWhereUniqueWithoutUsers_followers_artistIdTousersInput: ["where", "data"],
    FollowersUpdateManyWithWhereWithoutUsers_followers_artistIdTousersInput: ["where", "data"],
    FollowersScalarWhereInput: ["AND", "OR", "NOT", "id", "userId", "artistId", "createdDate"],
    FollowersUpsertWithWhereUniqueWithoutUsers_followers_userIdTousersInput: ["where", "update", "create"],
    FollowersUpdateWithWhereUniqueWithoutUsers_followers_userIdTousersInput: ["where", "data"],
    FollowersUpdateManyWithWhereWithoutUsers_followers_userIdTousersInput: ["where", "data"],
    UsersCreateWithoutArtworksInput: ["typeId", "name", "email", "pass", "address", "contact", "photoUrl", "comments", "favoritesArtworks", "followers_followers_artistIdTousers", "followers_followers_userIdTousers"],
    UsersCreateOrConnectWithoutArtworksInput: ["where", "create"],
    CommentsCreateWithoutArtworksInput: ["comment", "postingDate", "users"],
    CommentsCreateOrConnectWithoutArtworksInput: ["where", "create"],
    CommentsCreateManyArtworksInputEnvelope: ["data", "skipDuplicates"],
    FavoritesArtworksCreateWithoutArtworksInput: ["createdDate", "users"],
    FavoritesArtworksCreateOrConnectWithoutArtworksInput: ["where", "create"],
    FavoritesArtworksCreateManyArtworksInputEnvelope: ["data", "skipDuplicates"],
    UsersUpsertWithoutArtworksInput: ["update", "create"],
    UsersUpdateWithoutArtworksInput: ["typeId", "name", "email", "pass", "address", "contact", "photoUrl", "comments", "favoritesArtworks", "followers_followers_artistIdTousers", "followers_followers_userIdTousers"],
    CommentsUpsertWithWhereUniqueWithoutArtworksInput: ["where", "update", "create"],
    CommentsUpdateWithWhereUniqueWithoutArtworksInput: ["where", "data"],
    CommentsUpdateManyWithWhereWithoutArtworksInput: ["where", "data"],
    FavoritesArtworksUpsertWithWhereUniqueWithoutArtworksInput: ["where", "update", "create"],
    FavoritesArtworksUpdateWithWhereUniqueWithoutArtworksInput: ["where", "data"],
    FavoritesArtworksUpdateManyWithWhereWithoutArtworksInput: ["where", "data"],
    ArtworksCreateWithoutCommentsInput: ["title", "description", "imageUrl", "publicationDate", "categories", "users", "favoritesArtworks"],
    ArtworksCreateOrConnectWithoutCommentsInput: ["where", "create"],
    UsersCreateWithoutCommentsInput: ["typeId", "name", "email", "pass", "address", "contact", "photoUrl", "artworks", "favoritesArtworks", "followers_followers_artistIdTousers", "followers_followers_userIdTousers"],
    UsersCreateOrConnectWithoutCommentsInput: ["where", "create"],
    ArtworksUpsertWithoutCommentsInput: ["update", "create"],
    ArtworksUpdateWithoutCommentsInput: ["title", "description", "imageUrl", "publicationDate", "categories", "users", "favoritesArtworks"],
    UsersUpsertWithoutCommentsInput: ["update", "create"],
    UsersUpdateWithoutCommentsInput: ["typeId", "name", "email", "pass", "address", "contact", "photoUrl", "artworks", "favoritesArtworks", "followers_followers_artistIdTousers", "followers_followers_userIdTousers"],
    ArtworksCreateWithoutFavoritesArtworksInput: ["title", "description", "imageUrl", "publicationDate", "categories", "users", "comments"],
    ArtworksCreateOrConnectWithoutFavoritesArtworksInput: ["where", "create"],
    UsersCreateWithoutFavoritesArtworksInput: ["typeId", "name", "email", "pass", "address", "contact", "photoUrl", "artworks", "comments", "followers_followers_artistIdTousers", "followers_followers_userIdTousers"],
    UsersCreateOrConnectWithoutFavoritesArtworksInput: ["where", "create"],
    ArtworksUpsertWithoutFavoritesArtworksInput: ["update", "create"],
    ArtworksUpdateWithoutFavoritesArtworksInput: ["title", "description", "imageUrl", "publicationDate", "categories", "users", "comments"],
    UsersUpsertWithoutFavoritesArtworksInput: ["update", "create"],
    UsersUpdateWithoutFavoritesArtworksInput: ["typeId", "name", "email", "pass", "address", "contact", "photoUrl", "artworks", "comments", "followers_followers_artistIdTousers", "followers_followers_userIdTousers"],
    UsersCreateWithoutFollowers_followers_artistIdTousersInput: ["typeId", "name", "email", "pass", "address", "contact", "photoUrl", "artworks", "comments", "favoritesArtworks", "followers_followers_userIdTousers"],
    UsersCreateOrConnectWithoutFollowers_followers_artistIdTousersInput: ["where", "create"],
    UsersCreateWithoutFollowers_followers_userIdTousersInput: ["typeId", "name", "email", "pass", "address", "contact", "photoUrl", "artworks", "comments", "favoritesArtworks", "followers_followers_artistIdTousers"],
    UsersCreateOrConnectWithoutFollowers_followers_userIdTousersInput: ["where", "create"],
    UsersUpsertWithoutFollowers_followers_artistIdTousersInput: ["update", "create"],
    UsersUpdateWithoutFollowers_followers_artistIdTousersInput: ["typeId", "name", "email", "pass", "address", "contact", "photoUrl", "artworks", "comments", "favoritesArtworks", "followers_followers_userIdTousers"],
    UsersUpsertWithoutFollowers_followers_userIdTousersInput: ["update", "create"],
    UsersUpdateWithoutFollowers_followers_userIdTousersInput: ["typeId", "name", "email", "pass", "address", "contact", "photoUrl", "artworks", "comments", "favoritesArtworks", "followers_followers_artistIdTousers"],
    ArtworksCreateManyUsersInput: ["id", "title", "description", "imageUrl", "publicationDate", "categories"],
    CommentsCreateManyUsersInput: ["id", "artworkId", "comment", "postingDate"],
    FavoritesArtworksCreateManyUsersInput: ["id", "artworkId", "createdDate"],
    FollowersCreateManyUsers_followers_artistIdTousersInput: ["id", "userId", "createdDate"],
    FollowersCreateManyUsers_followers_userIdTousersInput: ["id", "artistId", "createdDate"],
    ArtworksUpdateWithoutUsersInput: ["title", "description", "imageUrl", "publicationDate", "categories", "comments", "favoritesArtworks"],
    CommentsUpdateWithoutUsersInput: ["comment", "postingDate", "artworks"],
    FavoritesArtworksUpdateWithoutUsersInput: ["createdDate", "artworks"],
    FollowersUpdateWithoutUsers_followers_artistIdTousersInput: ["createdDate", "users_followers_userIdTousers"],
    FollowersUpdateWithoutUsers_followers_userIdTousersInput: ["createdDate", "users_followers_artistIdTousers"],
    CommentsCreateManyArtworksInput: ["id", "userId", "comment", "postingDate"],
    FavoritesArtworksCreateManyArtworksInput: ["id", "userId", "createdDate"],
    CommentsUpdateWithoutArtworksInput: ["comment", "postingDate", "users"],
    FavoritesArtworksUpdateWithoutArtworksInput: ["createdDate", "users"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
