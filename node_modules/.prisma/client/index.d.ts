
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model users
 * 
 */
export type users = {
  id: number
  typeId: number
  name: string
  email: string
  pass: string
  address: string | null
  contact: string | null
  photoUrl: string | null
}

/**
 * Model artworks
 * 
 */
export type artworks = {
  id: number
  artistId: number
  title: string
  description: string
  imageUrl: string | null
  publicationDate: Date | null
  categories: string | null
}

/**
 * Model comments
 * 
 */
export type comments = {
  id: number
  artworkId: number
  userId: number
  comment: string
  postingDate: Date | null
}

/**
 * Model favoritesArtworks
 * 
 */
export type favoritesArtworks = {
  id: number
  userId: number
  artworkId: number
  createdDate: Date | null
}

/**
 * Model followers
 * 
 */
export type followers = {
  id: number
  userId: number
  artistId: number
  createdDate: Date | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.artworks`: Exposes CRUD operations for the **artworks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Artworks
    * const artworks = await prisma.artworks.findMany()
    * ```
    */
  get artworks(): Prisma.artworksDelegate<GlobalReject>;

  /**
   * `prisma.comments`: Exposes CRUD operations for the **comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comments.findMany()
    * ```
    */
  get comments(): Prisma.commentsDelegate<GlobalReject>;

  /**
   * `prisma.favoritesArtworks`: Exposes CRUD operations for the **favoritesArtworks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavoritesArtworks
    * const favoritesArtworks = await prisma.favoritesArtworks.findMany()
    * ```
    */
  get favoritesArtworks(): Prisma.favoritesArtworksDelegate<GlobalReject>;

  /**
   * `prisma.followers`: Exposes CRUD operations for the **followers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Followers
    * const followers = await prisma.followers.findMany()
    * ```
    */
  get followers(): Prisma.followersDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.0
   * Query Engine version: b9297dc3a59307060c1c39d7e4f5765066f38372
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    users: 'users',
    artworks: 'artworks',
    comments: 'comments',
    favoritesArtworks: 'favoritesArtworks',
    followers: 'followers'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    artworks: number
    comments: number
    favoritesArtworks: number
    followers_followers_artistIdTousers: number
    followers_followers_userIdTousers: number
  }

  export type UsersCountOutputTypeSelect = {
    artworks?: boolean
    comments?: boolean
    favoritesArtworks?: boolean
    followers_followers_artistIdTousers?: boolean
    followers_followers_userIdTousers?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Count Type ArtworksCountOutputType
   */


  export type ArtworksCountOutputType = {
    comments: number
    favoritesArtworks: number
  }

  export type ArtworksCountOutputTypeSelect = {
    comments?: boolean
    favoritesArtworks?: boolean
  }

  export type ArtworksCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ArtworksCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ArtworksCountOutputType
    : S extends undefined
    ? never
    : S extends ArtworksCountOutputTypeArgs
    ?'include' extends U
    ? ArtworksCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ArtworksCountOutputType ? ArtworksCountOutputType[P] : never
  } 
    : ArtworksCountOutputType
  : ArtworksCountOutputType




  // Custom InputTypes

  /**
   * ArtworksCountOutputType without action
   */
  export type ArtworksCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ArtworksCountOutputType
     * 
    **/
    select?: ArtworksCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    typeId: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    typeId: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    typeId: number | null
    name: string | null
    email: string | null
    pass: string | null
    address: string | null
    contact: string | null
    photoUrl: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    typeId: number | null
    name: string | null
    email: string | null
    pass: string | null
    address: string | null
    contact: string | null
    photoUrl: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    typeId: number
    name: number
    email: number
    pass: number
    address: number
    contact: number
    photoUrl: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    typeId?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    typeId?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    typeId?: true
    name?: true
    email?: true
    pass?: true
    address?: true
    contact?: true
    photoUrl?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    typeId?: true
    name?: true
    email?: true
    pass?: true
    address?: true
    contact?: true
    photoUrl?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    typeId?: true
    name?: true
    email?: true
    pass?: true
    address?: true
    contact?: true
    photoUrl?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    typeId: number
    name: string
    email: string
    pass: string
    address: string | null
    contact: string | null
    photoUrl: string | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    typeId?: boolean
    name?: boolean
    email?: boolean
    pass?: boolean
    address?: boolean
    contact?: boolean
    photoUrl?: boolean
    artworks?: boolean | artworksFindManyArgs
    comments?: boolean | commentsFindManyArgs
    favoritesArtworks?: boolean | favoritesArtworksFindManyArgs
    followers_followers_artistIdTousers?: boolean | followersFindManyArgs
    followers_followers_userIdTousers?: boolean | followersFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersInclude = {
    artworks?: boolean | artworksFindManyArgs
    comments?: boolean | commentsFindManyArgs
    favoritesArtworks?: boolean | favoritesArtworksFindManyArgs
    followers_followers_artistIdTousers?: boolean | followersFindManyArgs
    followers_followers_userIdTousers?: boolean | followersFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'artworks' ? Array < artworksGetPayload<S['include'][P]>>  :
        P extends 'comments' ? Array < commentsGetPayload<S['include'][P]>>  :
        P extends 'favoritesArtworks' ? Array < favoritesArtworksGetPayload<S['include'][P]>>  :
        P extends 'followers_followers_artistIdTousers' ? Array < followersGetPayload<S['include'][P]>>  :
        P extends 'followers_followers_userIdTousers' ? Array < followersGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'artworks' ? Array < artworksGetPayload<S['select'][P]>>  :
        P extends 'comments' ? Array < commentsGetPayload<S['select'][P]>>  :
        P extends 'favoritesArtworks' ? Array < favoritesArtworksGetPayload<S['select'][P]>>  :
        P extends 'followers_followers_artistIdTousers' ? Array < followersGetPayload<S['select'][P]>>  :
        P extends 'followers_followers_userIdTousers' ? Array < followersGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof users ? users[P] : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    artworks<T extends artworksFindManyArgs = {}>(args?: Subset<T, artworksFindManyArgs>): CheckSelect<T, PrismaPromise<Array<artworks>>, PrismaPromise<Array<artworksGetPayload<T>>>>;

    comments<T extends commentsFindManyArgs = {}>(args?: Subset<T, commentsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<comments>>, PrismaPromise<Array<commentsGetPayload<T>>>>;

    favoritesArtworks<T extends favoritesArtworksFindManyArgs = {}>(args?: Subset<T, favoritesArtworksFindManyArgs>): CheckSelect<T, PrismaPromise<Array<favoritesArtworks>>, PrismaPromise<Array<favoritesArtworksGetPayload<T>>>>;

    followers_followers_artistIdTousers<T extends followersFindManyArgs = {}>(args?: Subset<T, followersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<followers>>, PrismaPromise<Array<followersGetPayload<T>>>>;

    followers_followers_userIdTousers<T extends followersFindManyArgs = {}>(args?: Subset<T, followersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<followers>>, PrismaPromise<Array<followersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Model artworks
   */


  export type AggregateArtworks = {
    _count: ArtworksCountAggregateOutputType | null
    _avg: ArtworksAvgAggregateOutputType | null
    _sum: ArtworksSumAggregateOutputType | null
    _min: ArtworksMinAggregateOutputType | null
    _max: ArtworksMaxAggregateOutputType | null
  }

  export type ArtworksAvgAggregateOutputType = {
    id: number | null
    artistId: number | null
  }

  export type ArtworksSumAggregateOutputType = {
    id: number | null
    artistId: number | null
  }

  export type ArtworksMinAggregateOutputType = {
    id: number | null
    artistId: number | null
    title: string | null
    description: string | null
    imageUrl: string | null
    publicationDate: Date | null
    categories: string | null
  }

  export type ArtworksMaxAggregateOutputType = {
    id: number | null
    artistId: number | null
    title: string | null
    description: string | null
    imageUrl: string | null
    publicationDate: Date | null
    categories: string | null
  }

  export type ArtworksCountAggregateOutputType = {
    id: number
    artistId: number
    title: number
    description: number
    imageUrl: number
    publicationDate: number
    categories: number
    _all: number
  }


  export type ArtworksAvgAggregateInputType = {
    id?: true
    artistId?: true
  }

  export type ArtworksSumAggregateInputType = {
    id?: true
    artistId?: true
  }

  export type ArtworksMinAggregateInputType = {
    id?: true
    artistId?: true
    title?: true
    description?: true
    imageUrl?: true
    publicationDate?: true
    categories?: true
  }

  export type ArtworksMaxAggregateInputType = {
    id?: true
    artistId?: true
    title?: true
    description?: true
    imageUrl?: true
    publicationDate?: true
    categories?: true
  }

  export type ArtworksCountAggregateInputType = {
    id?: true
    artistId?: true
    title?: true
    description?: true
    imageUrl?: true
    publicationDate?: true
    categories?: true
    _all?: true
  }

  export type ArtworksAggregateArgs = {
    /**
     * Filter which artworks to aggregate.
     * 
    **/
    where?: artworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworks to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: artworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned artworks
    **/
    _count?: true | ArtworksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtworksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtworksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtworksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtworksMaxAggregateInputType
  }

  export type GetArtworksAggregateType<T extends ArtworksAggregateArgs> = {
        [P in keyof T & keyof AggregateArtworks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtworks[P]>
      : GetScalarType<T[P], AggregateArtworks[P]>
  }




  export type ArtworksGroupByArgs = {
    where?: artworksWhereInput
    orderBy?: Enumerable<artworksOrderByWithAggregationInput>
    by: Array<ArtworksScalarFieldEnum>
    having?: artworksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtworksCountAggregateInputType | true
    _avg?: ArtworksAvgAggregateInputType
    _sum?: ArtworksSumAggregateInputType
    _min?: ArtworksMinAggregateInputType
    _max?: ArtworksMaxAggregateInputType
  }


  export type ArtworksGroupByOutputType = {
    id: number
    artistId: number
    title: string
    description: string
    imageUrl: string | null
    publicationDate: Date | null
    categories: string | null
    _count: ArtworksCountAggregateOutputType | null
    _avg: ArtworksAvgAggregateOutputType | null
    _sum: ArtworksSumAggregateOutputType | null
    _min: ArtworksMinAggregateOutputType | null
    _max: ArtworksMaxAggregateOutputType | null
  }

  type GetArtworksGroupByPayload<T extends ArtworksGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ArtworksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtworksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtworksGroupByOutputType[P]>
            : GetScalarType<T[P], ArtworksGroupByOutputType[P]>
        }
      >
    >


  export type artworksSelect = {
    id?: boolean
    artistId?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    publicationDate?: boolean
    categories?: boolean
    users?: boolean | usersArgs
    comments?: boolean | commentsFindManyArgs
    favoritesArtworks?: boolean | favoritesArtworksFindManyArgs
    _count?: boolean | ArtworksCountOutputTypeArgs
  }

  export type artworksInclude = {
    users?: boolean | usersArgs
    comments?: boolean | commentsFindManyArgs
    favoritesArtworks?: boolean | favoritesArtworksFindManyArgs
    _count?: boolean | ArtworksCountOutputTypeArgs
  }

  export type artworksGetPayload<
    S extends boolean | null | undefined | artworksArgs,
    U = keyof S
      > = S extends true
        ? artworks
    : S extends undefined
    ? never
    : S extends artworksArgs | artworksFindManyArgs
    ?'include' extends U
    ? artworks  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<S['include'][P]> :
        P extends 'comments' ? Array < commentsGetPayload<S['include'][P]>>  :
        P extends 'favoritesArtworks' ? Array < favoritesArtworksGetPayload<S['include'][P]>>  :
        P extends '_count' ? ArtworksCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<S['select'][P]> :
        P extends 'comments' ? Array < commentsGetPayload<S['select'][P]>>  :
        P extends 'favoritesArtworks' ? Array < favoritesArtworksGetPayload<S['select'][P]>>  :
        P extends '_count' ? ArtworksCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof artworks ? artworks[P] : never
  } 
    : artworks
  : artworks


  type artworksCountArgs = Merge<
    Omit<artworksFindManyArgs, 'select' | 'include'> & {
      select?: ArtworksCountAggregateInputType | true
    }
  >

  export interface artworksDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Artworks that matches the filter.
     * @param {artworksFindUniqueArgs} args - Arguments to find a Artworks
     * @example
     * // Get one Artworks
     * const artworks = await prisma.artworks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends artworksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, artworksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'artworks'> extends True ? CheckSelect<T, Prisma__artworksClient<artworks>, Prisma__artworksClient<artworksGetPayload<T>>> : CheckSelect<T, Prisma__artworksClient<artworks | null >, Prisma__artworksClient<artworksGetPayload<T> | null >>

    /**
     * Find the first Artworks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksFindFirstArgs} args - Arguments to find a Artworks
     * @example
     * // Get one Artworks
     * const artworks = await prisma.artworks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends artworksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, artworksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'artworks'> extends True ? CheckSelect<T, Prisma__artworksClient<artworks>, Prisma__artworksClient<artworksGetPayload<T>>> : CheckSelect<T, Prisma__artworksClient<artworks | null >, Prisma__artworksClient<artworksGetPayload<T> | null >>

    /**
     * Find zero or more Artworks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Artworks
     * const artworks = await prisma.artworks.findMany()
     * 
     * // Get first 10 Artworks
     * const artworks = await prisma.artworks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artworksWithIdOnly = await prisma.artworks.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends artworksFindManyArgs>(
      args?: SelectSubset<T, artworksFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<artworks>>, PrismaPromise<Array<artworksGetPayload<T>>>>

    /**
     * Create a Artworks.
     * @param {artworksCreateArgs} args - Arguments to create a Artworks.
     * @example
     * // Create one Artworks
     * const Artworks = await prisma.artworks.create({
     *   data: {
     *     // ... data to create a Artworks
     *   }
     * })
     * 
    **/
    create<T extends artworksCreateArgs>(
      args: SelectSubset<T, artworksCreateArgs>
    ): CheckSelect<T, Prisma__artworksClient<artworks>, Prisma__artworksClient<artworksGetPayload<T>>>

    /**
     * Create many Artworks.
     *     @param {artworksCreateManyArgs} args - Arguments to create many Artworks.
     *     @example
     *     // Create many Artworks
     *     const artworks = await prisma.artworks.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends artworksCreateManyArgs>(
      args?: SelectSubset<T, artworksCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Artworks.
     * @param {artworksDeleteArgs} args - Arguments to delete one Artworks.
     * @example
     * // Delete one Artworks
     * const Artworks = await prisma.artworks.delete({
     *   where: {
     *     // ... filter to delete one Artworks
     *   }
     * })
     * 
    **/
    delete<T extends artworksDeleteArgs>(
      args: SelectSubset<T, artworksDeleteArgs>
    ): CheckSelect<T, Prisma__artworksClient<artworks>, Prisma__artworksClient<artworksGetPayload<T>>>

    /**
     * Update one Artworks.
     * @param {artworksUpdateArgs} args - Arguments to update one Artworks.
     * @example
     * // Update one Artworks
     * const artworks = await prisma.artworks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends artworksUpdateArgs>(
      args: SelectSubset<T, artworksUpdateArgs>
    ): CheckSelect<T, Prisma__artworksClient<artworks>, Prisma__artworksClient<artworksGetPayload<T>>>

    /**
     * Delete zero or more Artworks.
     * @param {artworksDeleteManyArgs} args - Arguments to filter Artworks to delete.
     * @example
     * // Delete a few Artworks
     * const { count } = await prisma.artworks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends artworksDeleteManyArgs>(
      args?: SelectSubset<T, artworksDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Artworks
     * const artworks = await prisma.artworks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends artworksUpdateManyArgs>(
      args: SelectSubset<T, artworksUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Artworks.
     * @param {artworksUpsertArgs} args - Arguments to update or create a Artworks.
     * @example
     * // Update or create a Artworks
     * const artworks = await prisma.artworks.upsert({
     *   create: {
     *     // ... data to create a Artworks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Artworks we want to update
     *   }
     * })
    **/
    upsert<T extends artworksUpsertArgs>(
      args: SelectSubset<T, artworksUpsertArgs>
    ): CheckSelect<T, Prisma__artworksClient<artworks>, Prisma__artworksClient<artworksGetPayload<T>>>

    /**
     * Count the number of Artworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksCountArgs} args - Arguments to filter Artworks to count.
     * @example
     * // Count the number of Artworks
     * const count = await prisma.artworks.count({
     *   where: {
     *     // ... the filter for the Artworks we want to count
     *   }
     * })
    **/
    count<T extends artworksCountArgs>(
      args?: Subset<T, artworksCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtworksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Artworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtworksAggregateArgs>(args: Subset<T, ArtworksAggregateArgs>): PrismaPromise<GetArtworksAggregateType<T>>

    /**
     * Group by Artworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtworksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtworksGroupByArgs['orderBy'] }
        : { orderBy?: ArtworksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtworksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtworksGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for artworks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__artworksClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    comments<T extends commentsFindManyArgs = {}>(args?: Subset<T, commentsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<comments>>, PrismaPromise<Array<commentsGetPayload<T>>>>;

    favoritesArtworks<T extends favoritesArtworksFindManyArgs = {}>(args?: Subset<T, favoritesArtworksFindManyArgs>): CheckSelect<T, PrismaPromise<Array<favoritesArtworks>>, PrismaPromise<Array<favoritesArtworksGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * artworks findUnique
   */
  export type artworksFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
    /**
     * Throw an Error if a artworks can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which artworks to fetch.
     * 
    **/
    where: artworksWhereUniqueInput
  }


  /**
   * artworks findFirst
   */
  export type artworksFindFirstArgs = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
    /**
     * Throw an Error if a artworks can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which artworks to fetch.
     * 
    **/
    where?: artworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworks to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artworks.
     * 
    **/
    cursor?: artworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artworks.
     * 
    **/
    distinct?: Enumerable<ArtworksScalarFieldEnum>
  }


  /**
   * artworks findMany
   */
  export type artworksFindManyArgs = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
    /**
     * Filter, which artworks to fetch.
     * 
    **/
    where?: artworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworks to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing artworks.
     * 
    **/
    cursor?: artworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ArtworksScalarFieldEnum>
  }


  /**
   * artworks create
   */
  export type artworksCreateArgs = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
    /**
     * The data needed to create a artworks.
     * 
    **/
    data: XOR<artworksCreateInput, artworksUncheckedCreateInput>
  }


  /**
   * artworks createMany
   */
  export type artworksCreateManyArgs = {
    /**
     * The data used to create many artworks.
     * 
    **/
    data: Enumerable<artworksCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * artworks update
   */
  export type artworksUpdateArgs = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
    /**
     * The data needed to update a artworks.
     * 
    **/
    data: XOR<artworksUpdateInput, artworksUncheckedUpdateInput>
    /**
     * Choose, which artworks to update.
     * 
    **/
    where: artworksWhereUniqueInput
  }


  /**
   * artworks updateMany
   */
  export type artworksUpdateManyArgs = {
    /**
     * The data used to update artworks.
     * 
    **/
    data: XOR<artworksUpdateManyMutationInput, artworksUncheckedUpdateManyInput>
    /**
     * Filter which artworks to update
     * 
    **/
    where?: artworksWhereInput
  }


  /**
   * artworks upsert
   */
  export type artworksUpsertArgs = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
    /**
     * The filter to search for the artworks to update in case it exists.
     * 
    **/
    where: artworksWhereUniqueInput
    /**
     * In case the artworks found by the `where` argument doesn't exist, create a new artworks with this data.
     * 
    **/
    create: XOR<artworksCreateInput, artworksUncheckedCreateInput>
    /**
     * In case the artworks was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<artworksUpdateInput, artworksUncheckedUpdateInput>
  }


  /**
   * artworks delete
   */
  export type artworksDeleteArgs = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
    /**
     * Filter which artworks to delete.
     * 
    **/
    where: artworksWhereUniqueInput
  }


  /**
   * artworks deleteMany
   */
  export type artworksDeleteManyArgs = {
    /**
     * Filter which artworks to delete
     * 
    **/
    where?: artworksWhereInput
  }


  /**
   * artworks without action
   */
  export type artworksArgs = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
  }



  /**
   * Model comments
   */


  export type AggregateComments = {
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  export type CommentsAvgAggregateOutputType = {
    id: number | null
    artworkId: number | null
    userId: number | null
  }

  export type CommentsSumAggregateOutputType = {
    id: number | null
    artworkId: number | null
    userId: number | null
  }

  export type CommentsMinAggregateOutputType = {
    id: number | null
    artworkId: number | null
    userId: number | null
    comment: string | null
    postingDate: Date | null
  }

  export type CommentsMaxAggregateOutputType = {
    id: number | null
    artworkId: number | null
    userId: number | null
    comment: string | null
    postingDate: Date | null
  }

  export type CommentsCountAggregateOutputType = {
    id: number
    artworkId: number
    userId: number
    comment: number
    postingDate: number
    _all: number
  }


  export type CommentsAvgAggregateInputType = {
    id?: true
    artworkId?: true
    userId?: true
  }

  export type CommentsSumAggregateInputType = {
    id?: true
    artworkId?: true
    userId?: true
  }

  export type CommentsMinAggregateInputType = {
    id?: true
    artworkId?: true
    userId?: true
    comment?: true
    postingDate?: true
  }

  export type CommentsMaxAggregateInputType = {
    id?: true
    artworkId?: true
    userId?: true
    comment?: true
    postingDate?: true
  }

  export type CommentsCountAggregateInputType = {
    id?: true
    artworkId?: true
    userId?: true
    comment?: true
    postingDate?: true
    _all?: true
  }

  export type CommentsAggregateArgs = {
    /**
     * Filter which comments to aggregate.
     * 
    **/
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     * 
    **/
    orderBy?: Enumerable<commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned comments
    **/
    _count?: true | CommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentsMaxAggregateInputType
  }

  export type GetCommentsAggregateType<T extends CommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateComments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComments[P]>
      : GetScalarType<T[P], AggregateComments[P]>
  }




  export type CommentsGroupByArgs = {
    where?: commentsWhereInput
    orderBy?: Enumerable<commentsOrderByWithAggregationInput>
    by: Array<CommentsScalarFieldEnum>
    having?: commentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentsCountAggregateInputType | true
    _avg?: CommentsAvgAggregateInputType
    _sum?: CommentsSumAggregateInputType
    _min?: CommentsMinAggregateInputType
    _max?: CommentsMaxAggregateInputType
  }


  export type CommentsGroupByOutputType = {
    id: number
    artworkId: number
    userId: number
    comment: string
    postingDate: Date | null
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  type GetCommentsGroupByPayload<T extends CommentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CommentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentsGroupByOutputType[P]>
            : GetScalarType<T[P], CommentsGroupByOutputType[P]>
        }
      >
    >


  export type commentsSelect = {
    id?: boolean
    artworkId?: boolean
    userId?: boolean
    comment?: boolean
    postingDate?: boolean
    artworks?: boolean | artworksArgs
    users?: boolean | usersArgs
  }

  export type commentsInclude = {
    artworks?: boolean | artworksArgs
    users?: boolean | usersArgs
  }

  export type commentsGetPayload<
    S extends boolean | null | undefined | commentsArgs,
    U = keyof S
      > = S extends true
        ? comments
    : S extends undefined
    ? never
    : S extends commentsArgs | commentsFindManyArgs
    ?'include' extends U
    ? comments  & {
    [P in TrueKeys<S['include']>]:
        P extends 'artworks' ? artworksGetPayload<S['include'][P]> :
        P extends 'users' ? usersGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'artworks' ? artworksGetPayload<S['select'][P]> :
        P extends 'users' ? usersGetPayload<S['select'][P]> :  P extends keyof comments ? comments[P] : never
  } 
    : comments
  : comments


  type commentsCountArgs = Merge<
    Omit<commentsFindManyArgs, 'select' | 'include'> & {
      select?: CommentsCountAggregateInputType | true
    }
  >

  export interface commentsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Comments that matches the filter.
     * @param {commentsFindUniqueArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends commentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, commentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'comments'> extends True ? CheckSelect<T, Prisma__commentsClient<comments>, Prisma__commentsClient<commentsGetPayload<T>>> : CheckSelect<T, Prisma__commentsClient<comments | null >, Prisma__commentsClient<commentsGetPayload<T> | null >>

    /**
     * Find the first Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsFindFirstArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends commentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, commentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'comments'> extends True ? CheckSelect<T, Prisma__commentsClient<comments>, Prisma__commentsClient<commentsGetPayload<T>>> : CheckSelect<T, Prisma__commentsClient<comments | null >, Prisma__commentsClient<commentsGetPayload<T> | null >>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comments.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentsWithIdOnly = await prisma.comments.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends commentsFindManyArgs>(
      args?: SelectSubset<T, commentsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<comments>>, PrismaPromise<Array<commentsGetPayload<T>>>>

    /**
     * Create a Comments.
     * @param {commentsCreateArgs} args - Arguments to create a Comments.
     * @example
     * // Create one Comments
     * const Comments = await prisma.comments.create({
     *   data: {
     *     // ... data to create a Comments
     *   }
     * })
     * 
    **/
    create<T extends commentsCreateArgs>(
      args: SelectSubset<T, commentsCreateArgs>
    ): CheckSelect<T, Prisma__commentsClient<comments>, Prisma__commentsClient<commentsGetPayload<T>>>

    /**
     * Create many Comments.
     *     @param {commentsCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comments = await prisma.comments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends commentsCreateManyArgs>(
      args?: SelectSubset<T, commentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Comments.
     * @param {commentsDeleteArgs} args - Arguments to delete one Comments.
     * @example
     * // Delete one Comments
     * const Comments = await prisma.comments.delete({
     *   where: {
     *     // ... filter to delete one Comments
     *   }
     * })
     * 
    **/
    delete<T extends commentsDeleteArgs>(
      args: SelectSubset<T, commentsDeleteArgs>
    ): CheckSelect<T, Prisma__commentsClient<comments>, Prisma__commentsClient<commentsGetPayload<T>>>

    /**
     * Update one Comments.
     * @param {commentsUpdateArgs} args - Arguments to update one Comments.
     * @example
     * // Update one Comments
     * const comments = await prisma.comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commentsUpdateArgs>(
      args: SelectSubset<T, commentsUpdateArgs>
    ): CheckSelect<T, Prisma__commentsClient<comments>, Prisma__commentsClient<commentsGetPayload<T>>>

    /**
     * Delete zero or more Comments.
     * @param {commentsDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commentsDeleteManyArgs>(
      args?: SelectSubset<T, commentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comments = await prisma.comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commentsUpdateManyArgs>(
      args: SelectSubset<T, commentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comments.
     * @param {commentsUpsertArgs} args - Arguments to update or create a Comments.
     * @example
     * // Update or create a Comments
     * const comments = await prisma.comments.upsert({
     *   create: {
     *     // ... data to create a Comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comments we want to update
     *   }
     * })
    **/
    upsert<T extends commentsUpsertArgs>(
      args: SelectSubset<T, commentsUpsertArgs>
    ): CheckSelect<T, Prisma__commentsClient<comments>, Prisma__commentsClient<commentsGetPayload<T>>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comments.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends commentsCountArgs>(
      args?: Subset<T, commentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentsAggregateArgs>(args: Subset<T, CommentsAggregateArgs>): PrismaPromise<GetCommentsAggregateType<T>>

    /**
     * Group by Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentsGroupByArgs['orderBy'] }
        : { orderBy?: CommentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__commentsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    artworks<T extends artworksArgs = {}>(args?: Subset<T, artworksArgs>): CheckSelect<T, Prisma__artworksClient<artworks | null >, Prisma__artworksClient<artworksGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * comments findUnique
   */
  export type commentsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
    /**
     * Throw an Error if a comments can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which comments to fetch.
     * 
    **/
    where: commentsWhereUniqueInput
  }


  /**
   * comments findFirst
   */
  export type commentsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
    /**
     * Throw an Error if a comments can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which comments to fetch.
     * 
    **/
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     * 
    **/
    orderBy?: Enumerable<commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     * 
    **/
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     * 
    **/
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }


  /**
   * comments findMany
   */
  export type commentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
    /**
     * Filter, which comments to fetch.
     * 
    **/
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     * 
    **/
    orderBy?: Enumerable<commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing comments.
     * 
    **/
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }


  /**
   * comments create
   */
  export type commentsCreateArgs = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
    /**
     * The data needed to create a comments.
     * 
    **/
    data: XOR<commentsCreateInput, commentsUncheckedCreateInput>
  }


  /**
   * comments createMany
   */
  export type commentsCreateManyArgs = {
    /**
     * The data used to create many comments.
     * 
    **/
    data: Enumerable<commentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * comments update
   */
  export type commentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
    /**
     * The data needed to update a comments.
     * 
    **/
    data: XOR<commentsUpdateInput, commentsUncheckedUpdateInput>
    /**
     * Choose, which comments to update.
     * 
    **/
    where: commentsWhereUniqueInput
  }


  /**
   * comments updateMany
   */
  export type commentsUpdateManyArgs = {
    /**
     * The data used to update comments.
     * 
    **/
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyInput>
    /**
     * Filter which comments to update
     * 
    **/
    where?: commentsWhereInput
  }


  /**
   * comments upsert
   */
  export type commentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
    /**
     * The filter to search for the comments to update in case it exists.
     * 
    **/
    where: commentsWhereUniqueInput
    /**
     * In case the comments found by the `where` argument doesn't exist, create a new comments with this data.
     * 
    **/
    create: XOR<commentsCreateInput, commentsUncheckedCreateInput>
    /**
     * In case the comments was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<commentsUpdateInput, commentsUncheckedUpdateInput>
  }


  /**
   * comments delete
   */
  export type commentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
    /**
     * Filter which comments to delete.
     * 
    **/
    where: commentsWhereUniqueInput
  }


  /**
   * comments deleteMany
   */
  export type commentsDeleteManyArgs = {
    /**
     * Filter which comments to delete
     * 
    **/
    where?: commentsWhereInput
  }


  /**
   * comments without action
   */
  export type commentsArgs = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
  }



  /**
   * Model favoritesArtworks
   */


  export type AggregateFavoritesArtworks = {
    _count: FavoritesArtworksCountAggregateOutputType | null
    _avg: FavoritesArtworksAvgAggregateOutputType | null
    _sum: FavoritesArtworksSumAggregateOutputType | null
    _min: FavoritesArtworksMinAggregateOutputType | null
    _max: FavoritesArtworksMaxAggregateOutputType | null
  }

  export type FavoritesArtworksAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    artworkId: number | null
  }

  export type FavoritesArtworksSumAggregateOutputType = {
    id: number | null
    userId: number | null
    artworkId: number | null
  }

  export type FavoritesArtworksMinAggregateOutputType = {
    id: number | null
    userId: number | null
    artworkId: number | null
    createdDate: Date | null
  }

  export type FavoritesArtworksMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    artworkId: number | null
    createdDate: Date | null
  }

  export type FavoritesArtworksCountAggregateOutputType = {
    id: number
    userId: number
    artworkId: number
    createdDate: number
    _all: number
  }


  export type FavoritesArtworksAvgAggregateInputType = {
    id?: true
    userId?: true
    artworkId?: true
  }

  export type FavoritesArtworksSumAggregateInputType = {
    id?: true
    userId?: true
    artworkId?: true
  }

  export type FavoritesArtworksMinAggregateInputType = {
    id?: true
    userId?: true
    artworkId?: true
    createdDate?: true
  }

  export type FavoritesArtworksMaxAggregateInputType = {
    id?: true
    userId?: true
    artworkId?: true
    createdDate?: true
  }

  export type FavoritesArtworksCountAggregateInputType = {
    id?: true
    userId?: true
    artworkId?: true
    createdDate?: true
    _all?: true
  }

  export type FavoritesArtworksAggregateArgs = {
    /**
     * Filter which favoritesArtworks to aggregate.
     * 
    **/
    where?: favoritesArtworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favoritesArtworks to fetch.
     * 
    **/
    orderBy?: Enumerable<favoritesArtworksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: favoritesArtworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favoritesArtworks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favoritesArtworks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned favoritesArtworks
    **/
    _count?: true | FavoritesArtworksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavoritesArtworksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavoritesArtworksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoritesArtworksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoritesArtworksMaxAggregateInputType
  }

  export type GetFavoritesArtworksAggregateType<T extends FavoritesArtworksAggregateArgs> = {
        [P in keyof T & keyof AggregateFavoritesArtworks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavoritesArtworks[P]>
      : GetScalarType<T[P], AggregateFavoritesArtworks[P]>
  }




  export type FavoritesArtworksGroupByArgs = {
    where?: favoritesArtworksWhereInput
    orderBy?: Enumerable<favoritesArtworksOrderByWithAggregationInput>
    by: Array<FavoritesArtworksScalarFieldEnum>
    having?: favoritesArtworksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoritesArtworksCountAggregateInputType | true
    _avg?: FavoritesArtworksAvgAggregateInputType
    _sum?: FavoritesArtworksSumAggregateInputType
    _min?: FavoritesArtworksMinAggregateInputType
    _max?: FavoritesArtworksMaxAggregateInputType
  }


  export type FavoritesArtworksGroupByOutputType = {
    id: number
    userId: number
    artworkId: number
    createdDate: Date | null
    _count: FavoritesArtworksCountAggregateOutputType | null
    _avg: FavoritesArtworksAvgAggregateOutputType | null
    _sum: FavoritesArtworksSumAggregateOutputType | null
    _min: FavoritesArtworksMinAggregateOutputType | null
    _max: FavoritesArtworksMaxAggregateOutputType | null
  }

  type GetFavoritesArtworksGroupByPayload<T extends FavoritesArtworksGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FavoritesArtworksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoritesArtworksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoritesArtworksGroupByOutputType[P]>
            : GetScalarType<T[P], FavoritesArtworksGroupByOutputType[P]>
        }
      >
    >


  export type favoritesArtworksSelect = {
    id?: boolean
    userId?: boolean
    artworkId?: boolean
    createdDate?: boolean
    artworks?: boolean | artworksArgs
    users?: boolean | usersArgs
  }

  export type favoritesArtworksInclude = {
    artworks?: boolean | artworksArgs
    users?: boolean | usersArgs
  }

  export type favoritesArtworksGetPayload<
    S extends boolean | null | undefined | favoritesArtworksArgs,
    U = keyof S
      > = S extends true
        ? favoritesArtworks
    : S extends undefined
    ? never
    : S extends favoritesArtworksArgs | favoritesArtworksFindManyArgs
    ?'include' extends U
    ? favoritesArtworks  & {
    [P in TrueKeys<S['include']>]:
        P extends 'artworks' ? artworksGetPayload<S['include'][P]> :
        P extends 'users' ? usersGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'artworks' ? artworksGetPayload<S['select'][P]> :
        P extends 'users' ? usersGetPayload<S['select'][P]> :  P extends keyof favoritesArtworks ? favoritesArtworks[P] : never
  } 
    : favoritesArtworks
  : favoritesArtworks


  type favoritesArtworksCountArgs = Merge<
    Omit<favoritesArtworksFindManyArgs, 'select' | 'include'> & {
      select?: FavoritesArtworksCountAggregateInputType | true
    }
  >

  export interface favoritesArtworksDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one FavoritesArtworks that matches the filter.
     * @param {favoritesArtworksFindUniqueArgs} args - Arguments to find a FavoritesArtworks
     * @example
     * // Get one FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends favoritesArtworksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, favoritesArtworksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'favoritesArtworks'> extends True ? CheckSelect<T, Prisma__favoritesArtworksClient<favoritesArtworks>, Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T>>> : CheckSelect<T, Prisma__favoritesArtworksClient<favoritesArtworks | null >, Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T> | null >>

    /**
     * Find the first FavoritesArtworks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoritesArtworksFindFirstArgs} args - Arguments to find a FavoritesArtworks
     * @example
     * // Get one FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends favoritesArtworksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, favoritesArtworksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'favoritesArtworks'> extends True ? CheckSelect<T, Prisma__favoritesArtworksClient<favoritesArtworks>, Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T>>> : CheckSelect<T, Prisma__favoritesArtworksClient<favoritesArtworks | null >, Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T> | null >>

    /**
     * Find zero or more FavoritesArtworks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoritesArtworksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.findMany()
     * 
     * // Get first 10 FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoritesArtworksWithIdOnly = await prisma.favoritesArtworks.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends favoritesArtworksFindManyArgs>(
      args?: SelectSubset<T, favoritesArtworksFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<favoritesArtworks>>, PrismaPromise<Array<favoritesArtworksGetPayload<T>>>>

    /**
     * Create a FavoritesArtworks.
     * @param {favoritesArtworksCreateArgs} args - Arguments to create a FavoritesArtworks.
     * @example
     * // Create one FavoritesArtworks
     * const FavoritesArtworks = await prisma.favoritesArtworks.create({
     *   data: {
     *     // ... data to create a FavoritesArtworks
     *   }
     * })
     * 
    **/
    create<T extends favoritesArtworksCreateArgs>(
      args: SelectSubset<T, favoritesArtworksCreateArgs>
    ): CheckSelect<T, Prisma__favoritesArtworksClient<favoritesArtworks>, Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T>>>

    /**
     * Create many FavoritesArtworks.
     *     @param {favoritesArtworksCreateManyArgs} args - Arguments to create many FavoritesArtworks.
     *     @example
     *     // Create many FavoritesArtworks
     *     const favoritesArtworks = await prisma.favoritesArtworks.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends favoritesArtworksCreateManyArgs>(
      args?: SelectSubset<T, favoritesArtworksCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a FavoritesArtworks.
     * @param {favoritesArtworksDeleteArgs} args - Arguments to delete one FavoritesArtworks.
     * @example
     * // Delete one FavoritesArtworks
     * const FavoritesArtworks = await prisma.favoritesArtworks.delete({
     *   where: {
     *     // ... filter to delete one FavoritesArtworks
     *   }
     * })
     * 
    **/
    delete<T extends favoritesArtworksDeleteArgs>(
      args: SelectSubset<T, favoritesArtworksDeleteArgs>
    ): CheckSelect<T, Prisma__favoritesArtworksClient<favoritesArtworks>, Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T>>>

    /**
     * Update one FavoritesArtworks.
     * @param {favoritesArtworksUpdateArgs} args - Arguments to update one FavoritesArtworks.
     * @example
     * // Update one FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends favoritesArtworksUpdateArgs>(
      args: SelectSubset<T, favoritesArtworksUpdateArgs>
    ): CheckSelect<T, Prisma__favoritesArtworksClient<favoritesArtworks>, Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T>>>

    /**
     * Delete zero or more FavoritesArtworks.
     * @param {favoritesArtworksDeleteManyArgs} args - Arguments to filter FavoritesArtworks to delete.
     * @example
     * // Delete a few FavoritesArtworks
     * const { count } = await prisma.favoritesArtworks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends favoritesArtworksDeleteManyArgs>(
      args?: SelectSubset<T, favoritesArtworksDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavoritesArtworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoritesArtworksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends favoritesArtworksUpdateManyArgs>(
      args: SelectSubset<T, favoritesArtworksUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one FavoritesArtworks.
     * @param {favoritesArtworksUpsertArgs} args - Arguments to update or create a FavoritesArtworks.
     * @example
     * // Update or create a FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.upsert({
     *   create: {
     *     // ... data to create a FavoritesArtworks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavoritesArtworks we want to update
     *   }
     * })
    **/
    upsert<T extends favoritesArtworksUpsertArgs>(
      args: SelectSubset<T, favoritesArtworksUpsertArgs>
    ): CheckSelect<T, Prisma__favoritesArtworksClient<favoritesArtworks>, Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T>>>

    /**
     * Count the number of FavoritesArtworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoritesArtworksCountArgs} args - Arguments to filter FavoritesArtworks to count.
     * @example
     * // Count the number of FavoritesArtworks
     * const count = await prisma.favoritesArtworks.count({
     *   where: {
     *     // ... the filter for the FavoritesArtworks we want to count
     *   }
     * })
    **/
    count<T extends favoritesArtworksCountArgs>(
      args?: Subset<T, favoritesArtworksCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoritesArtworksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavoritesArtworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritesArtworksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoritesArtworksAggregateArgs>(args: Subset<T, FavoritesArtworksAggregateArgs>): PrismaPromise<GetFavoritesArtworksAggregateType<T>>

    /**
     * Group by FavoritesArtworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritesArtworksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoritesArtworksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoritesArtworksGroupByArgs['orderBy'] }
        : { orderBy?: FavoritesArtworksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoritesArtworksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoritesArtworksGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for favoritesArtworks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__favoritesArtworksClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    artworks<T extends artworksArgs = {}>(args?: Subset<T, artworksArgs>): CheckSelect<T, Prisma__artworksClient<artworks | null >, Prisma__artworksClient<artworksGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * favoritesArtworks findUnique
   */
  export type favoritesArtworksFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
    /**
     * Throw an Error if a favoritesArtworks can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which favoritesArtworks to fetch.
     * 
    **/
    where: favoritesArtworksWhereUniqueInput
  }


  /**
   * favoritesArtworks findFirst
   */
  export type favoritesArtworksFindFirstArgs = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
    /**
     * Throw an Error if a favoritesArtworks can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which favoritesArtworks to fetch.
     * 
    **/
    where?: favoritesArtworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favoritesArtworks to fetch.
     * 
    **/
    orderBy?: Enumerable<favoritesArtworksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for favoritesArtworks.
     * 
    **/
    cursor?: favoritesArtworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favoritesArtworks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favoritesArtworks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of favoritesArtworks.
     * 
    **/
    distinct?: Enumerable<FavoritesArtworksScalarFieldEnum>
  }


  /**
   * favoritesArtworks findMany
   */
  export type favoritesArtworksFindManyArgs = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
    /**
     * Filter, which favoritesArtworks to fetch.
     * 
    **/
    where?: favoritesArtworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favoritesArtworks to fetch.
     * 
    **/
    orderBy?: Enumerable<favoritesArtworksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing favoritesArtworks.
     * 
    **/
    cursor?: favoritesArtworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favoritesArtworks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favoritesArtworks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FavoritesArtworksScalarFieldEnum>
  }


  /**
   * favoritesArtworks create
   */
  export type favoritesArtworksCreateArgs = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
    /**
     * The data needed to create a favoritesArtworks.
     * 
    **/
    data: XOR<favoritesArtworksCreateInput, favoritesArtworksUncheckedCreateInput>
  }


  /**
   * favoritesArtworks createMany
   */
  export type favoritesArtworksCreateManyArgs = {
    /**
     * The data used to create many favoritesArtworks.
     * 
    **/
    data: Enumerable<favoritesArtworksCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * favoritesArtworks update
   */
  export type favoritesArtworksUpdateArgs = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
    /**
     * The data needed to update a favoritesArtworks.
     * 
    **/
    data: XOR<favoritesArtworksUpdateInput, favoritesArtworksUncheckedUpdateInput>
    /**
     * Choose, which favoritesArtworks to update.
     * 
    **/
    where: favoritesArtworksWhereUniqueInput
  }


  /**
   * favoritesArtworks updateMany
   */
  export type favoritesArtworksUpdateManyArgs = {
    /**
     * The data used to update favoritesArtworks.
     * 
    **/
    data: XOR<favoritesArtworksUpdateManyMutationInput, favoritesArtworksUncheckedUpdateManyInput>
    /**
     * Filter which favoritesArtworks to update
     * 
    **/
    where?: favoritesArtworksWhereInput
  }


  /**
   * favoritesArtworks upsert
   */
  export type favoritesArtworksUpsertArgs = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
    /**
     * The filter to search for the favoritesArtworks to update in case it exists.
     * 
    **/
    where: favoritesArtworksWhereUniqueInput
    /**
     * In case the favoritesArtworks found by the `where` argument doesn't exist, create a new favoritesArtworks with this data.
     * 
    **/
    create: XOR<favoritesArtworksCreateInput, favoritesArtworksUncheckedCreateInput>
    /**
     * In case the favoritesArtworks was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<favoritesArtworksUpdateInput, favoritesArtworksUncheckedUpdateInput>
  }


  /**
   * favoritesArtworks delete
   */
  export type favoritesArtworksDeleteArgs = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
    /**
     * Filter which favoritesArtworks to delete.
     * 
    **/
    where: favoritesArtworksWhereUniqueInput
  }


  /**
   * favoritesArtworks deleteMany
   */
  export type favoritesArtworksDeleteManyArgs = {
    /**
     * Filter which favoritesArtworks to delete
     * 
    **/
    where?: favoritesArtworksWhereInput
  }


  /**
   * favoritesArtworks without action
   */
  export type favoritesArtworksArgs = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
  }



  /**
   * Model followers
   */


  export type AggregateFollowers = {
    _count: FollowersCountAggregateOutputType | null
    _avg: FollowersAvgAggregateOutputType | null
    _sum: FollowersSumAggregateOutputType | null
    _min: FollowersMinAggregateOutputType | null
    _max: FollowersMaxAggregateOutputType | null
  }

  export type FollowersAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    artistId: number | null
  }

  export type FollowersSumAggregateOutputType = {
    id: number | null
    userId: number | null
    artistId: number | null
  }

  export type FollowersMinAggregateOutputType = {
    id: number | null
    userId: number | null
    artistId: number | null
    createdDate: Date | null
  }

  export type FollowersMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    artistId: number | null
    createdDate: Date | null
  }

  export type FollowersCountAggregateOutputType = {
    id: number
    userId: number
    artistId: number
    createdDate: number
    _all: number
  }


  export type FollowersAvgAggregateInputType = {
    id?: true
    userId?: true
    artistId?: true
  }

  export type FollowersSumAggregateInputType = {
    id?: true
    userId?: true
    artistId?: true
  }

  export type FollowersMinAggregateInputType = {
    id?: true
    userId?: true
    artistId?: true
    createdDate?: true
  }

  export type FollowersMaxAggregateInputType = {
    id?: true
    userId?: true
    artistId?: true
    createdDate?: true
  }

  export type FollowersCountAggregateInputType = {
    id?: true
    userId?: true
    artistId?: true
    createdDate?: true
    _all?: true
  }

  export type FollowersAggregateArgs = {
    /**
     * Filter which followers to aggregate.
     * 
    **/
    where?: followersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of followers to fetch.
     * 
    **/
    orderBy?: Enumerable<followersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: followersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` followers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` followers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned followers
    **/
    _count?: true | FollowersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FollowersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FollowersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowersMaxAggregateInputType
  }

  export type GetFollowersAggregateType<T extends FollowersAggregateArgs> = {
        [P in keyof T & keyof AggregateFollowers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollowers[P]>
      : GetScalarType<T[P], AggregateFollowers[P]>
  }




  export type FollowersGroupByArgs = {
    where?: followersWhereInput
    orderBy?: Enumerable<followersOrderByWithAggregationInput>
    by: Array<FollowersScalarFieldEnum>
    having?: followersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowersCountAggregateInputType | true
    _avg?: FollowersAvgAggregateInputType
    _sum?: FollowersSumAggregateInputType
    _min?: FollowersMinAggregateInputType
    _max?: FollowersMaxAggregateInputType
  }


  export type FollowersGroupByOutputType = {
    id: number
    userId: number
    artistId: number
    createdDate: Date | null
    _count: FollowersCountAggregateOutputType | null
    _avg: FollowersAvgAggregateOutputType | null
    _sum: FollowersSumAggregateOutputType | null
    _min: FollowersMinAggregateOutputType | null
    _max: FollowersMaxAggregateOutputType | null
  }

  type GetFollowersGroupByPayload<T extends FollowersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FollowersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowersGroupByOutputType[P]>
            : GetScalarType<T[P], FollowersGroupByOutputType[P]>
        }
      >
    >


  export type followersSelect = {
    id?: boolean
    userId?: boolean
    artistId?: boolean
    createdDate?: boolean
    users_followers_artistIdTousers?: boolean | usersArgs
    users_followers_userIdTousers?: boolean | usersArgs
  }

  export type followersInclude = {
    users_followers_artistIdTousers?: boolean | usersArgs
    users_followers_userIdTousers?: boolean | usersArgs
  }

  export type followersGetPayload<
    S extends boolean | null | undefined | followersArgs,
    U = keyof S
      > = S extends true
        ? followers
    : S extends undefined
    ? never
    : S extends followersArgs | followersFindManyArgs
    ?'include' extends U
    ? followers  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users_followers_artistIdTousers' ? usersGetPayload<S['include'][P]> :
        P extends 'users_followers_userIdTousers' ? usersGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users_followers_artistIdTousers' ? usersGetPayload<S['select'][P]> :
        P extends 'users_followers_userIdTousers' ? usersGetPayload<S['select'][P]> :  P extends keyof followers ? followers[P] : never
  } 
    : followers
  : followers


  type followersCountArgs = Merge<
    Omit<followersFindManyArgs, 'select' | 'include'> & {
      select?: FollowersCountAggregateInputType | true
    }
  >

  export interface followersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Followers that matches the filter.
     * @param {followersFindUniqueArgs} args - Arguments to find a Followers
     * @example
     * // Get one Followers
     * const followers = await prisma.followers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends followersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, followersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'followers'> extends True ? CheckSelect<T, Prisma__followersClient<followers>, Prisma__followersClient<followersGetPayload<T>>> : CheckSelect<T, Prisma__followersClient<followers | null >, Prisma__followersClient<followersGetPayload<T> | null >>

    /**
     * Find the first Followers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {followersFindFirstArgs} args - Arguments to find a Followers
     * @example
     * // Get one Followers
     * const followers = await prisma.followers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends followersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, followersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'followers'> extends True ? CheckSelect<T, Prisma__followersClient<followers>, Prisma__followersClient<followersGetPayload<T>>> : CheckSelect<T, Prisma__followersClient<followers | null >, Prisma__followersClient<followersGetPayload<T> | null >>

    /**
     * Find zero or more Followers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {followersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Followers
     * const followers = await prisma.followers.findMany()
     * 
     * // Get first 10 Followers
     * const followers = await prisma.followers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followersWithIdOnly = await prisma.followers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends followersFindManyArgs>(
      args?: SelectSubset<T, followersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<followers>>, PrismaPromise<Array<followersGetPayload<T>>>>

    /**
     * Create a Followers.
     * @param {followersCreateArgs} args - Arguments to create a Followers.
     * @example
     * // Create one Followers
     * const Followers = await prisma.followers.create({
     *   data: {
     *     // ... data to create a Followers
     *   }
     * })
     * 
    **/
    create<T extends followersCreateArgs>(
      args: SelectSubset<T, followersCreateArgs>
    ): CheckSelect<T, Prisma__followersClient<followers>, Prisma__followersClient<followersGetPayload<T>>>

    /**
     * Create many Followers.
     *     @param {followersCreateManyArgs} args - Arguments to create many Followers.
     *     @example
     *     // Create many Followers
     *     const followers = await prisma.followers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends followersCreateManyArgs>(
      args?: SelectSubset<T, followersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Followers.
     * @param {followersDeleteArgs} args - Arguments to delete one Followers.
     * @example
     * // Delete one Followers
     * const Followers = await prisma.followers.delete({
     *   where: {
     *     // ... filter to delete one Followers
     *   }
     * })
     * 
    **/
    delete<T extends followersDeleteArgs>(
      args: SelectSubset<T, followersDeleteArgs>
    ): CheckSelect<T, Prisma__followersClient<followers>, Prisma__followersClient<followersGetPayload<T>>>

    /**
     * Update one Followers.
     * @param {followersUpdateArgs} args - Arguments to update one Followers.
     * @example
     * // Update one Followers
     * const followers = await prisma.followers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends followersUpdateArgs>(
      args: SelectSubset<T, followersUpdateArgs>
    ): CheckSelect<T, Prisma__followersClient<followers>, Prisma__followersClient<followersGetPayload<T>>>

    /**
     * Delete zero or more Followers.
     * @param {followersDeleteManyArgs} args - Arguments to filter Followers to delete.
     * @example
     * // Delete a few Followers
     * const { count } = await prisma.followers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends followersDeleteManyArgs>(
      args?: SelectSubset<T, followersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {followersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Followers
     * const followers = await prisma.followers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends followersUpdateManyArgs>(
      args: SelectSubset<T, followersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Followers.
     * @param {followersUpsertArgs} args - Arguments to update or create a Followers.
     * @example
     * // Update or create a Followers
     * const followers = await prisma.followers.upsert({
     *   create: {
     *     // ... data to create a Followers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Followers we want to update
     *   }
     * })
    **/
    upsert<T extends followersUpsertArgs>(
      args: SelectSubset<T, followersUpsertArgs>
    ): CheckSelect<T, Prisma__followersClient<followers>, Prisma__followersClient<followersGetPayload<T>>>

    /**
     * Count the number of Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {followersCountArgs} args - Arguments to filter Followers to count.
     * @example
     * // Count the number of Followers
     * const count = await prisma.followers.count({
     *   where: {
     *     // ... the filter for the Followers we want to count
     *   }
     * })
    **/
    count<T extends followersCountArgs>(
      args?: Subset<T, followersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowersAggregateArgs>(args: Subset<T, FollowersAggregateArgs>): PrismaPromise<GetFollowersAggregateType<T>>

    /**
     * Group by Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowersGroupByArgs['orderBy'] }
        : { orderBy?: FollowersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowersGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for followers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__followersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users_followers_artistIdTousers<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    users_followers_userIdTousers<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * followers findUnique
   */
  export type followersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
    /**
     * Throw an Error if a followers can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which followers to fetch.
     * 
    **/
    where: followersWhereUniqueInput
  }


  /**
   * followers findFirst
   */
  export type followersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
    /**
     * Throw an Error if a followers can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which followers to fetch.
     * 
    **/
    where?: followersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of followers to fetch.
     * 
    **/
    orderBy?: Enumerable<followersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for followers.
     * 
    **/
    cursor?: followersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` followers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` followers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of followers.
     * 
    **/
    distinct?: Enumerable<FollowersScalarFieldEnum>
  }


  /**
   * followers findMany
   */
  export type followersFindManyArgs = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
    /**
     * Filter, which followers to fetch.
     * 
    **/
    where?: followersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of followers to fetch.
     * 
    **/
    orderBy?: Enumerable<followersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing followers.
     * 
    **/
    cursor?: followersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` followers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` followers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FollowersScalarFieldEnum>
  }


  /**
   * followers create
   */
  export type followersCreateArgs = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
    /**
     * The data needed to create a followers.
     * 
    **/
    data: XOR<followersCreateInput, followersUncheckedCreateInput>
  }


  /**
   * followers createMany
   */
  export type followersCreateManyArgs = {
    /**
     * The data used to create many followers.
     * 
    **/
    data: Enumerable<followersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * followers update
   */
  export type followersUpdateArgs = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
    /**
     * The data needed to update a followers.
     * 
    **/
    data: XOR<followersUpdateInput, followersUncheckedUpdateInput>
    /**
     * Choose, which followers to update.
     * 
    **/
    where: followersWhereUniqueInput
  }


  /**
   * followers updateMany
   */
  export type followersUpdateManyArgs = {
    /**
     * The data used to update followers.
     * 
    **/
    data: XOR<followersUpdateManyMutationInput, followersUncheckedUpdateManyInput>
    /**
     * Filter which followers to update
     * 
    **/
    where?: followersWhereInput
  }


  /**
   * followers upsert
   */
  export type followersUpsertArgs = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
    /**
     * The filter to search for the followers to update in case it exists.
     * 
    **/
    where: followersWhereUniqueInput
    /**
     * In case the followers found by the `where` argument doesn't exist, create a new followers with this data.
     * 
    **/
    create: XOR<followersCreateInput, followersUncheckedCreateInput>
    /**
     * In case the followers was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<followersUpdateInput, followersUncheckedUpdateInput>
  }


  /**
   * followers delete
   */
  export type followersDeleteArgs = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
    /**
     * Filter which followers to delete.
     * 
    **/
    where: followersWhereUniqueInput
  }


  /**
   * followers deleteMany
   */
  export type followersDeleteManyArgs = {
    /**
     * Filter which followers to delete
     * 
    **/
    where?: followersWhereInput
  }


  /**
   * followers without action
   */
  export type followersArgs = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UsersScalarFieldEnum: {
    id: 'id',
    typeId: 'typeId',
    name: 'name',
    email: 'email',
    pass: 'pass',
    address: 'address',
    contact: 'contact',
    photoUrl: 'photoUrl'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const ArtworksScalarFieldEnum: {
    id: 'id',
    artistId: 'artistId',
    title: 'title',
    description: 'description',
    imageUrl: 'imageUrl',
    publicationDate: 'publicationDate',
    categories: 'categories'
  };

  export type ArtworksScalarFieldEnum = (typeof ArtworksScalarFieldEnum)[keyof typeof ArtworksScalarFieldEnum]


  export const CommentsScalarFieldEnum: {
    id: 'id',
    artworkId: 'artworkId',
    userId: 'userId',
    comment: 'comment',
    postingDate: 'postingDate'
  };

  export type CommentsScalarFieldEnum = (typeof CommentsScalarFieldEnum)[keyof typeof CommentsScalarFieldEnum]


  export const FavoritesArtworksScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    artworkId: 'artworkId',
    createdDate: 'createdDate'
  };

  export type FavoritesArtworksScalarFieldEnum = (typeof FavoritesArtworksScalarFieldEnum)[keyof typeof FavoritesArtworksScalarFieldEnum]


  export const FollowersScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    artistId: 'artistId',
    createdDate: 'createdDate'
  };

  export type FollowersScalarFieldEnum = (typeof FollowersScalarFieldEnum)[keyof typeof FollowersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    typeId?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    pass?: StringFilter | string
    address?: StringNullableFilter | string | null
    contact?: StringNullableFilter | string | null
    photoUrl?: StringNullableFilter | string | null
    artworks?: ArtworksListRelationFilter
    comments?: CommentsListRelationFilter
    favoritesArtworks?: FavoritesArtworksListRelationFilter
    followers_followers_artistIdTousers?: FollowersListRelationFilter
    followers_followers_userIdTousers?: FollowersListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    typeId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    pass?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    photoUrl?: SortOrder
    artworks?: artworksOrderByRelationAggregateInput
    comments?: commentsOrderByRelationAggregateInput
    favoritesArtworks?: favoritesArtworksOrderByRelationAggregateInput
    followers_followers_artistIdTousers?: followersOrderByRelationAggregateInput
    followers_followers_userIdTousers?: followersOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    typeId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    pass?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    photoUrl?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    typeId?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    pass?: StringWithAggregatesFilter | string
    address?: StringNullableWithAggregatesFilter | string | null
    contact?: StringNullableWithAggregatesFilter | string | null
    photoUrl?: StringNullableWithAggregatesFilter | string | null
  }

  export type artworksWhereInput = {
    AND?: Enumerable<artworksWhereInput>
    OR?: Enumerable<artworksWhereInput>
    NOT?: Enumerable<artworksWhereInput>
    id?: IntFilter | number
    artistId?: IntFilter | number
    title?: StringFilter | string
    description?: StringFilter | string
    imageUrl?: StringNullableFilter | string | null
    publicationDate?: DateTimeNullableFilter | Date | string | null
    categories?: StringNullableFilter | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
    comments?: CommentsListRelationFilter
    favoritesArtworks?: FavoritesArtworksListRelationFilter
  }

  export type artworksOrderByWithRelationInput = {
    id?: SortOrder
    artistId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    publicationDate?: SortOrder
    categories?: SortOrder
    users?: usersOrderByWithRelationInput
    comments?: commentsOrderByRelationAggregateInput
    favoritesArtworks?: favoritesArtworksOrderByRelationAggregateInput
  }

  export type artworksWhereUniqueInput = {
    id?: number
  }

  export type artworksOrderByWithAggregationInput = {
    id?: SortOrder
    artistId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    publicationDate?: SortOrder
    categories?: SortOrder
    _count?: artworksCountOrderByAggregateInput
    _avg?: artworksAvgOrderByAggregateInput
    _max?: artworksMaxOrderByAggregateInput
    _min?: artworksMinOrderByAggregateInput
    _sum?: artworksSumOrderByAggregateInput
  }

  export type artworksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<artworksScalarWhereWithAggregatesInput>
    OR?: Enumerable<artworksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<artworksScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    artistId?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    imageUrl?: StringNullableWithAggregatesFilter | string | null
    publicationDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    categories?: StringNullableWithAggregatesFilter | string | null
  }

  export type commentsWhereInput = {
    AND?: Enumerable<commentsWhereInput>
    OR?: Enumerable<commentsWhereInput>
    NOT?: Enumerable<commentsWhereInput>
    id?: IntFilter | number
    artworkId?: IntFilter | number
    userId?: IntFilter | number
    comment?: StringFilter | string
    postingDate?: DateTimeNullableFilter | Date | string | null
    artworks?: XOR<ArtworksRelationFilter, artworksWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type commentsOrderByWithRelationInput = {
    id?: SortOrder
    artworkId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    postingDate?: SortOrder
    artworks?: artworksOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type commentsWhereUniqueInput = {
    id?: number
  }

  export type commentsOrderByWithAggregationInput = {
    id?: SortOrder
    artworkId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    postingDate?: SortOrder
    _count?: commentsCountOrderByAggregateInput
    _avg?: commentsAvgOrderByAggregateInput
    _max?: commentsMaxOrderByAggregateInput
    _min?: commentsMinOrderByAggregateInput
    _sum?: commentsSumOrderByAggregateInput
  }

  export type commentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<commentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<commentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<commentsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    artworkId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    comment?: StringWithAggregatesFilter | string
    postingDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type favoritesArtworksWhereInput = {
    AND?: Enumerable<favoritesArtworksWhereInput>
    OR?: Enumerable<favoritesArtworksWhereInput>
    NOT?: Enumerable<favoritesArtworksWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    artworkId?: IntFilter | number
    createdDate?: DateTimeNullableFilter | Date | string | null
    artworks?: XOR<ArtworksRelationFilter, artworksWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type favoritesArtworksOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    createdDate?: SortOrder
    artworks?: artworksOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type favoritesArtworksWhereUniqueInput = {
    id?: number
  }

  export type favoritesArtworksOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    createdDate?: SortOrder
    _count?: favoritesArtworksCountOrderByAggregateInput
    _avg?: favoritesArtworksAvgOrderByAggregateInput
    _max?: favoritesArtworksMaxOrderByAggregateInput
    _min?: favoritesArtworksMinOrderByAggregateInput
    _sum?: favoritesArtworksSumOrderByAggregateInput
  }

  export type favoritesArtworksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<favoritesArtworksScalarWhereWithAggregatesInput>
    OR?: Enumerable<favoritesArtworksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<favoritesArtworksScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    artworkId?: IntWithAggregatesFilter | number
    createdDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type followersWhereInput = {
    AND?: Enumerable<followersWhereInput>
    OR?: Enumerable<followersWhereInput>
    NOT?: Enumerable<followersWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    artistId?: IntFilter | number
    createdDate?: DateTimeNullableFilter | Date | string | null
    users_followers_artistIdTousers?: XOR<UsersRelationFilter, usersWhereInput>
    users_followers_userIdTousers?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type followersOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    artistId?: SortOrder
    createdDate?: SortOrder
    users_followers_artistIdTousers?: usersOrderByWithRelationInput
    users_followers_userIdTousers?: usersOrderByWithRelationInput
  }

  export type followersWhereUniqueInput = {
    id?: number
  }

  export type followersOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    artistId?: SortOrder
    createdDate?: SortOrder
    _count?: followersCountOrderByAggregateInput
    _avg?: followersAvgOrderByAggregateInput
    _max?: followersMaxOrderByAggregateInput
    _min?: followersMinOrderByAggregateInput
    _sum?: followersSumOrderByAggregateInput
  }

  export type followersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<followersScalarWhereWithAggregatesInput>
    OR?: Enumerable<followersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<followersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    artistId?: IntWithAggregatesFilter | number
    createdDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type usersCreateInput = {
    typeId?: number
    name: string
    email: string
    pass: string
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    comments?: commentsCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersCreateNestedManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    typeId?: number
    name: string
    email: string
    pass: string
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    comments?: commentsUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersUpdateInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    artworks?: artworksUpdateManyWithoutUsersInput
    comments?: commentsUpdateManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUpdateManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersInput
    comments?: commentsUncheckedUpdateManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersCreateManyInput = {
    id?: number
    typeId?: number
    name: string
    email: string
    pass: string
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
  }

  export type usersUpdateManyMutationInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type artworksCreateInput = {
    title: string
    description: string
    imageUrl?: string | null
    publicationDate?: Date | string | null
    categories?: string | null
    users: usersCreateNestedOneWithoutArtworksInput
    comments?: commentsCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateInput = {
    id?: number
    artistId: number
    title: string
    description: string
    imageUrl?: string | null
    publicationDate?: Date | string | null
    categories?: string | null
    comments?: commentsUncheckedCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneRequiredWithoutArtworksInput
    comments?: commentsUpdateManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutArtworksInput
  }

  export type artworksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: commentsUncheckedUpdateManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutArtworksInput
  }

  export type artworksCreateManyInput = {
    id?: number
    artistId: number
    title: string
    description: string
    imageUrl?: string | null
    publicationDate?: Date | string | null
    categories?: string | null
  }

  export type artworksUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type artworksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commentsCreateInput = {
    comment: string
    postingDate?: Date | string | null
    artworks: artworksCreateNestedOneWithoutCommentsInput
    users: usersCreateNestedOneWithoutCommentsInput
  }

  export type commentsUncheckedCreateInput = {
    id?: number
    artworkId: number
    userId: number
    comment: string
    postingDate?: Date | string | null
  }

  export type commentsUpdateInput = {
    comment?: StringFieldUpdateOperationsInput | string
    postingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    artworks?: artworksUpdateOneRequiredWithoutCommentsInput
    users?: usersUpdateOneRequiredWithoutCommentsInput
  }

  export type commentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    postingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentsCreateManyInput = {
    id?: number
    artworkId: number
    userId: number
    comment: string
    postingDate?: Date | string | null
  }

  export type commentsUpdateManyMutationInput = {
    comment?: StringFieldUpdateOperationsInput | string
    postingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    postingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type favoritesArtworksCreateInput = {
    createdDate?: Date | string | null
    artworks: artworksCreateNestedOneWithoutFavoritesArtworksInput
    users: usersCreateNestedOneWithoutFavoritesArtworksInput
  }

  export type favoritesArtworksUncheckedCreateInput = {
    id?: number
    userId: number
    artworkId: number
    createdDate?: Date | string | null
  }

  export type favoritesArtworksUpdateInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    artworks?: artworksUpdateOneRequiredWithoutFavoritesArtworksInput
    users?: usersUpdateOneRequiredWithoutFavoritesArtworksInput
  }

  export type favoritesArtworksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type favoritesArtworksCreateManyInput = {
    id?: number
    userId: number
    artworkId: number
    createdDate?: Date | string | null
  }

  export type favoritesArtworksUpdateManyMutationInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type favoritesArtworksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followersCreateInput = {
    createdDate?: Date | string | null
    users_followers_artistIdTousers: usersCreateNestedOneWithoutFollowers_followers_artistIdTousersInput
    users_followers_userIdTousers: usersCreateNestedOneWithoutFollowers_followers_userIdTousersInput
  }

  export type followersUncheckedCreateInput = {
    id?: number
    userId: number
    artistId: number
    createdDate?: Date | string | null
  }

  export type followersUpdateInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_followers_artistIdTousers?: usersUpdateOneRequiredWithoutFollowers_followers_artistIdTousersInput
    users_followers_userIdTousers?: usersUpdateOneRequiredWithoutFollowers_followers_userIdTousersInput
  }

  export type followersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followersCreateManyInput = {
    id?: number
    userId: number
    artistId: number
    createdDate?: Date | string | null
  }

  export type followersUpdateManyMutationInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type ArtworksListRelationFilter = {
    every?: artworksWhereInput
    some?: artworksWhereInput
    none?: artworksWhereInput
  }

  export type CommentsListRelationFilter = {
    every?: commentsWhereInput
    some?: commentsWhereInput
    none?: commentsWhereInput
  }

  export type FavoritesArtworksListRelationFilter = {
    every?: favoritesArtworksWhereInput
    some?: favoritesArtworksWhereInput
    none?: favoritesArtworksWhereInput
  }

  export type FollowersListRelationFilter = {
    every?: followersWhereInput
    some?: followersWhereInput
    none?: followersWhereInput
  }

  export type artworksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type commentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type favoritesArtworksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type followersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    pass?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    photoUrl?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    pass?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    photoUrl?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    pass?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    photoUrl?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type artworksCountOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    publicationDate?: SortOrder
    categories?: SortOrder
  }

  export type artworksAvgOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
  }

  export type artworksMaxOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    publicationDate?: SortOrder
    categories?: SortOrder
  }

  export type artworksMinOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    publicationDate?: SortOrder
    categories?: SortOrder
  }

  export type artworksSumOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type ArtworksRelationFilter = {
    is?: artworksWhereInput
    isNot?: artworksWhereInput
  }

  export type commentsCountOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    postingDate?: SortOrder
  }

  export type commentsAvgOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    userId?: SortOrder
  }

  export type commentsMaxOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    postingDate?: SortOrder
  }

  export type commentsMinOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    postingDate?: SortOrder
  }

  export type commentsSumOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    userId?: SortOrder
  }

  export type favoritesArtworksCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    createdDate?: SortOrder
  }

  export type favoritesArtworksAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
  }

  export type favoritesArtworksMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    createdDate?: SortOrder
  }

  export type favoritesArtworksMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    createdDate?: SortOrder
  }

  export type favoritesArtworksSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
  }

  export type followersCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artistId?: SortOrder
    createdDate?: SortOrder
  }

  export type followersAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artistId?: SortOrder
  }

  export type followersMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artistId?: SortOrder
    createdDate?: SortOrder
  }

  export type followersMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artistId?: SortOrder
    createdDate?: SortOrder
  }

  export type followersSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artistId?: SortOrder
  }

  export type artworksCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<artworksCreateWithoutUsersInput>, Enumerable<artworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<artworksCreateOrConnectWithoutUsersInput>
    createMany?: artworksCreateManyUsersInputEnvelope
    connect?: Enumerable<artworksWhereUniqueInput>
  }

  export type commentsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<commentsCreateWithoutUsersInput>, Enumerable<commentsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutUsersInput>
    createMany?: commentsCreateManyUsersInputEnvelope
    connect?: Enumerable<commentsWhereUniqueInput>
  }

  export type favoritesArtworksCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutUsersInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutUsersInput>
    createMany?: favoritesArtworksCreateManyUsersInputEnvelope
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
  }

  export type followersCreateNestedManyWithoutUsers_followers_artistIdTousersInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsers_followers_artistIdTousersInput>, Enumerable<followersUncheckedCreateWithoutUsers_followers_artistIdTousersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsers_followers_artistIdTousersInput>
    createMany?: followersCreateManyUsers_followers_artistIdTousersInputEnvelope
    connect?: Enumerable<followersWhereUniqueInput>
  }

  export type followersCreateNestedManyWithoutUsers_followers_userIdTousersInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsers_followers_userIdTousersInput>, Enumerable<followersUncheckedCreateWithoutUsers_followers_userIdTousersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsers_followers_userIdTousersInput>
    createMany?: followersCreateManyUsers_followers_userIdTousersInputEnvelope
    connect?: Enumerable<followersWhereUniqueInput>
  }

  export type artworksUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<artworksCreateWithoutUsersInput>, Enumerable<artworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<artworksCreateOrConnectWithoutUsersInput>
    createMany?: artworksCreateManyUsersInputEnvelope
    connect?: Enumerable<artworksWhereUniqueInput>
  }

  export type commentsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<commentsCreateWithoutUsersInput>, Enumerable<commentsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutUsersInput>
    createMany?: commentsCreateManyUsersInputEnvelope
    connect?: Enumerable<commentsWhereUniqueInput>
  }

  export type favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutUsersInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutUsersInput>
    createMany?: favoritesArtworksCreateManyUsersInputEnvelope
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
  }

  export type followersUncheckedCreateNestedManyWithoutUsers_followers_artistIdTousersInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsers_followers_artistIdTousersInput>, Enumerable<followersUncheckedCreateWithoutUsers_followers_artistIdTousersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsers_followers_artistIdTousersInput>
    createMany?: followersCreateManyUsers_followers_artistIdTousersInputEnvelope
    connect?: Enumerable<followersWhereUniqueInput>
  }

  export type followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsers_followers_userIdTousersInput>, Enumerable<followersUncheckedCreateWithoutUsers_followers_userIdTousersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsers_followers_userIdTousersInput>
    createMany?: followersCreateManyUsers_followers_userIdTousersInputEnvelope
    connect?: Enumerable<followersWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type artworksUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<artworksCreateWithoutUsersInput>, Enumerable<artworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<artworksCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<artworksUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: artworksCreateManyUsersInputEnvelope
    set?: Enumerable<artworksWhereUniqueInput>
    disconnect?: Enumerable<artworksWhereUniqueInput>
    delete?: Enumerable<artworksWhereUniqueInput>
    connect?: Enumerable<artworksWhereUniqueInput>
    update?: Enumerable<artworksUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<artworksUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<artworksScalarWhereInput>
  }

  export type commentsUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<commentsCreateWithoutUsersInput>, Enumerable<commentsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<commentsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: commentsCreateManyUsersInputEnvelope
    set?: Enumerable<commentsWhereUniqueInput>
    disconnect?: Enumerable<commentsWhereUniqueInput>
    delete?: Enumerable<commentsWhereUniqueInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    update?: Enumerable<commentsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<commentsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<commentsScalarWhereInput>
  }

  export type favoritesArtworksUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutUsersInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<favoritesArtworksUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: favoritesArtworksCreateManyUsersInputEnvelope
    set?: Enumerable<favoritesArtworksWhereUniqueInput>
    disconnect?: Enumerable<favoritesArtworksWhereUniqueInput>
    delete?: Enumerable<favoritesArtworksWhereUniqueInput>
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
    update?: Enumerable<favoritesArtworksUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<favoritesArtworksUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<favoritesArtworksScalarWhereInput>
  }

  export type followersUpdateManyWithoutUsers_followers_artistIdTousersInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsers_followers_artistIdTousersInput>, Enumerable<followersUncheckedCreateWithoutUsers_followers_artistIdTousersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsers_followers_artistIdTousersInput>
    upsert?: Enumerable<followersUpsertWithWhereUniqueWithoutUsers_followers_artistIdTousersInput>
    createMany?: followersCreateManyUsers_followers_artistIdTousersInputEnvelope
    set?: Enumerable<followersWhereUniqueInput>
    disconnect?: Enumerable<followersWhereUniqueInput>
    delete?: Enumerable<followersWhereUniqueInput>
    connect?: Enumerable<followersWhereUniqueInput>
    update?: Enumerable<followersUpdateWithWhereUniqueWithoutUsers_followers_artistIdTousersInput>
    updateMany?: Enumerable<followersUpdateManyWithWhereWithoutUsers_followers_artistIdTousersInput>
    deleteMany?: Enumerable<followersScalarWhereInput>
  }

  export type followersUpdateManyWithoutUsers_followers_userIdTousersInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsers_followers_userIdTousersInput>, Enumerable<followersUncheckedCreateWithoutUsers_followers_userIdTousersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsers_followers_userIdTousersInput>
    upsert?: Enumerable<followersUpsertWithWhereUniqueWithoutUsers_followers_userIdTousersInput>
    createMany?: followersCreateManyUsers_followers_userIdTousersInputEnvelope
    set?: Enumerable<followersWhereUniqueInput>
    disconnect?: Enumerable<followersWhereUniqueInput>
    delete?: Enumerable<followersWhereUniqueInput>
    connect?: Enumerable<followersWhereUniqueInput>
    update?: Enumerable<followersUpdateWithWhereUniqueWithoutUsers_followers_userIdTousersInput>
    updateMany?: Enumerable<followersUpdateManyWithWhereWithoutUsers_followers_userIdTousersInput>
    deleteMany?: Enumerable<followersScalarWhereInput>
  }

  export type artworksUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<artworksCreateWithoutUsersInput>, Enumerable<artworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<artworksCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<artworksUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: artworksCreateManyUsersInputEnvelope
    set?: Enumerable<artworksWhereUniqueInput>
    disconnect?: Enumerable<artworksWhereUniqueInput>
    delete?: Enumerable<artworksWhereUniqueInput>
    connect?: Enumerable<artworksWhereUniqueInput>
    update?: Enumerable<artworksUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<artworksUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<artworksScalarWhereInput>
  }

  export type commentsUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<commentsCreateWithoutUsersInput>, Enumerable<commentsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<commentsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: commentsCreateManyUsersInputEnvelope
    set?: Enumerable<commentsWhereUniqueInput>
    disconnect?: Enumerable<commentsWhereUniqueInput>
    delete?: Enumerable<commentsWhereUniqueInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    update?: Enumerable<commentsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<commentsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<commentsScalarWhereInput>
  }

  export type favoritesArtworksUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutUsersInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<favoritesArtworksUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: favoritesArtworksCreateManyUsersInputEnvelope
    set?: Enumerable<favoritesArtworksWhereUniqueInput>
    disconnect?: Enumerable<favoritesArtworksWhereUniqueInput>
    delete?: Enumerable<favoritesArtworksWhereUniqueInput>
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
    update?: Enumerable<favoritesArtworksUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<favoritesArtworksUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<favoritesArtworksScalarWhereInput>
  }

  export type followersUncheckedUpdateManyWithoutUsers_followers_artistIdTousersInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsers_followers_artistIdTousersInput>, Enumerable<followersUncheckedCreateWithoutUsers_followers_artistIdTousersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsers_followers_artistIdTousersInput>
    upsert?: Enumerable<followersUpsertWithWhereUniqueWithoutUsers_followers_artistIdTousersInput>
    createMany?: followersCreateManyUsers_followers_artistIdTousersInputEnvelope
    set?: Enumerable<followersWhereUniqueInput>
    disconnect?: Enumerable<followersWhereUniqueInput>
    delete?: Enumerable<followersWhereUniqueInput>
    connect?: Enumerable<followersWhereUniqueInput>
    update?: Enumerable<followersUpdateWithWhereUniqueWithoutUsers_followers_artistIdTousersInput>
    updateMany?: Enumerable<followersUpdateManyWithWhereWithoutUsers_followers_artistIdTousersInput>
    deleteMany?: Enumerable<followersScalarWhereInput>
  }

  export type followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsers_followers_userIdTousersInput>, Enumerable<followersUncheckedCreateWithoutUsers_followers_userIdTousersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsers_followers_userIdTousersInput>
    upsert?: Enumerable<followersUpsertWithWhereUniqueWithoutUsers_followers_userIdTousersInput>
    createMany?: followersCreateManyUsers_followers_userIdTousersInputEnvelope
    set?: Enumerable<followersWhereUniqueInput>
    disconnect?: Enumerable<followersWhereUniqueInput>
    delete?: Enumerable<followersWhereUniqueInput>
    connect?: Enumerable<followersWhereUniqueInput>
    update?: Enumerable<followersUpdateWithWhereUniqueWithoutUsers_followers_userIdTousersInput>
    updateMany?: Enumerable<followersUpdateManyWithWhereWithoutUsers_followers_userIdTousersInput>
    deleteMany?: Enumerable<followersScalarWhereInput>
  }

  export type usersCreateNestedOneWithoutArtworksInput = {
    create?: XOR<usersCreateWithoutArtworksInput, usersUncheckedCreateWithoutArtworksInput>
    connectOrCreate?: usersCreateOrConnectWithoutArtworksInput
    connect?: usersWhereUniqueInput
  }

  export type commentsCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<commentsCreateWithoutArtworksInput>, Enumerable<commentsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutArtworksInput>
    createMany?: commentsCreateManyArtworksInputEnvelope
    connect?: Enumerable<commentsWhereUniqueInput>
  }

  export type favoritesArtworksCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutArtworksInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutArtworksInput>
    createMany?: favoritesArtworksCreateManyArtworksInputEnvelope
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
  }

  export type commentsUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<commentsCreateWithoutArtworksInput>, Enumerable<commentsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutArtworksInput>
    createMany?: commentsCreateManyArtworksInputEnvelope
    connect?: Enumerable<commentsWhereUniqueInput>
  }

  export type favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutArtworksInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutArtworksInput>
    createMany?: favoritesArtworksCreateManyArtworksInputEnvelope
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type usersUpdateOneRequiredWithoutArtworksInput = {
    create?: XOR<usersCreateWithoutArtworksInput, usersUncheckedCreateWithoutArtworksInput>
    connectOrCreate?: usersCreateOrConnectWithoutArtworksInput
    upsert?: usersUpsertWithoutArtworksInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutArtworksInput, usersUncheckedUpdateWithoutArtworksInput>
  }

  export type commentsUpdateManyWithoutArtworksInput = {
    create?: XOR<Enumerable<commentsCreateWithoutArtworksInput>, Enumerable<commentsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<commentsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: commentsCreateManyArtworksInputEnvelope
    set?: Enumerable<commentsWhereUniqueInput>
    disconnect?: Enumerable<commentsWhereUniqueInput>
    delete?: Enumerable<commentsWhereUniqueInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    update?: Enumerable<commentsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<commentsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<commentsScalarWhereInput>
  }

  export type favoritesArtworksUpdateManyWithoutArtworksInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutArtworksInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<favoritesArtworksUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: favoritesArtworksCreateManyArtworksInputEnvelope
    set?: Enumerable<favoritesArtworksWhereUniqueInput>
    disconnect?: Enumerable<favoritesArtworksWhereUniqueInput>
    delete?: Enumerable<favoritesArtworksWhereUniqueInput>
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
    update?: Enumerable<favoritesArtworksUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<favoritesArtworksUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<favoritesArtworksScalarWhereInput>
  }

  export type commentsUncheckedUpdateManyWithoutArtworksInput = {
    create?: XOR<Enumerable<commentsCreateWithoutArtworksInput>, Enumerable<commentsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<commentsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: commentsCreateManyArtworksInputEnvelope
    set?: Enumerable<commentsWhereUniqueInput>
    disconnect?: Enumerable<commentsWhereUniqueInput>
    delete?: Enumerable<commentsWhereUniqueInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    update?: Enumerable<commentsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<commentsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<commentsScalarWhereInput>
  }

  export type favoritesArtworksUncheckedUpdateManyWithoutArtworksInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutArtworksInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<favoritesArtworksUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: favoritesArtworksCreateManyArtworksInputEnvelope
    set?: Enumerable<favoritesArtworksWhereUniqueInput>
    disconnect?: Enumerable<favoritesArtworksWhereUniqueInput>
    delete?: Enumerable<favoritesArtworksWhereUniqueInput>
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
    update?: Enumerable<favoritesArtworksUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<favoritesArtworksUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<favoritesArtworksScalarWhereInput>
  }

  export type artworksCreateNestedOneWithoutCommentsInput = {
    create?: XOR<artworksCreateWithoutCommentsInput, artworksUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutCommentsInput
    connect?: artworksWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutCommentsInput = {
    create?: XOR<usersCreateWithoutCommentsInput, usersUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCommentsInput
    connect?: usersWhereUniqueInput
  }

  export type artworksUpdateOneRequiredWithoutCommentsInput = {
    create?: XOR<artworksCreateWithoutCommentsInput, artworksUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutCommentsInput
    upsert?: artworksUpsertWithoutCommentsInput
    connect?: artworksWhereUniqueInput
    update?: XOR<artworksUpdateWithoutCommentsInput, artworksUncheckedUpdateWithoutCommentsInput>
  }

  export type usersUpdateOneRequiredWithoutCommentsInput = {
    create?: XOR<usersCreateWithoutCommentsInput, usersUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCommentsInput
    upsert?: usersUpsertWithoutCommentsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutCommentsInput, usersUncheckedUpdateWithoutCommentsInput>
  }

  export type artworksCreateNestedOneWithoutFavoritesArtworksInput = {
    create?: XOR<artworksCreateWithoutFavoritesArtworksInput, artworksUncheckedCreateWithoutFavoritesArtworksInput>
    connectOrCreate?: artworksCreateOrConnectWithoutFavoritesArtworksInput
    connect?: artworksWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutFavoritesArtworksInput = {
    create?: XOR<usersCreateWithoutFavoritesArtworksInput, usersUncheckedCreateWithoutFavoritesArtworksInput>
    connectOrCreate?: usersCreateOrConnectWithoutFavoritesArtworksInput
    connect?: usersWhereUniqueInput
  }

  export type artworksUpdateOneRequiredWithoutFavoritesArtworksInput = {
    create?: XOR<artworksCreateWithoutFavoritesArtworksInput, artworksUncheckedCreateWithoutFavoritesArtworksInput>
    connectOrCreate?: artworksCreateOrConnectWithoutFavoritesArtworksInput
    upsert?: artworksUpsertWithoutFavoritesArtworksInput
    connect?: artworksWhereUniqueInput
    update?: XOR<artworksUpdateWithoutFavoritesArtworksInput, artworksUncheckedUpdateWithoutFavoritesArtworksInput>
  }

  export type usersUpdateOneRequiredWithoutFavoritesArtworksInput = {
    create?: XOR<usersCreateWithoutFavoritesArtworksInput, usersUncheckedCreateWithoutFavoritesArtworksInput>
    connectOrCreate?: usersCreateOrConnectWithoutFavoritesArtworksInput
    upsert?: usersUpsertWithoutFavoritesArtworksInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutFavoritesArtworksInput, usersUncheckedUpdateWithoutFavoritesArtworksInput>
  }

  export type usersCreateNestedOneWithoutFollowers_followers_artistIdTousersInput = {
    create?: XOR<usersCreateWithoutFollowers_followers_artistIdTousersInput, usersUncheckedCreateWithoutFollowers_followers_artistIdTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutFollowers_followers_artistIdTousersInput
    connect?: usersWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutFollowers_followers_userIdTousersInput = {
    create?: XOR<usersCreateWithoutFollowers_followers_userIdTousersInput, usersUncheckedCreateWithoutFollowers_followers_userIdTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutFollowers_followers_userIdTousersInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutFollowers_followers_artistIdTousersInput = {
    create?: XOR<usersCreateWithoutFollowers_followers_artistIdTousersInput, usersUncheckedCreateWithoutFollowers_followers_artistIdTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutFollowers_followers_artistIdTousersInput
    upsert?: usersUpsertWithoutFollowers_followers_artistIdTousersInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutFollowers_followers_artistIdTousersInput, usersUncheckedUpdateWithoutFollowers_followers_artistIdTousersInput>
  }

  export type usersUpdateOneRequiredWithoutFollowers_followers_userIdTousersInput = {
    create?: XOR<usersCreateWithoutFollowers_followers_userIdTousersInput, usersUncheckedCreateWithoutFollowers_followers_userIdTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutFollowers_followers_userIdTousersInput
    upsert?: usersUpsertWithoutFollowers_followers_userIdTousersInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutFollowers_followers_userIdTousersInput, usersUncheckedUpdateWithoutFollowers_followers_userIdTousersInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type artworksCreateWithoutUsersInput = {
    title: string
    description: string
    imageUrl?: string | null
    publicationDate?: Date | string | null
    categories?: string | null
    comments?: commentsCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    description: string
    imageUrl?: string | null
    publicationDate?: Date | string | null
    categories?: string | null
    comments?: commentsUncheckedCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksCreateOrConnectWithoutUsersInput = {
    where: artworksWhereUniqueInput
    create: XOR<artworksCreateWithoutUsersInput, artworksUncheckedCreateWithoutUsersInput>
  }

  export type artworksCreateManyUsersInputEnvelope = {
    data: Enumerable<artworksCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type commentsCreateWithoutUsersInput = {
    comment: string
    postingDate?: Date | string | null
    artworks: artworksCreateNestedOneWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutUsersInput = {
    id?: number
    artworkId: number
    comment: string
    postingDate?: Date | string | null
  }

  export type commentsCreateOrConnectWithoutUsersInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutUsersInput, commentsUncheckedCreateWithoutUsersInput>
  }

  export type commentsCreateManyUsersInputEnvelope = {
    data: Enumerable<commentsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type favoritesArtworksCreateWithoutUsersInput = {
    createdDate?: Date | string | null
    artworks: artworksCreateNestedOneWithoutFavoritesArtworksInput
  }

  export type favoritesArtworksUncheckedCreateWithoutUsersInput = {
    id?: number
    artworkId: number
    createdDate?: Date | string | null
  }

  export type favoritesArtworksCreateOrConnectWithoutUsersInput = {
    where: favoritesArtworksWhereUniqueInput
    create: XOR<favoritesArtworksCreateWithoutUsersInput, favoritesArtworksUncheckedCreateWithoutUsersInput>
  }

  export type favoritesArtworksCreateManyUsersInputEnvelope = {
    data: Enumerable<favoritesArtworksCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type followersCreateWithoutUsers_followers_artistIdTousersInput = {
    createdDate?: Date | string | null
    users_followers_userIdTousers: usersCreateNestedOneWithoutFollowers_followers_userIdTousersInput
  }

  export type followersUncheckedCreateWithoutUsers_followers_artistIdTousersInput = {
    id?: number
    userId: number
    createdDate?: Date | string | null
  }

  export type followersCreateOrConnectWithoutUsers_followers_artistIdTousersInput = {
    where: followersWhereUniqueInput
    create: XOR<followersCreateWithoutUsers_followers_artistIdTousersInput, followersUncheckedCreateWithoutUsers_followers_artistIdTousersInput>
  }

  export type followersCreateManyUsers_followers_artistIdTousersInputEnvelope = {
    data: Enumerable<followersCreateManyUsers_followers_artistIdTousersInput>
    skipDuplicates?: boolean
  }

  export type followersCreateWithoutUsers_followers_userIdTousersInput = {
    createdDate?: Date | string | null
    users_followers_artistIdTousers: usersCreateNestedOneWithoutFollowers_followers_artistIdTousersInput
  }

  export type followersUncheckedCreateWithoutUsers_followers_userIdTousersInput = {
    id?: number
    artistId: number
    createdDate?: Date | string | null
  }

  export type followersCreateOrConnectWithoutUsers_followers_userIdTousersInput = {
    where: followersWhereUniqueInput
    create: XOR<followersCreateWithoutUsers_followers_userIdTousersInput, followersUncheckedCreateWithoutUsers_followers_userIdTousersInput>
  }

  export type followersCreateManyUsers_followers_userIdTousersInputEnvelope = {
    data: Enumerable<followersCreateManyUsers_followers_userIdTousersInput>
    skipDuplicates?: boolean
  }

  export type artworksUpsertWithWhereUniqueWithoutUsersInput = {
    where: artworksWhereUniqueInput
    update: XOR<artworksUpdateWithoutUsersInput, artworksUncheckedUpdateWithoutUsersInput>
    create: XOR<artworksCreateWithoutUsersInput, artworksUncheckedCreateWithoutUsersInput>
  }

  export type artworksUpdateWithWhereUniqueWithoutUsersInput = {
    where: artworksWhereUniqueInput
    data: XOR<artworksUpdateWithoutUsersInput, artworksUncheckedUpdateWithoutUsersInput>
  }

  export type artworksUpdateManyWithWhereWithoutUsersInput = {
    where: artworksScalarWhereInput
    data: XOR<artworksUpdateManyMutationInput, artworksUncheckedUpdateManyWithoutArtworksInput>
  }

  export type artworksScalarWhereInput = {
    AND?: Enumerable<artworksScalarWhereInput>
    OR?: Enumerable<artworksScalarWhereInput>
    NOT?: Enumerable<artworksScalarWhereInput>
    id?: IntFilter | number
    artistId?: IntFilter | number
    title?: StringFilter | string
    description?: StringFilter | string
    imageUrl?: StringNullableFilter | string | null
    publicationDate?: DateTimeNullableFilter | Date | string | null
    categories?: StringNullableFilter | string | null
  }

  export type commentsUpsertWithWhereUniqueWithoutUsersInput = {
    where: commentsWhereUniqueInput
    update: XOR<commentsUpdateWithoutUsersInput, commentsUncheckedUpdateWithoutUsersInput>
    create: XOR<commentsCreateWithoutUsersInput, commentsUncheckedCreateWithoutUsersInput>
  }

  export type commentsUpdateWithWhereUniqueWithoutUsersInput = {
    where: commentsWhereUniqueInput
    data: XOR<commentsUpdateWithoutUsersInput, commentsUncheckedUpdateWithoutUsersInput>
  }

  export type commentsUpdateManyWithWhereWithoutUsersInput = {
    where: commentsScalarWhereInput
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyWithoutCommentsInput>
  }

  export type commentsScalarWhereInput = {
    AND?: Enumerable<commentsScalarWhereInput>
    OR?: Enumerable<commentsScalarWhereInput>
    NOT?: Enumerable<commentsScalarWhereInput>
    id?: IntFilter | number
    artworkId?: IntFilter | number
    userId?: IntFilter | number
    comment?: StringFilter | string
    postingDate?: DateTimeNullableFilter | Date | string | null
  }

  export type favoritesArtworksUpsertWithWhereUniqueWithoutUsersInput = {
    where: favoritesArtworksWhereUniqueInput
    update: XOR<favoritesArtworksUpdateWithoutUsersInput, favoritesArtworksUncheckedUpdateWithoutUsersInput>
    create: XOR<favoritesArtworksCreateWithoutUsersInput, favoritesArtworksUncheckedCreateWithoutUsersInput>
  }

  export type favoritesArtworksUpdateWithWhereUniqueWithoutUsersInput = {
    where: favoritesArtworksWhereUniqueInput
    data: XOR<favoritesArtworksUpdateWithoutUsersInput, favoritesArtworksUncheckedUpdateWithoutUsersInput>
  }

  export type favoritesArtworksUpdateManyWithWhereWithoutUsersInput = {
    where: favoritesArtworksScalarWhereInput
    data: XOR<favoritesArtworksUpdateManyMutationInput, favoritesArtworksUncheckedUpdateManyWithoutFavoritesArtworksInput>
  }

  export type favoritesArtworksScalarWhereInput = {
    AND?: Enumerable<favoritesArtworksScalarWhereInput>
    OR?: Enumerable<favoritesArtworksScalarWhereInput>
    NOT?: Enumerable<favoritesArtworksScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    artworkId?: IntFilter | number
    createdDate?: DateTimeNullableFilter | Date | string | null
  }

  export type followersUpsertWithWhereUniqueWithoutUsers_followers_artistIdTousersInput = {
    where: followersWhereUniqueInput
    update: XOR<followersUpdateWithoutUsers_followers_artistIdTousersInput, followersUncheckedUpdateWithoutUsers_followers_artistIdTousersInput>
    create: XOR<followersCreateWithoutUsers_followers_artistIdTousersInput, followersUncheckedCreateWithoutUsers_followers_artistIdTousersInput>
  }

  export type followersUpdateWithWhereUniqueWithoutUsers_followers_artistIdTousersInput = {
    where: followersWhereUniqueInput
    data: XOR<followersUpdateWithoutUsers_followers_artistIdTousersInput, followersUncheckedUpdateWithoutUsers_followers_artistIdTousersInput>
  }

  export type followersUpdateManyWithWhereWithoutUsers_followers_artistIdTousersInput = {
    where: followersScalarWhereInput
    data: XOR<followersUpdateManyMutationInput, followersUncheckedUpdateManyWithoutFollowers_followers_artistIdTousersInput>
  }

  export type followersScalarWhereInput = {
    AND?: Enumerable<followersScalarWhereInput>
    OR?: Enumerable<followersScalarWhereInput>
    NOT?: Enumerable<followersScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    artistId?: IntFilter | number
    createdDate?: DateTimeNullableFilter | Date | string | null
  }

  export type followersUpsertWithWhereUniqueWithoutUsers_followers_userIdTousersInput = {
    where: followersWhereUniqueInput
    update: XOR<followersUpdateWithoutUsers_followers_userIdTousersInput, followersUncheckedUpdateWithoutUsers_followers_userIdTousersInput>
    create: XOR<followersCreateWithoutUsers_followers_userIdTousersInput, followersUncheckedCreateWithoutUsers_followers_userIdTousersInput>
  }

  export type followersUpdateWithWhereUniqueWithoutUsers_followers_userIdTousersInput = {
    where: followersWhereUniqueInput
    data: XOR<followersUpdateWithoutUsers_followers_userIdTousersInput, followersUncheckedUpdateWithoutUsers_followers_userIdTousersInput>
  }

  export type followersUpdateManyWithWhereWithoutUsers_followers_userIdTousersInput = {
    where: followersScalarWhereInput
    data: XOR<followersUpdateManyMutationInput, followersUncheckedUpdateManyWithoutFollowers_followers_userIdTousersInput>
  }

  export type usersCreateWithoutArtworksInput = {
    typeId?: number
    name: string
    email: string
    pass: string
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    comments?: commentsCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersCreateNestedManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersUncheckedCreateWithoutArtworksInput = {
    id?: number
    typeId?: number
    name: string
    email: string
    pass: string
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    comments?: commentsUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersCreateOrConnectWithoutArtworksInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutArtworksInput, usersUncheckedCreateWithoutArtworksInput>
  }

  export type commentsCreateWithoutArtworksInput = {
    comment: string
    postingDate?: Date | string | null
    users: usersCreateNestedOneWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutArtworksInput = {
    id?: number
    userId: number
    comment: string
    postingDate?: Date | string | null
  }

  export type commentsCreateOrConnectWithoutArtworksInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutArtworksInput, commentsUncheckedCreateWithoutArtworksInput>
  }

  export type commentsCreateManyArtworksInputEnvelope = {
    data: Enumerable<commentsCreateManyArtworksInput>
    skipDuplicates?: boolean
  }

  export type favoritesArtworksCreateWithoutArtworksInput = {
    createdDate?: Date | string | null
    users: usersCreateNestedOneWithoutFavoritesArtworksInput
  }

  export type favoritesArtworksUncheckedCreateWithoutArtworksInput = {
    id?: number
    userId: number
    createdDate?: Date | string | null
  }

  export type favoritesArtworksCreateOrConnectWithoutArtworksInput = {
    where: favoritesArtworksWhereUniqueInput
    create: XOR<favoritesArtworksCreateWithoutArtworksInput, favoritesArtworksUncheckedCreateWithoutArtworksInput>
  }

  export type favoritesArtworksCreateManyArtworksInputEnvelope = {
    data: Enumerable<favoritesArtworksCreateManyArtworksInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutArtworksInput = {
    update: XOR<usersUpdateWithoutArtworksInput, usersUncheckedUpdateWithoutArtworksInput>
    create: XOR<usersCreateWithoutArtworksInput, usersUncheckedCreateWithoutArtworksInput>
  }

  export type usersUpdateWithoutArtworksInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: commentsUpdateManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUpdateManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: commentsUncheckedUpdateManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersInput
  }

  export type commentsUpsertWithWhereUniqueWithoutArtworksInput = {
    where: commentsWhereUniqueInput
    update: XOR<commentsUpdateWithoutArtworksInput, commentsUncheckedUpdateWithoutArtworksInput>
    create: XOR<commentsCreateWithoutArtworksInput, commentsUncheckedCreateWithoutArtworksInput>
  }

  export type commentsUpdateWithWhereUniqueWithoutArtworksInput = {
    where: commentsWhereUniqueInput
    data: XOR<commentsUpdateWithoutArtworksInput, commentsUncheckedUpdateWithoutArtworksInput>
  }

  export type commentsUpdateManyWithWhereWithoutArtworksInput = {
    where: commentsScalarWhereInput
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyWithoutCommentsInput>
  }

  export type favoritesArtworksUpsertWithWhereUniqueWithoutArtworksInput = {
    where: favoritesArtworksWhereUniqueInput
    update: XOR<favoritesArtworksUpdateWithoutArtworksInput, favoritesArtworksUncheckedUpdateWithoutArtworksInput>
    create: XOR<favoritesArtworksCreateWithoutArtworksInput, favoritesArtworksUncheckedCreateWithoutArtworksInput>
  }

  export type favoritesArtworksUpdateWithWhereUniqueWithoutArtworksInput = {
    where: favoritesArtworksWhereUniqueInput
    data: XOR<favoritesArtworksUpdateWithoutArtworksInput, favoritesArtworksUncheckedUpdateWithoutArtworksInput>
  }

  export type favoritesArtworksUpdateManyWithWhereWithoutArtworksInput = {
    where: favoritesArtworksScalarWhereInput
    data: XOR<favoritesArtworksUpdateManyMutationInput, favoritesArtworksUncheckedUpdateManyWithoutFavoritesArtworksInput>
  }

  export type artworksCreateWithoutCommentsInput = {
    title: string
    description: string
    imageUrl?: string | null
    publicationDate?: Date | string | null
    categories?: string | null
    users: usersCreateNestedOneWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateWithoutCommentsInput = {
    id?: number
    artistId: number
    title: string
    description: string
    imageUrl?: string | null
    publicationDate?: Date | string | null
    categories?: string | null
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksCreateOrConnectWithoutCommentsInput = {
    where: artworksWhereUniqueInput
    create: XOR<artworksCreateWithoutCommentsInput, artworksUncheckedCreateWithoutCommentsInput>
  }

  export type usersCreateWithoutCommentsInput = {
    typeId?: number
    name: string
    email: string
    pass: string
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersCreateNestedManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersUncheckedCreateWithoutCommentsInput = {
    id?: number
    typeId?: number
    name: string
    email: string
    pass: string
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersCreateOrConnectWithoutCommentsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCommentsInput, usersUncheckedCreateWithoutCommentsInput>
  }

  export type artworksUpsertWithoutCommentsInput = {
    update: XOR<artworksUpdateWithoutCommentsInput, artworksUncheckedUpdateWithoutCommentsInput>
    create: XOR<artworksCreateWithoutCommentsInput, artworksUncheckedCreateWithoutCommentsInput>
  }

  export type artworksUpdateWithoutCommentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneRequiredWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutArtworksInput
  }

  export type artworksUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: NullableStringFieldUpdateOperationsInput | string | null
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutArtworksInput
  }

  export type usersUpsertWithoutCommentsInput = {
    update: XOR<usersUpdateWithoutCommentsInput, usersUncheckedUpdateWithoutCommentsInput>
    create: XOR<usersCreateWithoutCommentsInput, usersUncheckedCreateWithoutCommentsInput>
  }

  export type usersUpdateWithoutCommentsInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    artworks?: artworksUpdateManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUpdateManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersInput
  }

  export type artworksCreateWithoutFavoritesArtworksInput = {
    title: string
    description: string
    imageUrl?: string | null
    publicationDate?: Date | string | null
    categories?: string | null
    users: usersCreateNestedOneWithoutArtworksInput
    comments?: commentsCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateWithoutFavoritesArtworksInput = {
    id?: number
    artistId: number
    title: string
    description: string
    imageUrl?: string | null
    publicationDate?: Date | string | null
    categories?: string | null
    comments?: commentsUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksCreateOrConnectWithoutFavoritesArtworksInput = {
    where: artworksWhereUniqueInput
    create: XOR<artworksCreateWithoutFavoritesArtworksInput, artworksUncheckedCreateWithoutFavoritesArtworksInput>
  }

  export type usersCreateWithoutFavoritesArtworksInput = {
    typeId?: number
    name: string
    email: string
    pass: string
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    comments?: commentsCreateNestedManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersCreateNestedManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersUncheckedCreateWithoutFavoritesArtworksInput = {
    id?: number
    typeId?: number
    name: string
    email: string
    pass: string
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    comments?: commentsUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersCreateOrConnectWithoutFavoritesArtworksInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutFavoritesArtworksInput, usersUncheckedCreateWithoutFavoritesArtworksInput>
  }

  export type artworksUpsertWithoutFavoritesArtworksInput = {
    update: XOR<artworksUpdateWithoutFavoritesArtworksInput, artworksUncheckedUpdateWithoutFavoritesArtworksInput>
    create: XOR<artworksCreateWithoutFavoritesArtworksInput, artworksUncheckedCreateWithoutFavoritesArtworksInput>
  }

  export type artworksUpdateWithoutFavoritesArtworksInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneRequiredWithoutArtworksInput
    comments?: commentsUpdateManyWithoutArtworksInput
  }

  export type artworksUncheckedUpdateWithoutFavoritesArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: commentsUncheckedUpdateManyWithoutArtworksInput
  }

  export type usersUpsertWithoutFavoritesArtworksInput = {
    update: XOR<usersUpdateWithoutFavoritesArtworksInput, usersUncheckedUpdateWithoutFavoritesArtworksInput>
    create: XOR<usersCreateWithoutFavoritesArtworksInput, usersUncheckedCreateWithoutFavoritesArtworksInput>
  }

  export type usersUpdateWithoutFavoritesArtworksInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    artworks?: artworksUpdateManyWithoutUsersInput
    comments?: commentsUpdateManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUpdateManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersUncheckedUpdateWithoutFavoritesArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersInput
    comments?: commentsUncheckedUpdateManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_artistIdTousersInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersCreateWithoutFollowers_followers_artistIdTousersInput = {
    typeId?: number
    name: string
    email: string
    pass: string
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    comments?: commentsCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersUncheckedCreateWithoutFollowers_followers_artistIdTousersInput = {
    id?: number
    typeId?: number
    name: string
    email: string
    pass: string
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    comments?: commentsUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersCreateOrConnectWithoutFollowers_followers_artistIdTousersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutFollowers_followers_artistIdTousersInput, usersUncheckedCreateWithoutFollowers_followers_artistIdTousersInput>
  }

  export type usersCreateWithoutFollowers_followers_userIdTousersInput = {
    typeId?: number
    name: string
    email: string
    pass: string
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    comments?: commentsCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersCreateNestedManyWithoutUsers_followers_artistIdTousersInput
  }

  export type usersUncheckedCreateWithoutFollowers_followers_userIdTousersInput = {
    id?: number
    typeId?: number
    name: string
    email: string
    pass: string
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    comments?: commentsUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_artistIdTousersInput
  }

  export type usersCreateOrConnectWithoutFollowers_followers_userIdTousersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutFollowers_followers_userIdTousersInput, usersUncheckedCreateWithoutFollowers_followers_userIdTousersInput>
  }

  export type usersUpsertWithoutFollowers_followers_artistIdTousersInput = {
    update: XOR<usersUpdateWithoutFollowers_followers_artistIdTousersInput, usersUncheckedUpdateWithoutFollowers_followers_artistIdTousersInput>
    create: XOR<usersCreateWithoutFollowers_followers_artistIdTousersInput, usersUncheckedCreateWithoutFollowers_followers_artistIdTousersInput>
  }

  export type usersUpdateWithoutFollowers_followers_artistIdTousersInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    artworks?: artworksUpdateManyWithoutUsersInput
    comments?: commentsUpdateManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersUncheckedUpdateWithoutFollowers_followers_artistIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersInput
    comments?: commentsUncheckedUpdateManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersInput
  }

  export type usersUpsertWithoutFollowers_followers_userIdTousersInput = {
    update: XOR<usersUpdateWithoutFollowers_followers_userIdTousersInput, usersUncheckedUpdateWithoutFollowers_followers_userIdTousersInput>
    create: XOR<usersCreateWithoutFollowers_followers_userIdTousersInput, usersUncheckedCreateWithoutFollowers_followers_userIdTousersInput>
  }

  export type usersUpdateWithoutFollowers_followers_userIdTousersInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    artworks?: artworksUpdateManyWithoutUsersInput
    comments?: commentsUpdateManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUpdateManyWithoutUsers_followers_artistIdTousersInput
  }

  export type usersUncheckedUpdateWithoutFollowers_followers_userIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersInput
    comments?: commentsUncheckedUpdateManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersInput
    followers_followers_artistIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_artistIdTousersInput
  }

  export type artworksCreateManyUsersInput = {
    id?: number
    title: string
    description: string
    imageUrl?: string | null
    publicationDate?: Date | string | null
    categories?: string | null
  }

  export type commentsCreateManyUsersInput = {
    id?: number
    artworkId: number
    comment: string
    postingDate?: Date | string | null
  }

  export type favoritesArtworksCreateManyUsersInput = {
    id?: number
    artworkId: number
    createdDate?: Date | string | null
  }

  export type followersCreateManyUsers_followers_artistIdTousersInput = {
    id?: number
    userId: number
    createdDate?: Date | string | null
  }

  export type followersCreateManyUsers_followers_userIdTousersInput = {
    id?: number
    artistId: number
    createdDate?: Date | string | null
  }

  export type artworksUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: commentsUpdateManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutArtworksInput
  }

  export type artworksUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: commentsUncheckedUpdateManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutArtworksInput
  }

  export type artworksUncheckedUpdateManyWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    publicationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commentsUpdateWithoutUsersInput = {
    comment?: StringFieldUpdateOperationsInput | string
    postingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    artworks?: artworksUpdateOneRequiredWithoutCommentsInput
  }

  export type commentsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    postingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentsUncheckedUpdateManyWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    postingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type favoritesArtworksUpdateWithoutUsersInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    artworks?: artworksUpdateOneRequiredWithoutFavoritesArtworksInput
  }

  export type favoritesArtworksUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type favoritesArtworksUncheckedUpdateManyWithoutFavoritesArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followersUpdateWithoutUsers_followers_artistIdTousersInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_followers_userIdTousers?: usersUpdateOneRequiredWithoutFollowers_followers_userIdTousersInput
  }

  export type followersUncheckedUpdateWithoutUsers_followers_artistIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followersUncheckedUpdateManyWithoutFollowers_followers_artistIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followersUpdateWithoutUsers_followers_userIdTousersInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_followers_artistIdTousers?: usersUpdateOneRequiredWithoutFollowers_followers_artistIdTousersInput
  }

  export type followersUncheckedUpdateWithoutUsers_followers_userIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followersUncheckedUpdateManyWithoutFollowers_followers_userIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentsCreateManyArtworksInput = {
    id?: number
    userId: number
    comment: string
    postingDate?: Date | string | null
  }

  export type favoritesArtworksCreateManyArtworksInput = {
    id?: number
    userId: number
    createdDate?: Date | string | null
  }

  export type commentsUpdateWithoutArtworksInput = {
    comment?: StringFieldUpdateOperationsInput | string
    postingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutCommentsInput
  }

  export type commentsUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    postingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type favoritesArtworksUpdateWithoutArtworksInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutFavoritesArtworksInput
  }

  export type favoritesArtworksUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}