
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model users
 * 
 */
export type users = {
  id: number
  typeId: number
  firstName: string
  lastName: string
  email: string
  pass: string
  phone: string | null
  gender: string | null
  birthdate: Date | null
  address: string | null
  contact: string | null
  photoUrl: string | null
  googleUid: string | null
  facebookUid: string | null
  firebaseToken: string | null
  createdDate: Date | null
  deletedDate: Date | null
  isDeleted: boolean | null
}

/**
 * Model artworks
 * 
 */
export type artworks = {
  id: number
  artistId: number
  title: string
  description: string | null
  imageUrl: string | null
  minWorkingHours: number | null
  maxWorkingHours: number | null
  minPrice: number | null
  maxPrice: number | null
  minHeight: number | null
  maxHeight: number | null
  minWidth: number | null
  maxWidth: number | null
  createdDate: Date | null
  deletedDate: Date | null
  isDeleted: boolean | null
}

/**
 * Model comments
 * 
 */
export type comments = {
  id: number
  commentatorId: number
  comment: string
  userId: number | null
  artworkId: number | null
  commentId: number | null
  createdDate: Date | null
}

/**
 * Model favoritesArtworks
 * 
 */
export type favoritesArtworks = {
  id: number
  userId: number
  artworkId: number
  createdDate: Date | null
}

/**
 * Model followers
 * 
 */
export type followers = {
  id: number
  followerId: number
  userId: number
  createdDate: Date | null
}

/**
 * Model collections
 * 
 */
export type collections = {
  id: number
  userId: number
  name: string
  imageUrl: string | null
  createdDate: Date | null
}

/**
 * Model commentsLikes
 * 
 */
export type commentsLikes = {
  id: number
  commentId: number
  userId: number
  positive: boolean | null
}

/**
 * Model artworksAddresses
 * 
 */
export type artworksAddresses = {
  id: number
  artworkId: number
  address: string | null
}

/**
 * Model artworksCollaborators
 * 
 */
export type artworksCollaborators = {
  id: number
  artistId: number
  artworkId: number
}

/**
 * Model artworksColors
 * 
 */
export type artworksColors = {
  id: number
  artworkId: number
  color: string
}

/**
 * Model artworksMaterials
 * 
 */
export type artworksMaterials = {
  id: number
  artworkId: number
  material: string
}

/**
 * Model artworksMovements
 * 
 */
export type artworksMovements = {
  id: number
  artworkId: number
  movement: string
}

/**
 * Model artworksTags
 * 
 */
export type artworksTags = {
  id: number
  artworkId: number
  tag: string | null
}

/**
 * Model notifications
 * 
 */
export type notifications = {
  id: number
  userId: number
  typeId: number
  title: string | null
  content: string | null
  link: string | null
  createdDate: Date | null
  viewed: boolean | null
}

/**
 * Model usersRatings
 * 
 */
export type usersRatings = {
  id: number
  userId: number
  qualifierId: number
  rating: number | null
}

/**
 * Model artworkCollections
 * 
 */
export type artworkCollections = {
  id: number
  collectionId: number
  artworkId: number
}

/**
 * Model reports
 * 
 */
export type reports = {
  id: number
  reporterId: number
  description: string
  userId: number | null
  artworkId: number | null
  commentId: number | null
  createdDate: Date | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.artworks`: Exposes CRUD operations for the **artworks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Artworks
    * const artworks = await prisma.artworks.findMany()
    * ```
    */
  get artworks(): Prisma.artworksDelegate<GlobalReject>;

  /**
   * `prisma.comments`: Exposes CRUD operations for the **comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comments.findMany()
    * ```
    */
  get comments(): Prisma.commentsDelegate<GlobalReject>;

  /**
   * `prisma.favoritesArtworks`: Exposes CRUD operations for the **favoritesArtworks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavoritesArtworks
    * const favoritesArtworks = await prisma.favoritesArtworks.findMany()
    * ```
    */
  get favoritesArtworks(): Prisma.favoritesArtworksDelegate<GlobalReject>;

  /**
   * `prisma.followers`: Exposes CRUD operations for the **followers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Followers
    * const followers = await prisma.followers.findMany()
    * ```
    */
  get followers(): Prisma.followersDelegate<GlobalReject>;

  /**
   * `prisma.collections`: Exposes CRUD operations for the **collections** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Collections
    * const collections = await prisma.collections.findMany()
    * ```
    */
  get collections(): Prisma.collectionsDelegate<GlobalReject>;

  /**
   * `prisma.commentsLikes`: Exposes CRUD operations for the **commentsLikes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommentsLikes
    * const commentsLikes = await prisma.commentsLikes.findMany()
    * ```
    */
  get commentsLikes(): Prisma.commentsLikesDelegate<GlobalReject>;

  /**
   * `prisma.artworksAddresses`: Exposes CRUD operations for the **artworksAddresses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArtworksAddresses
    * const artworksAddresses = await prisma.artworksAddresses.findMany()
    * ```
    */
  get artworksAddresses(): Prisma.artworksAddressesDelegate<GlobalReject>;

  /**
   * `prisma.artworksCollaborators`: Exposes CRUD operations for the **artworksCollaborators** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArtworksCollaborators
    * const artworksCollaborators = await prisma.artworksCollaborators.findMany()
    * ```
    */
  get artworksCollaborators(): Prisma.artworksCollaboratorsDelegate<GlobalReject>;

  /**
   * `prisma.artworksColors`: Exposes CRUD operations for the **artworksColors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArtworksColors
    * const artworksColors = await prisma.artworksColors.findMany()
    * ```
    */
  get artworksColors(): Prisma.artworksColorsDelegate<GlobalReject>;

  /**
   * `prisma.artworksMaterials`: Exposes CRUD operations for the **artworksMaterials** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArtworksMaterials
    * const artworksMaterials = await prisma.artworksMaterials.findMany()
    * ```
    */
  get artworksMaterials(): Prisma.artworksMaterialsDelegate<GlobalReject>;

  /**
   * `prisma.artworksMovements`: Exposes CRUD operations for the **artworksMovements** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArtworksMovements
    * const artworksMovements = await prisma.artworksMovements.findMany()
    * ```
    */
  get artworksMovements(): Prisma.artworksMovementsDelegate<GlobalReject>;

  /**
   * `prisma.artworksTags`: Exposes CRUD operations for the **artworksTags** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArtworksTags
    * const artworksTags = await prisma.artworksTags.findMany()
    * ```
    */
  get artworksTags(): Prisma.artworksTagsDelegate<GlobalReject>;

  /**
   * `prisma.notifications`: Exposes CRUD operations for the **notifications** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notifications.findMany()
    * ```
    */
  get notifications(): Prisma.notificationsDelegate<GlobalReject>;

  /**
   * `prisma.usersRatings`: Exposes CRUD operations for the **usersRatings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsersRatings
    * const usersRatings = await prisma.usersRatings.findMany()
    * ```
    */
  get usersRatings(): Prisma.usersRatingsDelegate<GlobalReject>;

  /**
   * `prisma.artworkCollections`: Exposes CRUD operations for the **artworkCollections** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArtworkCollections
    * const artworkCollections = await prisma.artworkCollections.findMany()
    * ```
    */
  get artworkCollections(): Prisma.artworkCollectionsDelegate<GlobalReject>;

  /**
   * `prisma.reports`: Exposes CRUD operations for the **reports** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.reports.findMany()
    * ```
    */
  get reports(): Prisma.reportsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.6.1
   * Query Engine version: 694eea289a8462c80264df36757e4fdc129b1b32
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    users: 'users',
    artworks: 'artworks',
    comments: 'comments',
    favoritesArtworks: 'favoritesArtworks',
    followers: 'followers',
    collections: 'collections',
    commentsLikes: 'commentsLikes',
    artworksAddresses: 'artworksAddresses',
    artworksCollaborators: 'artworksCollaborators',
    artworksColors: 'artworksColors',
    artworksMaterials: 'artworksMaterials',
    artworksMovements: 'artworksMovements',
    artworksTags: 'artworksTags',
    notifications: 'notifications',
    usersRatings: 'usersRatings',
    artworkCollections: 'artworkCollections',
    reports: 'reports'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    artworks: number
    artworksCollaborators: number
    collections: number
    comments_comments_commentatorIdTousers: number
    comments_commentsTousers: number
    commentsLikes: number
    favoritesArtworks: number
    followers: number
    followers_followers_userIdTousers: number
    notifications: number
    reports_reports_reporterIdTousers: number
    reports_reports_userIdTousers: number
    usersRatings_usersTousersRatings_userId: number
    usersRatings_usersTousersRatings_qualifierId: number
  }

  export type UsersCountOutputTypeSelect = {
    artworks?: boolean
    artworksCollaborators?: boolean
    collections?: boolean
    comments_comments_commentatorIdTousers?: boolean
    comments_commentsTousers?: boolean
    commentsLikes?: boolean
    favoritesArtworks?: boolean
    followers?: boolean
    followers_followers_userIdTousers?: boolean
    notifications?: boolean
    reports_reports_reporterIdTousers?: boolean
    reports_reports_userIdTousers?: boolean
    usersRatings_usersTousersRatings_userId?: boolean
    usersRatings_usersTousersRatings_qualifierId?: boolean
  }

  export type UsersCountOutputTypeGetPayload<S extends boolean | null | undefined | UsersCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsersCountOutputTypeArgs)
    ? UsersCountOutputType 
    : S extends { select: any } & (UsersCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
      : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Count Type ArtworksCountOutputType
   */


  export type ArtworksCountOutputType = {
    artworkCollections: number
    artworksAddresses: number
    artworksCollaborators: number
    artworksColors: number
    artworksMaterials: number
    artworksMovements: number
    artworksTags: number
    comments: number
    favoritesArtworks: number
    reports: number
  }

  export type ArtworksCountOutputTypeSelect = {
    artworkCollections?: boolean
    artworksAddresses?: boolean
    artworksCollaborators?: boolean
    artworksColors?: boolean
    artworksMaterials?: boolean
    artworksMovements?: boolean
    artworksTags?: boolean
    comments?: boolean
    favoritesArtworks?: boolean
    reports?: boolean
  }

  export type ArtworksCountOutputTypeGetPayload<S extends boolean | null | undefined | ArtworksCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ArtworksCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ArtworksCountOutputTypeArgs)
    ? ArtworksCountOutputType 
    : S extends { select: any } & (ArtworksCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ArtworksCountOutputType ? ArtworksCountOutputType[P] : never
  } 
      : ArtworksCountOutputType




  // Custom InputTypes

  /**
   * ArtworksCountOutputType without action
   */
  export type ArtworksCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ArtworksCountOutputType
     * 
    **/
    select?: ArtworksCountOutputTypeSelect | null
  }



  /**
   * Count Type CommentsCountOutputType
   */


  export type CommentsCountOutputType = {
    other_comments: number
    commentsLikes: number
    reports: number
  }

  export type CommentsCountOutputTypeSelect = {
    other_comments?: boolean
    commentsLikes?: boolean
    reports?: boolean
  }

  export type CommentsCountOutputTypeGetPayload<S extends boolean | null | undefined | CommentsCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CommentsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CommentsCountOutputTypeArgs)
    ? CommentsCountOutputType 
    : S extends { select: any } & (CommentsCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CommentsCountOutputType ? CommentsCountOutputType[P] : never
  } 
      : CommentsCountOutputType




  // Custom InputTypes

  /**
   * CommentsCountOutputType without action
   */
  export type CommentsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CommentsCountOutputType
     * 
    **/
    select?: CommentsCountOutputTypeSelect | null
  }



  /**
   * Count Type CollectionsCountOutputType
   */


  export type CollectionsCountOutputType = {
    artworkCollections: number
  }

  export type CollectionsCountOutputTypeSelect = {
    artworkCollections?: boolean
  }

  export type CollectionsCountOutputTypeGetPayload<S extends boolean | null | undefined | CollectionsCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CollectionsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CollectionsCountOutputTypeArgs)
    ? CollectionsCountOutputType 
    : S extends { select: any } & (CollectionsCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CollectionsCountOutputType ? CollectionsCountOutputType[P] : never
  } 
      : CollectionsCountOutputType




  // Custom InputTypes

  /**
   * CollectionsCountOutputType without action
   */
  export type CollectionsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CollectionsCountOutputType
     * 
    **/
    select?: CollectionsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    typeId: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    typeId: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    typeId: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    pass: string | null
    phone: string | null
    gender: string | null
    birthdate: Date | null
    address: string | null
    contact: string | null
    photoUrl: string | null
    googleUid: string | null
    facebookUid: string | null
    firebaseToken: string | null
    createdDate: Date | null
    deletedDate: Date | null
    isDeleted: boolean | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    typeId: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    pass: string | null
    phone: string | null
    gender: string | null
    birthdate: Date | null
    address: string | null
    contact: string | null
    photoUrl: string | null
    googleUid: string | null
    facebookUid: string | null
    firebaseToken: string | null
    createdDate: Date | null
    deletedDate: Date | null
    isDeleted: boolean | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    typeId: number
    firstName: number
    lastName: number
    email: number
    pass: number
    phone: number
    gender: number
    birthdate: number
    address: number
    contact: number
    photoUrl: number
    googleUid: number
    facebookUid: number
    firebaseToken: number
    createdDate: number
    deletedDate: number
    isDeleted: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    typeId?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    typeId?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    typeId?: true
    firstName?: true
    lastName?: true
    email?: true
    pass?: true
    phone?: true
    gender?: true
    birthdate?: true
    address?: true
    contact?: true
    photoUrl?: true
    googleUid?: true
    facebookUid?: true
    firebaseToken?: true
    createdDate?: true
    deletedDate?: true
    isDeleted?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    typeId?: true
    firstName?: true
    lastName?: true
    email?: true
    pass?: true
    phone?: true
    gender?: true
    birthdate?: true
    address?: true
    contact?: true
    photoUrl?: true
    googleUid?: true
    facebookUid?: true
    firebaseToken?: true
    createdDate?: true
    deletedDate?: true
    isDeleted?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    typeId?: true
    firstName?: true
    lastName?: true
    email?: true
    pass?: true
    phone?: true
    gender?: true
    birthdate?: true
    address?: true
    contact?: true
    photoUrl?: true
    googleUid?: true
    facebookUid?: true
    firebaseToken?: true
    createdDate?: true
    deletedDate?: true
    isDeleted?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    typeId: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone: string | null
    gender: string | null
    birthdate: Date | null
    address: string | null
    contact: string | null
    photoUrl: string | null
    googleUid: string | null
    facebookUid: string | null
    firebaseToken: string | null
    createdDate: Date | null
    deletedDate: Date | null
    isDeleted: boolean | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    typeId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    pass?: boolean
    phone?: boolean
    gender?: boolean
    birthdate?: boolean
    address?: boolean
    contact?: boolean
    photoUrl?: boolean
    googleUid?: boolean
    facebookUid?: boolean
    firebaseToken?: boolean
    createdDate?: boolean
    deletedDate?: boolean
    isDeleted?: boolean
    artworks?: boolean | artworksFindManyArgs
    artworksCollaborators?: boolean | artworksCollaboratorsFindManyArgs
    collections?: boolean | collectionsFindManyArgs
    comments_comments_commentatorIdTousers?: boolean | commentsFindManyArgs
    comments_commentsTousers?: boolean | commentsFindManyArgs
    commentsLikes?: boolean | commentsLikesFindManyArgs
    favoritesArtworks?: boolean | favoritesArtworksFindManyArgs
    followers?: boolean | followersFindManyArgs
    followers_followers_userIdTousers?: boolean | followersFindManyArgs
    notifications?: boolean | notificationsFindManyArgs
    reports_reports_reporterIdTousers?: boolean | reportsFindManyArgs
    reports_reports_userIdTousers?: boolean | reportsFindManyArgs
    usersRatings_usersTousersRatings_userId?: boolean | usersRatingsFindManyArgs
    usersRatings_usersTousersRatings_qualifierId?: boolean | usersRatingsFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }


  export type usersInclude = {
    artworks?: boolean | artworksFindManyArgs
    artworksCollaborators?: boolean | artworksCollaboratorsFindManyArgs
    collections?: boolean | collectionsFindManyArgs
    comments_comments_commentatorIdTousers?: boolean | commentsFindManyArgs
    comments_commentsTousers?: boolean | commentsFindManyArgs
    commentsLikes?: boolean | commentsLikesFindManyArgs
    favoritesArtworks?: boolean | favoritesArtworksFindManyArgs
    followers?: boolean | followersFindManyArgs
    followers_followers_userIdTousers?: boolean | followersFindManyArgs
    notifications?: boolean | notificationsFindManyArgs
    reports_reports_reporterIdTousers?: boolean | reportsFindManyArgs
    reports_reports_userIdTousers?: boolean | reportsFindManyArgs
    usersRatings_usersTousersRatings_userId?: boolean | usersRatingsFindManyArgs
    usersRatings_usersTousersRatings_qualifierId?: boolean | usersRatingsFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  } 

  export type usersGetPayload<S extends boolean | null | undefined | usersArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? users :
    S extends undefined ? never :
    S extends { include: any } & (usersArgs | usersFindManyArgs)
    ? users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'artworks' ? Array < artworksGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'artworksCollaborators' ? Array < artworksCollaboratorsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'collections' ? Array < collectionsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'comments_comments_commentatorIdTousers' ? Array < commentsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'comments_commentsTousers' ? Array < commentsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'commentsLikes' ? Array < commentsLikesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'favoritesArtworks' ? Array < favoritesArtworksGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'followers' ? Array < followersGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'followers_followers_userIdTousers' ? Array < followersGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'notifications' ? Array < notificationsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'reports_reports_reporterIdTousers' ? Array < reportsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'reports_reports_userIdTousers' ? Array < reportsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'usersRatings_usersTousersRatings_userId' ? Array < usersRatingsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'usersRatings_usersTousersRatings_qualifierId' ? Array < usersRatingsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (usersArgs | usersFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'artworks' ? Array < artworksGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'artworksCollaborators' ? Array < artworksCollaboratorsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'collections' ? Array < collectionsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'comments_comments_commentatorIdTousers' ? Array < commentsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'comments_commentsTousers' ? Array < commentsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'commentsLikes' ? Array < commentsLikesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'favoritesArtworks' ? Array < favoritesArtworksGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'followers' ? Array < followersGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'followers_followers_userIdTousers' ? Array < followersGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'notifications' ? Array < notificationsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'reports_reports_reporterIdTousers' ? Array < reportsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'reports_reports_userIdTousers' ? Array < reportsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'usersRatings_usersTousersRatings_userId' ? Array < usersRatingsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'usersRatings_usersTousersRatings_qualifierId' ? Array < usersRatingsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof users ? users[P] : never
  } 
      : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): PrismaPromise<Array<usersGetPayload<T>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find one Users that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    artworks<T extends artworksFindManyArgs= {}>(args?: Subset<T, artworksFindManyArgs>): PrismaPromise<Array<artworksGetPayload<T>>| Null>;

    artworksCollaborators<T extends artworksCollaboratorsFindManyArgs= {}>(args?: Subset<T, artworksCollaboratorsFindManyArgs>): PrismaPromise<Array<artworksCollaboratorsGetPayload<T>>| Null>;

    collections<T extends collectionsFindManyArgs= {}>(args?: Subset<T, collectionsFindManyArgs>): PrismaPromise<Array<collectionsGetPayload<T>>| Null>;

    comments_comments_commentatorIdTousers<T extends commentsFindManyArgs= {}>(args?: Subset<T, commentsFindManyArgs>): PrismaPromise<Array<commentsGetPayload<T>>| Null>;

    comments_commentsTousers<T extends commentsFindManyArgs= {}>(args?: Subset<T, commentsFindManyArgs>): PrismaPromise<Array<commentsGetPayload<T>>| Null>;

    commentsLikes<T extends commentsLikesFindManyArgs= {}>(args?: Subset<T, commentsLikesFindManyArgs>): PrismaPromise<Array<commentsLikesGetPayload<T>>| Null>;

    favoritesArtworks<T extends favoritesArtworksFindManyArgs= {}>(args?: Subset<T, favoritesArtworksFindManyArgs>): PrismaPromise<Array<favoritesArtworksGetPayload<T>>| Null>;

    followers<T extends followersFindManyArgs= {}>(args?: Subset<T, followersFindManyArgs>): PrismaPromise<Array<followersGetPayload<T>>| Null>;

    followers_followers_userIdTousers<T extends followersFindManyArgs= {}>(args?: Subset<T, followersFindManyArgs>): PrismaPromise<Array<followersGetPayload<T>>| Null>;

    notifications<T extends notificationsFindManyArgs= {}>(args?: Subset<T, notificationsFindManyArgs>): PrismaPromise<Array<notificationsGetPayload<T>>| Null>;

    reports_reports_reporterIdTousers<T extends reportsFindManyArgs= {}>(args?: Subset<T, reportsFindManyArgs>): PrismaPromise<Array<reportsGetPayload<T>>| Null>;

    reports_reports_userIdTousers<T extends reportsFindManyArgs= {}>(args?: Subset<T, reportsFindManyArgs>): PrismaPromise<Array<reportsGetPayload<T>>| Null>;

    usersRatings_usersTousersRatings_userId<T extends usersRatingsFindManyArgs= {}>(args?: Subset<T, usersRatingsFindManyArgs>): PrismaPromise<Array<usersRatingsGetPayload<T>>| Null>;

    usersRatings_usersTousersRatings_qualifierId<T extends usersRatingsFindManyArgs= {}>(args?: Subset<T, usersRatingsFindManyArgs>): PrismaPromise<Array<usersRatingsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }

  /**
   * users: findUnique
   */
  export interface usersFindUniqueArgs extends usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users: findFirst
   */
  export interface usersFindFirstArgs extends usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users: findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs = usersFindUniqueArgsBase
      

  /**
   * users: findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs = usersFindFirstArgsBase
      

  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Model artworks
   */


  export type AggregateArtworks = {
    _count: ArtworksCountAggregateOutputType | null
    _avg: ArtworksAvgAggregateOutputType | null
    _sum: ArtworksSumAggregateOutputType | null
    _min: ArtworksMinAggregateOutputType | null
    _max: ArtworksMaxAggregateOutputType | null
  }

  export type ArtworksAvgAggregateOutputType = {
    id: number | null
    artistId: number | null
    minWorkingHours: number | null
    maxWorkingHours: number | null
    minPrice: number | null
    maxPrice: number | null
    minHeight: number | null
    maxHeight: number | null
    minWidth: number | null
    maxWidth: number | null
  }

  export type ArtworksSumAggregateOutputType = {
    id: number | null
    artistId: number | null
    minWorkingHours: number | null
    maxWorkingHours: number | null
    minPrice: number | null
    maxPrice: number | null
    minHeight: number | null
    maxHeight: number | null
    minWidth: number | null
    maxWidth: number | null
  }

  export type ArtworksMinAggregateOutputType = {
    id: number | null
    artistId: number | null
    title: string | null
    description: string | null
    imageUrl: string | null
    minWorkingHours: number | null
    maxWorkingHours: number | null
    minPrice: number | null
    maxPrice: number | null
    minHeight: number | null
    maxHeight: number | null
    minWidth: number | null
    maxWidth: number | null
    createdDate: Date | null
    deletedDate: Date | null
    isDeleted: boolean | null
  }

  export type ArtworksMaxAggregateOutputType = {
    id: number | null
    artistId: number | null
    title: string | null
    description: string | null
    imageUrl: string | null
    minWorkingHours: number | null
    maxWorkingHours: number | null
    minPrice: number | null
    maxPrice: number | null
    minHeight: number | null
    maxHeight: number | null
    minWidth: number | null
    maxWidth: number | null
    createdDate: Date | null
    deletedDate: Date | null
    isDeleted: boolean | null
  }

  export type ArtworksCountAggregateOutputType = {
    id: number
    artistId: number
    title: number
    description: number
    imageUrl: number
    minWorkingHours: number
    maxWorkingHours: number
    minPrice: number
    maxPrice: number
    minHeight: number
    maxHeight: number
    minWidth: number
    maxWidth: number
    createdDate: number
    deletedDate: number
    isDeleted: number
    _all: number
  }


  export type ArtworksAvgAggregateInputType = {
    id?: true
    artistId?: true
    minWorkingHours?: true
    maxWorkingHours?: true
    minPrice?: true
    maxPrice?: true
    minHeight?: true
    maxHeight?: true
    minWidth?: true
    maxWidth?: true
  }

  export type ArtworksSumAggregateInputType = {
    id?: true
    artistId?: true
    minWorkingHours?: true
    maxWorkingHours?: true
    minPrice?: true
    maxPrice?: true
    minHeight?: true
    maxHeight?: true
    minWidth?: true
    maxWidth?: true
  }

  export type ArtworksMinAggregateInputType = {
    id?: true
    artistId?: true
    title?: true
    description?: true
    imageUrl?: true
    minWorkingHours?: true
    maxWorkingHours?: true
    minPrice?: true
    maxPrice?: true
    minHeight?: true
    maxHeight?: true
    minWidth?: true
    maxWidth?: true
    createdDate?: true
    deletedDate?: true
    isDeleted?: true
  }

  export type ArtworksMaxAggregateInputType = {
    id?: true
    artistId?: true
    title?: true
    description?: true
    imageUrl?: true
    minWorkingHours?: true
    maxWorkingHours?: true
    minPrice?: true
    maxPrice?: true
    minHeight?: true
    maxHeight?: true
    minWidth?: true
    maxWidth?: true
    createdDate?: true
    deletedDate?: true
    isDeleted?: true
  }

  export type ArtworksCountAggregateInputType = {
    id?: true
    artistId?: true
    title?: true
    description?: true
    imageUrl?: true
    minWorkingHours?: true
    maxWorkingHours?: true
    minPrice?: true
    maxPrice?: true
    minHeight?: true
    maxHeight?: true
    minWidth?: true
    maxWidth?: true
    createdDate?: true
    deletedDate?: true
    isDeleted?: true
    _all?: true
  }

  export type ArtworksAggregateArgs = {
    /**
     * Filter which artworks to aggregate.
     * 
    **/
    where?: artworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworks to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: artworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned artworks
    **/
    _count?: true | ArtworksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtworksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtworksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtworksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtworksMaxAggregateInputType
  }

  export type GetArtworksAggregateType<T extends ArtworksAggregateArgs> = {
        [P in keyof T & keyof AggregateArtworks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtworks[P]>
      : GetScalarType<T[P], AggregateArtworks[P]>
  }




  export type ArtworksGroupByArgs = {
    where?: artworksWhereInput
    orderBy?: Enumerable<artworksOrderByWithAggregationInput>
    by: Array<ArtworksScalarFieldEnum>
    having?: artworksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtworksCountAggregateInputType | true
    _avg?: ArtworksAvgAggregateInputType
    _sum?: ArtworksSumAggregateInputType
    _min?: ArtworksMinAggregateInputType
    _max?: ArtworksMaxAggregateInputType
  }


  export type ArtworksGroupByOutputType = {
    id: number
    artistId: number
    title: string
    description: string | null
    imageUrl: string | null
    minWorkingHours: number | null
    maxWorkingHours: number | null
    minPrice: number | null
    maxPrice: number | null
    minHeight: number | null
    maxHeight: number | null
    minWidth: number | null
    maxWidth: number | null
    createdDate: Date | null
    deletedDate: Date | null
    isDeleted: boolean | null
    _count: ArtworksCountAggregateOutputType | null
    _avg: ArtworksAvgAggregateOutputType | null
    _sum: ArtworksSumAggregateOutputType | null
    _min: ArtworksMinAggregateOutputType | null
    _max: ArtworksMaxAggregateOutputType | null
  }

  type GetArtworksGroupByPayload<T extends ArtworksGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ArtworksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtworksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtworksGroupByOutputType[P]>
            : GetScalarType<T[P], ArtworksGroupByOutputType[P]>
        }
      >
    >


  export type artworksSelect = {
    id?: boolean
    artistId?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    minWorkingHours?: boolean
    maxWorkingHours?: boolean
    minPrice?: boolean
    maxPrice?: boolean
    minHeight?: boolean
    maxHeight?: boolean
    minWidth?: boolean
    maxWidth?: boolean
    createdDate?: boolean
    deletedDate?: boolean
    isDeleted?: boolean
    users?: boolean | usersArgs
    artworkCollections?: boolean | artworkCollectionsFindManyArgs
    artworksAddresses?: boolean | artworksAddressesFindManyArgs
    artworksCollaborators?: boolean | artworksCollaboratorsFindManyArgs
    artworksColors?: boolean | artworksColorsFindManyArgs
    artworksMaterials?: boolean | artworksMaterialsFindManyArgs
    artworksMovements?: boolean | artworksMovementsFindManyArgs
    artworksTags?: boolean | artworksTagsFindManyArgs
    comments?: boolean | commentsFindManyArgs
    favoritesArtworks?: boolean | favoritesArtworksFindManyArgs
    reports?: boolean | reportsFindManyArgs
    _count?: boolean | ArtworksCountOutputTypeArgs
  }


  export type artworksInclude = {
    users?: boolean | usersArgs
    artworkCollections?: boolean | artworkCollectionsFindManyArgs
    artworksAddresses?: boolean | artworksAddressesFindManyArgs
    artworksCollaborators?: boolean | artworksCollaboratorsFindManyArgs
    artworksColors?: boolean | artworksColorsFindManyArgs
    artworksMaterials?: boolean | artworksMaterialsFindManyArgs
    artworksMovements?: boolean | artworksMovementsFindManyArgs
    artworksTags?: boolean | artworksTagsFindManyArgs
    comments?: boolean | commentsFindManyArgs
    favoritesArtworks?: boolean | favoritesArtworksFindManyArgs
    reports?: boolean | reportsFindManyArgs
    _count?: boolean | ArtworksCountOutputTypeArgs
  } 

  export type artworksGetPayload<S extends boolean | null | undefined | artworksArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? artworks :
    S extends undefined ? never :
    S extends { include: any } & (artworksArgs | artworksFindManyArgs)
    ? artworks  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'artworkCollections' ? Array < artworkCollectionsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'artworksAddresses' ? Array < artworksAddressesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'artworksCollaborators' ? Array < artworksCollaboratorsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'artworksColors' ? Array < artworksColorsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'artworksMaterials' ? Array < artworksMaterialsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'artworksMovements' ? Array < artworksMovementsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'artworksTags' ? Array < artworksTagsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'comments' ? Array < commentsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'favoritesArtworks' ? Array < favoritesArtworksGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'reports' ? Array < reportsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? ArtworksCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (artworksArgs | artworksFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'artworkCollections' ? Array < artworkCollectionsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'artworksAddresses' ? Array < artworksAddressesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'artworksCollaborators' ? Array < artworksCollaboratorsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'artworksColors' ? Array < artworksColorsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'artworksMaterials' ? Array < artworksMaterialsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'artworksMovements' ? Array < artworksMovementsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'artworksTags' ? Array < artworksTagsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'comments' ? Array < commentsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'favoritesArtworks' ? Array < favoritesArtworksGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'reports' ? Array < reportsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? ArtworksCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof artworks ? artworks[P] : never
  } 
      : artworks


  type artworksCountArgs = Merge<
    Omit<artworksFindManyArgs, 'select' | 'include'> & {
      select?: ArtworksCountAggregateInputType | true
    }
  >

  export interface artworksDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Artworks that matches the filter.
     * @param {artworksFindUniqueArgs} args - Arguments to find a Artworks
     * @example
     * // Get one Artworks
     * const artworks = await prisma.artworks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends artworksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, artworksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'artworks'> extends True ? Prisma__artworksClient<artworksGetPayload<T>> : Prisma__artworksClient<artworksGetPayload<T> | null, null>

    /**
     * Find the first Artworks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksFindFirstArgs} args - Arguments to find a Artworks
     * @example
     * // Get one Artworks
     * const artworks = await prisma.artworks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends artworksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, artworksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'artworks'> extends True ? Prisma__artworksClient<artworksGetPayload<T>> : Prisma__artworksClient<artworksGetPayload<T> | null, null>

    /**
     * Find zero or more Artworks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Artworks
     * const artworks = await prisma.artworks.findMany()
     * 
     * // Get first 10 Artworks
     * const artworks = await prisma.artworks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artworksWithIdOnly = await prisma.artworks.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends artworksFindManyArgs>(
      args?: SelectSubset<T, artworksFindManyArgs>
    ): PrismaPromise<Array<artworksGetPayload<T>>>

    /**
     * Create a Artworks.
     * @param {artworksCreateArgs} args - Arguments to create a Artworks.
     * @example
     * // Create one Artworks
     * const Artworks = await prisma.artworks.create({
     *   data: {
     *     // ... data to create a Artworks
     *   }
     * })
     * 
    **/
    create<T extends artworksCreateArgs>(
      args: SelectSubset<T, artworksCreateArgs>
    ): Prisma__artworksClient<artworksGetPayload<T>>

    /**
     * Create many Artworks.
     *     @param {artworksCreateManyArgs} args - Arguments to create many Artworks.
     *     @example
     *     // Create many Artworks
     *     const artworks = await prisma.artworks.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends artworksCreateManyArgs>(
      args?: SelectSubset<T, artworksCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Artworks.
     * @param {artworksDeleteArgs} args - Arguments to delete one Artworks.
     * @example
     * // Delete one Artworks
     * const Artworks = await prisma.artworks.delete({
     *   where: {
     *     // ... filter to delete one Artworks
     *   }
     * })
     * 
    **/
    delete<T extends artworksDeleteArgs>(
      args: SelectSubset<T, artworksDeleteArgs>
    ): Prisma__artworksClient<artworksGetPayload<T>>

    /**
     * Update one Artworks.
     * @param {artworksUpdateArgs} args - Arguments to update one Artworks.
     * @example
     * // Update one Artworks
     * const artworks = await prisma.artworks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends artworksUpdateArgs>(
      args: SelectSubset<T, artworksUpdateArgs>
    ): Prisma__artworksClient<artworksGetPayload<T>>

    /**
     * Delete zero or more Artworks.
     * @param {artworksDeleteManyArgs} args - Arguments to filter Artworks to delete.
     * @example
     * // Delete a few Artworks
     * const { count } = await prisma.artworks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends artworksDeleteManyArgs>(
      args?: SelectSubset<T, artworksDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Artworks
     * const artworks = await prisma.artworks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends artworksUpdateManyArgs>(
      args: SelectSubset<T, artworksUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Artworks.
     * @param {artworksUpsertArgs} args - Arguments to update or create a Artworks.
     * @example
     * // Update or create a Artworks
     * const artworks = await prisma.artworks.upsert({
     *   create: {
     *     // ... data to create a Artworks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Artworks we want to update
     *   }
     * })
    **/
    upsert<T extends artworksUpsertArgs>(
      args: SelectSubset<T, artworksUpsertArgs>
    ): Prisma__artworksClient<artworksGetPayload<T>>

    /**
     * Find one Artworks that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {artworksFindUniqueOrThrowArgs} args - Arguments to find a Artworks
     * @example
     * // Get one Artworks
     * const artworks = await prisma.artworks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends artworksFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, artworksFindUniqueOrThrowArgs>
    ): Prisma__artworksClient<artworksGetPayload<T>>

    /**
     * Find the first Artworks that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksFindFirstOrThrowArgs} args - Arguments to find a Artworks
     * @example
     * // Get one Artworks
     * const artworks = await prisma.artworks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends artworksFindFirstOrThrowArgs>(
      args?: SelectSubset<T, artworksFindFirstOrThrowArgs>
    ): Prisma__artworksClient<artworksGetPayload<T>>

    /**
     * Count the number of Artworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksCountArgs} args - Arguments to filter Artworks to count.
     * @example
     * // Count the number of Artworks
     * const count = await prisma.artworks.count({
     *   where: {
     *     // ... the filter for the Artworks we want to count
     *   }
     * })
    **/
    count<T extends artworksCountArgs>(
      args?: Subset<T, artworksCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtworksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Artworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtworksAggregateArgs>(args: Subset<T, ArtworksAggregateArgs>): PrismaPromise<GetArtworksAggregateType<T>>

    /**
     * Group by Artworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtworksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtworksGroupByArgs['orderBy'] }
        : { orderBy?: ArtworksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtworksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtworksGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for artworks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__artworksClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    artworkCollections<T extends artworkCollectionsFindManyArgs= {}>(args?: Subset<T, artworkCollectionsFindManyArgs>): PrismaPromise<Array<artworkCollectionsGetPayload<T>>| Null>;

    artworksAddresses<T extends artworksAddressesFindManyArgs= {}>(args?: Subset<T, artworksAddressesFindManyArgs>): PrismaPromise<Array<artworksAddressesGetPayload<T>>| Null>;

    artworksCollaborators<T extends artworksCollaboratorsFindManyArgs= {}>(args?: Subset<T, artworksCollaboratorsFindManyArgs>): PrismaPromise<Array<artworksCollaboratorsGetPayload<T>>| Null>;

    artworksColors<T extends artworksColorsFindManyArgs= {}>(args?: Subset<T, artworksColorsFindManyArgs>): PrismaPromise<Array<artworksColorsGetPayload<T>>| Null>;

    artworksMaterials<T extends artworksMaterialsFindManyArgs= {}>(args?: Subset<T, artworksMaterialsFindManyArgs>): PrismaPromise<Array<artworksMaterialsGetPayload<T>>| Null>;

    artworksMovements<T extends artworksMovementsFindManyArgs= {}>(args?: Subset<T, artworksMovementsFindManyArgs>): PrismaPromise<Array<artworksMovementsGetPayload<T>>| Null>;

    artworksTags<T extends artworksTagsFindManyArgs= {}>(args?: Subset<T, artworksTagsFindManyArgs>): PrismaPromise<Array<artworksTagsGetPayload<T>>| Null>;

    comments<T extends commentsFindManyArgs= {}>(args?: Subset<T, commentsFindManyArgs>): PrismaPromise<Array<commentsGetPayload<T>>| Null>;

    favoritesArtworks<T extends favoritesArtworksFindManyArgs= {}>(args?: Subset<T, favoritesArtworksFindManyArgs>): PrismaPromise<Array<favoritesArtworksGetPayload<T>>| Null>;

    reports<T extends reportsFindManyArgs= {}>(args?: Subset<T, reportsFindManyArgs>): PrismaPromise<Array<reportsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * artworks base type for findUnique actions
   */
  export type artworksFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
    /**
     * Filter, which artworks to fetch.
     * 
    **/
    where: artworksWhereUniqueInput
  }

  /**
   * artworks: findUnique
   */
  export interface artworksFindUniqueArgs extends artworksFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworks base type for findFirst actions
   */
  export type artworksFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
    /**
     * Filter, which artworks to fetch.
     * 
    **/
    where?: artworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworks to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artworks.
     * 
    **/
    cursor?: artworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artworks.
     * 
    **/
    distinct?: Enumerable<ArtworksScalarFieldEnum>
  }

  /**
   * artworks: findFirst
   */
  export interface artworksFindFirstArgs extends artworksFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworks findMany
   */
  export type artworksFindManyArgs = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
    /**
     * Filter, which artworks to fetch.
     * 
    **/
    where?: artworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworks to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing artworks.
     * 
    **/
    cursor?: artworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ArtworksScalarFieldEnum>
  }


  /**
   * artworks create
   */
  export type artworksCreateArgs = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
    /**
     * The data needed to create a artworks.
     * 
    **/
    data: XOR<artworksCreateInput, artworksUncheckedCreateInput>
  }


  /**
   * artworks createMany
   */
  export type artworksCreateManyArgs = {
    /**
     * The data used to create many artworks.
     * 
    **/
    data: Enumerable<artworksCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * artworks update
   */
  export type artworksUpdateArgs = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
    /**
     * The data needed to update a artworks.
     * 
    **/
    data: XOR<artworksUpdateInput, artworksUncheckedUpdateInput>
    /**
     * Choose, which artworks to update.
     * 
    **/
    where: artworksWhereUniqueInput
  }


  /**
   * artworks updateMany
   */
  export type artworksUpdateManyArgs = {
    /**
     * The data used to update artworks.
     * 
    **/
    data: XOR<artworksUpdateManyMutationInput, artworksUncheckedUpdateManyInput>
    /**
     * Filter which artworks to update
     * 
    **/
    where?: artworksWhereInput
  }


  /**
   * artworks upsert
   */
  export type artworksUpsertArgs = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
    /**
     * The filter to search for the artworks to update in case it exists.
     * 
    **/
    where: artworksWhereUniqueInput
    /**
     * In case the artworks found by the `where` argument doesn't exist, create a new artworks with this data.
     * 
    **/
    create: XOR<artworksCreateInput, artworksUncheckedCreateInput>
    /**
     * In case the artworks was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<artworksUpdateInput, artworksUncheckedUpdateInput>
  }


  /**
   * artworks delete
   */
  export type artworksDeleteArgs = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
    /**
     * Filter which artworks to delete.
     * 
    **/
    where: artworksWhereUniqueInput
  }


  /**
   * artworks deleteMany
   */
  export type artworksDeleteManyArgs = {
    /**
     * Filter which artworks to delete
     * 
    **/
    where?: artworksWhereInput
  }


  /**
   * artworks: findUniqueOrThrow
   */
  export type artworksFindUniqueOrThrowArgs = artworksFindUniqueArgsBase
      

  /**
   * artworks: findFirstOrThrow
   */
  export type artworksFindFirstOrThrowArgs = artworksFindFirstArgsBase
      

  /**
   * artworks without action
   */
  export type artworksArgs = {
    /**
     * Select specific fields to fetch from the artworks
     * 
    **/
    select?: artworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksInclude | null
  }



  /**
   * Model comments
   */


  export type AggregateComments = {
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  export type CommentsAvgAggregateOutputType = {
    id: number | null
    commentatorId: number | null
    userId: number | null
    artworkId: number | null
    commentId: number | null
  }

  export type CommentsSumAggregateOutputType = {
    id: number | null
    commentatorId: number | null
    userId: number | null
    artworkId: number | null
    commentId: number | null
  }

  export type CommentsMinAggregateOutputType = {
    id: number | null
    commentatorId: number | null
    comment: string | null
    userId: number | null
    artworkId: number | null
    commentId: number | null
    createdDate: Date | null
  }

  export type CommentsMaxAggregateOutputType = {
    id: number | null
    commentatorId: number | null
    comment: string | null
    userId: number | null
    artworkId: number | null
    commentId: number | null
    createdDate: Date | null
  }

  export type CommentsCountAggregateOutputType = {
    id: number
    commentatorId: number
    comment: number
    userId: number
    artworkId: number
    commentId: number
    createdDate: number
    _all: number
  }


  export type CommentsAvgAggregateInputType = {
    id?: true
    commentatorId?: true
    userId?: true
    artworkId?: true
    commentId?: true
  }

  export type CommentsSumAggregateInputType = {
    id?: true
    commentatorId?: true
    userId?: true
    artworkId?: true
    commentId?: true
  }

  export type CommentsMinAggregateInputType = {
    id?: true
    commentatorId?: true
    comment?: true
    userId?: true
    artworkId?: true
    commentId?: true
    createdDate?: true
  }

  export type CommentsMaxAggregateInputType = {
    id?: true
    commentatorId?: true
    comment?: true
    userId?: true
    artworkId?: true
    commentId?: true
    createdDate?: true
  }

  export type CommentsCountAggregateInputType = {
    id?: true
    commentatorId?: true
    comment?: true
    userId?: true
    artworkId?: true
    commentId?: true
    createdDate?: true
    _all?: true
  }

  export type CommentsAggregateArgs = {
    /**
     * Filter which comments to aggregate.
     * 
    **/
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     * 
    **/
    orderBy?: Enumerable<commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned comments
    **/
    _count?: true | CommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentsMaxAggregateInputType
  }

  export type GetCommentsAggregateType<T extends CommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateComments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComments[P]>
      : GetScalarType<T[P], AggregateComments[P]>
  }




  export type CommentsGroupByArgs = {
    where?: commentsWhereInput
    orderBy?: Enumerable<commentsOrderByWithAggregationInput>
    by: Array<CommentsScalarFieldEnum>
    having?: commentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentsCountAggregateInputType | true
    _avg?: CommentsAvgAggregateInputType
    _sum?: CommentsSumAggregateInputType
    _min?: CommentsMinAggregateInputType
    _max?: CommentsMaxAggregateInputType
  }


  export type CommentsGroupByOutputType = {
    id: number
    commentatorId: number
    comment: string
    userId: number | null
    artworkId: number | null
    commentId: number | null
    createdDate: Date | null
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  type GetCommentsGroupByPayload<T extends CommentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CommentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentsGroupByOutputType[P]>
            : GetScalarType<T[P], CommentsGroupByOutputType[P]>
        }
      >
    >


  export type commentsSelect = {
    id?: boolean
    commentatorId?: boolean
    comment?: boolean
    userId?: boolean
    artworkId?: boolean
    commentId?: boolean
    createdDate?: boolean
    users_comments_commentatorIdTousers?: boolean | usersArgs
    users_commentsTousers?: boolean | usersArgs
    artworks?: boolean | artworksArgs
    comments?: boolean | commentsArgs
    other_comments?: boolean | commentsFindManyArgs
    commentsLikes?: boolean | commentsLikesFindManyArgs
    reports?: boolean | reportsFindManyArgs
    _count?: boolean | CommentsCountOutputTypeArgs
  }


  export type commentsInclude = {
    users_comments_commentatorIdTousers?: boolean | usersArgs
    users_commentsTousers?: boolean | usersArgs
    artworks?: boolean | artworksArgs
    comments?: boolean | commentsArgs
    other_comments?: boolean | commentsFindManyArgs
    commentsLikes?: boolean | commentsLikesFindManyArgs
    reports?: boolean | reportsFindManyArgs
    _count?: boolean | CommentsCountOutputTypeArgs
  } 

  export type commentsGetPayload<S extends boolean | null | undefined | commentsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? comments :
    S extends undefined ? never :
    S extends { include: any } & (commentsArgs | commentsFindManyArgs)
    ? comments  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users_comments_commentatorIdTousers' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users_commentsTousers' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'artworks' ? artworksGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'comments' ? commentsGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'other_comments' ? Array < commentsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'commentsLikes' ? Array < commentsLikesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'reports' ? Array < reportsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? CommentsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (commentsArgs | commentsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users_comments_commentatorIdTousers' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users_commentsTousers' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'artworks' ? artworksGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'comments' ? commentsGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'other_comments' ? Array < commentsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'commentsLikes' ? Array < commentsLikesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'reports' ? Array < reportsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? CommentsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof comments ? comments[P] : never
  } 
      : comments


  type commentsCountArgs = Merge<
    Omit<commentsFindManyArgs, 'select' | 'include'> & {
      select?: CommentsCountAggregateInputType | true
    }
  >

  export interface commentsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Comments that matches the filter.
     * @param {commentsFindUniqueArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends commentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, commentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'comments'> extends True ? Prisma__commentsClient<commentsGetPayload<T>> : Prisma__commentsClient<commentsGetPayload<T> | null, null>

    /**
     * Find the first Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsFindFirstArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends commentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, commentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'comments'> extends True ? Prisma__commentsClient<commentsGetPayload<T>> : Prisma__commentsClient<commentsGetPayload<T> | null, null>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comments.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentsWithIdOnly = await prisma.comments.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends commentsFindManyArgs>(
      args?: SelectSubset<T, commentsFindManyArgs>
    ): PrismaPromise<Array<commentsGetPayload<T>>>

    /**
     * Create a Comments.
     * @param {commentsCreateArgs} args - Arguments to create a Comments.
     * @example
     * // Create one Comments
     * const Comments = await prisma.comments.create({
     *   data: {
     *     // ... data to create a Comments
     *   }
     * })
     * 
    **/
    create<T extends commentsCreateArgs>(
      args: SelectSubset<T, commentsCreateArgs>
    ): Prisma__commentsClient<commentsGetPayload<T>>

    /**
     * Create many Comments.
     *     @param {commentsCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comments = await prisma.comments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends commentsCreateManyArgs>(
      args?: SelectSubset<T, commentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Comments.
     * @param {commentsDeleteArgs} args - Arguments to delete one Comments.
     * @example
     * // Delete one Comments
     * const Comments = await prisma.comments.delete({
     *   where: {
     *     // ... filter to delete one Comments
     *   }
     * })
     * 
    **/
    delete<T extends commentsDeleteArgs>(
      args: SelectSubset<T, commentsDeleteArgs>
    ): Prisma__commentsClient<commentsGetPayload<T>>

    /**
     * Update one Comments.
     * @param {commentsUpdateArgs} args - Arguments to update one Comments.
     * @example
     * // Update one Comments
     * const comments = await prisma.comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commentsUpdateArgs>(
      args: SelectSubset<T, commentsUpdateArgs>
    ): Prisma__commentsClient<commentsGetPayload<T>>

    /**
     * Delete zero or more Comments.
     * @param {commentsDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commentsDeleteManyArgs>(
      args?: SelectSubset<T, commentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comments = await prisma.comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commentsUpdateManyArgs>(
      args: SelectSubset<T, commentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comments.
     * @param {commentsUpsertArgs} args - Arguments to update or create a Comments.
     * @example
     * // Update or create a Comments
     * const comments = await prisma.comments.upsert({
     *   create: {
     *     // ... data to create a Comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comments we want to update
     *   }
     * })
    **/
    upsert<T extends commentsUpsertArgs>(
      args: SelectSubset<T, commentsUpsertArgs>
    ): Prisma__commentsClient<commentsGetPayload<T>>

    /**
     * Find one Comments that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {commentsFindUniqueOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends commentsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, commentsFindUniqueOrThrowArgs>
    ): Prisma__commentsClient<commentsGetPayload<T>>

    /**
     * Find the first Comments that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsFindFirstOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends commentsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, commentsFindFirstOrThrowArgs>
    ): Prisma__commentsClient<commentsGetPayload<T>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comments.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends commentsCountArgs>(
      args?: Subset<T, commentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentsAggregateArgs>(args: Subset<T, CommentsAggregateArgs>): PrismaPromise<GetCommentsAggregateType<T>>

    /**
     * Group by Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentsGroupByArgs['orderBy'] }
        : { orderBy?: CommentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__commentsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users_comments_commentatorIdTousers<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    users_commentsTousers<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    artworks<T extends artworksArgs= {}>(args?: Subset<T, artworksArgs>): Prisma__artworksClient<artworksGetPayload<T> | Null>;

    comments<T extends commentsArgs= {}>(args?: Subset<T, commentsArgs>): Prisma__commentsClient<commentsGetPayload<T> | Null>;

    other_comments<T extends commentsFindManyArgs= {}>(args?: Subset<T, commentsFindManyArgs>): PrismaPromise<Array<commentsGetPayload<T>>| Null>;

    commentsLikes<T extends commentsLikesFindManyArgs= {}>(args?: Subset<T, commentsLikesFindManyArgs>): PrismaPromise<Array<commentsLikesGetPayload<T>>| Null>;

    reports<T extends reportsFindManyArgs= {}>(args?: Subset<T, reportsFindManyArgs>): PrismaPromise<Array<reportsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * comments base type for findUnique actions
   */
  export type commentsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
    /**
     * Filter, which comments to fetch.
     * 
    **/
    where: commentsWhereUniqueInput
  }

  /**
   * comments: findUnique
   */
  export interface commentsFindUniqueArgs extends commentsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * comments base type for findFirst actions
   */
  export type commentsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
    /**
     * Filter, which comments to fetch.
     * 
    **/
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     * 
    **/
    orderBy?: Enumerable<commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     * 
    **/
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     * 
    **/
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }

  /**
   * comments: findFirst
   */
  export interface commentsFindFirstArgs extends commentsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * comments findMany
   */
  export type commentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
    /**
     * Filter, which comments to fetch.
     * 
    **/
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     * 
    **/
    orderBy?: Enumerable<commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing comments.
     * 
    **/
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }


  /**
   * comments create
   */
  export type commentsCreateArgs = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
    /**
     * The data needed to create a comments.
     * 
    **/
    data: XOR<commentsCreateInput, commentsUncheckedCreateInput>
  }


  /**
   * comments createMany
   */
  export type commentsCreateManyArgs = {
    /**
     * The data used to create many comments.
     * 
    **/
    data: Enumerable<commentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * comments update
   */
  export type commentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
    /**
     * The data needed to update a comments.
     * 
    **/
    data: XOR<commentsUpdateInput, commentsUncheckedUpdateInput>
    /**
     * Choose, which comments to update.
     * 
    **/
    where: commentsWhereUniqueInput
  }


  /**
   * comments updateMany
   */
  export type commentsUpdateManyArgs = {
    /**
     * The data used to update comments.
     * 
    **/
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyInput>
    /**
     * Filter which comments to update
     * 
    **/
    where?: commentsWhereInput
  }


  /**
   * comments upsert
   */
  export type commentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
    /**
     * The filter to search for the comments to update in case it exists.
     * 
    **/
    where: commentsWhereUniqueInput
    /**
     * In case the comments found by the `where` argument doesn't exist, create a new comments with this data.
     * 
    **/
    create: XOR<commentsCreateInput, commentsUncheckedCreateInput>
    /**
     * In case the comments was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<commentsUpdateInput, commentsUncheckedUpdateInput>
  }


  /**
   * comments delete
   */
  export type commentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
    /**
     * Filter which comments to delete.
     * 
    **/
    where: commentsWhereUniqueInput
  }


  /**
   * comments deleteMany
   */
  export type commentsDeleteManyArgs = {
    /**
     * Filter which comments to delete
     * 
    **/
    where?: commentsWhereInput
  }


  /**
   * comments: findUniqueOrThrow
   */
  export type commentsFindUniqueOrThrowArgs = commentsFindUniqueArgsBase
      

  /**
   * comments: findFirstOrThrow
   */
  export type commentsFindFirstOrThrowArgs = commentsFindFirstArgsBase
      

  /**
   * comments without action
   */
  export type commentsArgs = {
    /**
     * Select specific fields to fetch from the comments
     * 
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsInclude | null
  }



  /**
   * Model favoritesArtworks
   */


  export type AggregateFavoritesArtworks = {
    _count: FavoritesArtworksCountAggregateOutputType | null
    _avg: FavoritesArtworksAvgAggregateOutputType | null
    _sum: FavoritesArtworksSumAggregateOutputType | null
    _min: FavoritesArtworksMinAggregateOutputType | null
    _max: FavoritesArtworksMaxAggregateOutputType | null
  }

  export type FavoritesArtworksAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    artworkId: number | null
  }

  export type FavoritesArtworksSumAggregateOutputType = {
    id: number | null
    userId: number | null
    artworkId: number | null
  }

  export type FavoritesArtworksMinAggregateOutputType = {
    id: number | null
    userId: number | null
    artworkId: number | null
    createdDate: Date | null
  }

  export type FavoritesArtworksMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    artworkId: number | null
    createdDate: Date | null
  }

  export type FavoritesArtworksCountAggregateOutputType = {
    id: number
    userId: number
    artworkId: number
    createdDate: number
    _all: number
  }


  export type FavoritesArtworksAvgAggregateInputType = {
    id?: true
    userId?: true
    artworkId?: true
  }

  export type FavoritesArtworksSumAggregateInputType = {
    id?: true
    userId?: true
    artworkId?: true
  }

  export type FavoritesArtworksMinAggregateInputType = {
    id?: true
    userId?: true
    artworkId?: true
    createdDate?: true
  }

  export type FavoritesArtworksMaxAggregateInputType = {
    id?: true
    userId?: true
    artworkId?: true
    createdDate?: true
  }

  export type FavoritesArtworksCountAggregateInputType = {
    id?: true
    userId?: true
    artworkId?: true
    createdDate?: true
    _all?: true
  }

  export type FavoritesArtworksAggregateArgs = {
    /**
     * Filter which favoritesArtworks to aggregate.
     * 
    **/
    where?: favoritesArtworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favoritesArtworks to fetch.
     * 
    **/
    orderBy?: Enumerable<favoritesArtworksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: favoritesArtworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favoritesArtworks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favoritesArtworks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned favoritesArtworks
    **/
    _count?: true | FavoritesArtworksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavoritesArtworksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavoritesArtworksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoritesArtworksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoritesArtworksMaxAggregateInputType
  }

  export type GetFavoritesArtworksAggregateType<T extends FavoritesArtworksAggregateArgs> = {
        [P in keyof T & keyof AggregateFavoritesArtworks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavoritesArtworks[P]>
      : GetScalarType<T[P], AggregateFavoritesArtworks[P]>
  }




  export type FavoritesArtworksGroupByArgs = {
    where?: favoritesArtworksWhereInput
    orderBy?: Enumerable<favoritesArtworksOrderByWithAggregationInput>
    by: Array<FavoritesArtworksScalarFieldEnum>
    having?: favoritesArtworksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoritesArtworksCountAggregateInputType | true
    _avg?: FavoritesArtworksAvgAggregateInputType
    _sum?: FavoritesArtworksSumAggregateInputType
    _min?: FavoritesArtworksMinAggregateInputType
    _max?: FavoritesArtworksMaxAggregateInputType
  }


  export type FavoritesArtworksGroupByOutputType = {
    id: number
    userId: number
    artworkId: number
    createdDate: Date | null
    _count: FavoritesArtworksCountAggregateOutputType | null
    _avg: FavoritesArtworksAvgAggregateOutputType | null
    _sum: FavoritesArtworksSumAggregateOutputType | null
    _min: FavoritesArtworksMinAggregateOutputType | null
    _max: FavoritesArtworksMaxAggregateOutputType | null
  }

  type GetFavoritesArtworksGroupByPayload<T extends FavoritesArtworksGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FavoritesArtworksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoritesArtworksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoritesArtworksGroupByOutputType[P]>
            : GetScalarType<T[P], FavoritesArtworksGroupByOutputType[P]>
        }
      >
    >


  export type favoritesArtworksSelect = {
    id?: boolean
    userId?: boolean
    artworkId?: boolean
    createdDate?: boolean
    users?: boolean | usersArgs
    artworks?: boolean | artworksArgs
  }


  export type favoritesArtworksInclude = {
    users?: boolean | usersArgs
    artworks?: boolean | artworksArgs
  } 

  export type favoritesArtworksGetPayload<S extends boolean | null | undefined | favoritesArtworksArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? favoritesArtworks :
    S extends undefined ? never :
    S extends { include: any } & (favoritesArtworksArgs | favoritesArtworksFindManyArgs)
    ? favoritesArtworks  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'artworks' ? artworksGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (favoritesArtworksArgs | favoritesArtworksFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'artworks' ? artworksGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof favoritesArtworks ? favoritesArtworks[P] : never
  } 
      : favoritesArtworks


  type favoritesArtworksCountArgs = Merge<
    Omit<favoritesArtworksFindManyArgs, 'select' | 'include'> & {
      select?: FavoritesArtworksCountAggregateInputType | true
    }
  >

  export interface favoritesArtworksDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one FavoritesArtworks that matches the filter.
     * @param {favoritesArtworksFindUniqueArgs} args - Arguments to find a FavoritesArtworks
     * @example
     * // Get one FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends favoritesArtworksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, favoritesArtworksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'favoritesArtworks'> extends True ? Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T>> : Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T> | null, null>

    /**
     * Find the first FavoritesArtworks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoritesArtworksFindFirstArgs} args - Arguments to find a FavoritesArtworks
     * @example
     * // Get one FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends favoritesArtworksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, favoritesArtworksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'favoritesArtworks'> extends True ? Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T>> : Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T> | null, null>

    /**
     * Find zero or more FavoritesArtworks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoritesArtworksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.findMany()
     * 
     * // Get first 10 FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoritesArtworksWithIdOnly = await prisma.favoritesArtworks.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends favoritesArtworksFindManyArgs>(
      args?: SelectSubset<T, favoritesArtworksFindManyArgs>
    ): PrismaPromise<Array<favoritesArtworksGetPayload<T>>>

    /**
     * Create a FavoritesArtworks.
     * @param {favoritesArtworksCreateArgs} args - Arguments to create a FavoritesArtworks.
     * @example
     * // Create one FavoritesArtworks
     * const FavoritesArtworks = await prisma.favoritesArtworks.create({
     *   data: {
     *     // ... data to create a FavoritesArtworks
     *   }
     * })
     * 
    **/
    create<T extends favoritesArtworksCreateArgs>(
      args: SelectSubset<T, favoritesArtworksCreateArgs>
    ): Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T>>

    /**
     * Create many FavoritesArtworks.
     *     @param {favoritesArtworksCreateManyArgs} args - Arguments to create many FavoritesArtworks.
     *     @example
     *     // Create many FavoritesArtworks
     *     const favoritesArtworks = await prisma.favoritesArtworks.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends favoritesArtworksCreateManyArgs>(
      args?: SelectSubset<T, favoritesArtworksCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a FavoritesArtworks.
     * @param {favoritesArtworksDeleteArgs} args - Arguments to delete one FavoritesArtworks.
     * @example
     * // Delete one FavoritesArtworks
     * const FavoritesArtworks = await prisma.favoritesArtworks.delete({
     *   where: {
     *     // ... filter to delete one FavoritesArtworks
     *   }
     * })
     * 
    **/
    delete<T extends favoritesArtworksDeleteArgs>(
      args: SelectSubset<T, favoritesArtworksDeleteArgs>
    ): Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T>>

    /**
     * Update one FavoritesArtworks.
     * @param {favoritesArtworksUpdateArgs} args - Arguments to update one FavoritesArtworks.
     * @example
     * // Update one FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends favoritesArtworksUpdateArgs>(
      args: SelectSubset<T, favoritesArtworksUpdateArgs>
    ): Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T>>

    /**
     * Delete zero or more FavoritesArtworks.
     * @param {favoritesArtworksDeleteManyArgs} args - Arguments to filter FavoritesArtworks to delete.
     * @example
     * // Delete a few FavoritesArtworks
     * const { count } = await prisma.favoritesArtworks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends favoritesArtworksDeleteManyArgs>(
      args?: SelectSubset<T, favoritesArtworksDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavoritesArtworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoritesArtworksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends favoritesArtworksUpdateManyArgs>(
      args: SelectSubset<T, favoritesArtworksUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one FavoritesArtworks.
     * @param {favoritesArtworksUpsertArgs} args - Arguments to update or create a FavoritesArtworks.
     * @example
     * // Update or create a FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.upsert({
     *   create: {
     *     // ... data to create a FavoritesArtworks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavoritesArtworks we want to update
     *   }
     * })
    **/
    upsert<T extends favoritesArtworksUpsertArgs>(
      args: SelectSubset<T, favoritesArtworksUpsertArgs>
    ): Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T>>

    /**
     * Find one FavoritesArtworks that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {favoritesArtworksFindUniqueOrThrowArgs} args - Arguments to find a FavoritesArtworks
     * @example
     * // Get one FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends favoritesArtworksFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, favoritesArtworksFindUniqueOrThrowArgs>
    ): Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T>>

    /**
     * Find the first FavoritesArtworks that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoritesArtworksFindFirstOrThrowArgs} args - Arguments to find a FavoritesArtworks
     * @example
     * // Get one FavoritesArtworks
     * const favoritesArtworks = await prisma.favoritesArtworks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends favoritesArtworksFindFirstOrThrowArgs>(
      args?: SelectSubset<T, favoritesArtworksFindFirstOrThrowArgs>
    ): Prisma__favoritesArtworksClient<favoritesArtworksGetPayload<T>>

    /**
     * Count the number of FavoritesArtworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoritesArtworksCountArgs} args - Arguments to filter FavoritesArtworks to count.
     * @example
     * // Count the number of FavoritesArtworks
     * const count = await prisma.favoritesArtworks.count({
     *   where: {
     *     // ... the filter for the FavoritesArtworks we want to count
     *   }
     * })
    **/
    count<T extends favoritesArtworksCountArgs>(
      args?: Subset<T, favoritesArtworksCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoritesArtworksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavoritesArtworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritesArtworksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoritesArtworksAggregateArgs>(args: Subset<T, FavoritesArtworksAggregateArgs>): PrismaPromise<GetFavoritesArtworksAggregateType<T>>

    /**
     * Group by FavoritesArtworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritesArtworksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoritesArtworksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoritesArtworksGroupByArgs['orderBy'] }
        : { orderBy?: FavoritesArtworksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoritesArtworksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoritesArtworksGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for favoritesArtworks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__favoritesArtworksClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    artworks<T extends artworksArgs= {}>(args?: Subset<T, artworksArgs>): Prisma__artworksClient<artworksGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * favoritesArtworks base type for findUnique actions
   */
  export type favoritesArtworksFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
    /**
     * Filter, which favoritesArtworks to fetch.
     * 
    **/
    where: favoritesArtworksWhereUniqueInput
  }

  /**
   * favoritesArtworks: findUnique
   */
  export interface favoritesArtworksFindUniqueArgs extends favoritesArtworksFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * favoritesArtworks base type for findFirst actions
   */
  export type favoritesArtworksFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
    /**
     * Filter, which favoritesArtworks to fetch.
     * 
    **/
    where?: favoritesArtworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favoritesArtworks to fetch.
     * 
    **/
    orderBy?: Enumerable<favoritesArtworksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for favoritesArtworks.
     * 
    **/
    cursor?: favoritesArtworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favoritesArtworks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favoritesArtworks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of favoritesArtworks.
     * 
    **/
    distinct?: Enumerable<FavoritesArtworksScalarFieldEnum>
  }

  /**
   * favoritesArtworks: findFirst
   */
  export interface favoritesArtworksFindFirstArgs extends favoritesArtworksFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * favoritesArtworks findMany
   */
  export type favoritesArtworksFindManyArgs = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
    /**
     * Filter, which favoritesArtworks to fetch.
     * 
    **/
    where?: favoritesArtworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favoritesArtworks to fetch.
     * 
    **/
    orderBy?: Enumerable<favoritesArtworksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing favoritesArtworks.
     * 
    **/
    cursor?: favoritesArtworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favoritesArtworks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favoritesArtworks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FavoritesArtworksScalarFieldEnum>
  }


  /**
   * favoritesArtworks create
   */
  export type favoritesArtworksCreateArgs = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
    /**
     * The data needed to create a favoritesArtworks.
     * 
    **/
    data: XOR<favoritesArtworksCreateInput, favoritesArtworksUncheckedCreateInput>
  }


  /**
   * favoritesArtworks createMany
   */
  export type favoritesArtworksCreateManyArgs = {
    /**
     * The data used to create many favoritesArtworks.
     * 
    **/
    data: Enumerable<favoritesArtworksCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * favoritesArtworks update
   */
  export type favoritesArtworksUpdateArgs = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
    /**
     * The data needed to update a favoritesArtworks.
     * 
    **/
    data: XOR<favoritesArtworksUpdateInput, favoritesArtworksUncheckedUpdateInput>
    /**
     * Choose, which favoritesArtworks to update.
     * 
    **/
    where: favoritesArtworksWhereUniqueInput
  }


  /**
   * favoritesArtworks updateMany
   */
  export type favoritesArtworksUpdateManyArgs = {
    /**
     * The data used to update favoritesArtworks.
     * 
    **/
    data: XOR<favoritesArtworksUpdateManyMutationInput, favoritesArtworksUncheckedUpdateManyInput>
    /**
     * Filter which favoritesArtworks to update
     * 
    **/
    where?: favoritesArtworksWhereInput
  }


  /**
   * favoritesArtworks upsert
   */
  export type favoritesArtworksUpsertArgs = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
    /**
     * The filter to search for the favoritesArtworks to update in case it exists.
     * 
    **/
    where: favoritesArtworksWhereUniqueInput
    /**
     * In case the favoritesArtworks found by the `where` argument doesn't exist, create a new favoritesArtworks with this data.
     * 
    **/
    create: XOR<favoritesArtworksCreateInput, favoritesArtworksUncheckedCreateInput>
    /**
     * In case the favoritesArtworks was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<favoritesArtworksUpdateInput, favoritesArtworksUncheckedUpdateInput>
  }


  /**
   * favoritesArtworks delete
   */
  export type favoritesArtworksDeleteArgs = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
    /**
     * Filter which favoritesArtworks to delete.
     * 
    **/
    where: favoritesArtworksWhereUniqueInput
  }


  /**
   * favoritesArtworks deleteMany
   */
  export type favoritesArtworksDeleteManyArgs = {
    /**
     * Filter which favoritesArtworks to delete
     * 
    **/
    where?: favoritesArtworksWhereInput
  }


  /**
   * favoritesArtworks: findUniqueOrThrow
   */
  export type favoritesArtworksFindUniqueOrThrowArgs = favoritesArtworksFindUniqueArgsBase
      

  /**
   * favoritesArtworks: findFirstOrThrow
   */
  export type favoritesArtworksFindFirstOrThrowArgs = favoritesArtworksFindFirstArgsBase
      

  /**
   * favoritesArtworks without action
   */
  export type favoritesArtworksArgs = {
    /**
     * Select specific fields to fetch from the favoritesArtworks
     * 
    **/
    select?: favoritesArtworksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: favoritesArtworksInclude | null
  }



  /**
   * Model followers
   */


  export type AggregateFollowers = {
    _count: FollowersCountAggregateOutputType | null
    _avg: FollowersAvgAggregateOutputType | null
    _sum: FollowersSumAggregateOutputType | null
    _min: FollowersMinAggregateOutputType | null
    _max: FollowersMaxAggregateOutputType | null
  }

  export type FollowersAvgAggregateOutputType = {
    id: number | null
    followerId: number | null
    userId: number | null
  }

  export type FollowersSumAggregateOutputType = {
    id: number | null
    followerId: number | null
    userId: number | null
  }

  export type FollowersMinAggregateOutputType = {
    id: number | null
    followerId: number | null
    userId: number | null
    createdDate: Date | null
  }

  export type FollowersMaxAggregateOutputType = {
    id: number | null
    followerId: number | null
    userId: number | null
    createdDate: Date | null
  }

  export type FollowersCountAggregateOutputType = {
    id: number
    followerId: number
    userId: number
    createdDate: number
    _all: number
  }


  export type FollowersAvgAggregateInputType = {
    id?: true
    followerId?: true
    userId?: true
  }

  export type FollowersSumAggregateInputType = {
    id?: true
    followerId?: true
    userId?: true
  }

  export type FollowersMinAggregateInputType = {
    id?: true
    followerId?: true
    userId?: true
    createdDate?: true
  }

  export type FollowersMaxAggregateInputType = {
    id?: true
    followerId?: true
    userId?: true
    createdDate?: true
  }

  export type FollowersCountAggregateInputType = {
    id?: true
    followerId?: true
    userId?: true
    createdDate?: true
    _all?: true
  }

  export type FollowersAggregateArgs = {
    /**
     * Filter which followers to aggregate.
     * 
    **/
    where?: followersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of followers to fetch.
     * 
    **/
    orderBy?: Enumerable<followersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: followersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` followers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` followers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned followers
    **/
    _count?: true | FollowersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FollowersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FollowersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowersMaxAggregateInputType
  }

  export type GetFollowersAggregateType<T extends FollowersAggregateArgs> = {
        [P in keyof T & keyof AggregateFollowers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollowers[P]>
      : GetScalarType<T[P], AggregateFollowers[P]>
  }




  export type FollowersGroupByArgs = {
    where?: followersWhereInput
    orderBy?: Enumerable<followersOrderByWithAggregationInput>
    by: Array<FollowersScalarFieldEnum>
    having?: followersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowersCountAggregateInputType | true
    _avg?: FollowersAvgAggregateInputType
    _sum?: FollowersSumAggregateInputType
    _min?: FollowersMinAggregateInputType
    _max?: FollowersMaxAggregateInputType
  }


  export type FollowersGroupByOutputType = {
    id: number
    followerId: number
    userId: number
    createdDate: Date | null
    _count: FollowersCountAggregateOutputType | null
    _avg: FollowersAvgAggregateOutputType | null
    _sum: FollowersSumAggregateOutputType | null
    _min: FollowersMinAggregateOutputType | null
    _max: FollowersMaxAggregateOutputType | null
  }

  type GetFollowersGroupByPayload<T extends FollowersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FollowersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowersGroupByOutputType[P]>
            : GetScalarType<T[P], FollowersGroupByOutputType[P]>
        }
      >
    >


  export type followersSelect = {
    id?: boolean
    followerId?: boolean
    userId?: boolean
    createdDate?: boolean
    users?: boolean | usersArgs
    users_followers_userIdTousers?: boolean | usersArgs
  }


  export type followersInclude = {
    users?: boolean | usersArgs
    users_followers_userIdTousers?: boolean | usersArgs
  } 

  export type followersGetPayload<S extends boolean | null | undefined | followersArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? followers :
    S extends undefined ? never :
    S extends { include: any } & (followersArgs | followersFindManyArgs)
    ? followers  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users_followers_userIdTousers' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (followersArgs | followersFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users_followers_userIdTousers' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof followers ? followers[P] : never
  } 
      : followers


  type followersCountArgs = Merge<
    Omit<followersFindManyArgs, 'select' | 'include'> & {
      select?: FollowersCountAggregateInputType | true
    }
  >

  export interface followersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Followers that matches the filter.
     * @param {followersFindUniqueArgs} args - Arguments to find a Followers
     * @example
     * // Get one Followers
     * const followers = await prisma.followers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends followersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, followersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'followers'> extends True ? Prisma__followersClient<followersGetPayload<T>> : Prisma__followersClient<followersGetPayload<T> | null, null>

    /**
     * Find the first Followers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {followersFindFirstArgs} args - Arguments to find a Followers
     * @example
     * // Get one Followers
     * const followers = await prisma.followers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends followersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, followersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'followers'> extends True ? Prisma__followersClient<followersGetPayload<T>> : Prisma__followersClient<followersGetPayload<T> | null, null>

    /**
     * Find zero or more Followers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {followersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Followers
     * const followers = await prisma.followers.findMany()
     * 
     * // Get first 10 Followers
     * const followers = await prisma.followers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followersWithIdOnly = await prisma.followers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends followersFindManyArgs>(
      args?: SelectSubset<T, followersFindManyArgs>
    ): PrismaPromise<Array<followersGetPayload<T>>>

    /**
     * Create a Followers.
     * @param {followersCreateArgs} args - Arguments to create a Followers.
     * @example
     * // Create one Followers
     * const Followers = await prisma.followers.create({
     *   data: {
     *     // ... data to create a Followers
     *   }
     * })
     * 
    **/
    create<T extends followersCreateArgs>(
      args: SelectSubset<T, followersCreateArgs>
    ): Prisma__followersClient<followersGetPayload<T>>

    /**
     * Create many Followers.
     *     @param {followersCreateManyArgs} args - Arguments to create many Followers.
     *     @example
     *     // Create many Followers
     *     const followers = await prisma.followers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends followersCreateManyArgs>(
      args?: SelectSubset<T, followersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Followers.
     * @param {followersDeleteArgs} args - Arguments to delete one Followers.
     * @example
     * // Delete one Followers
     * const Followers = await prisma.followers.delete({
     *   where: {
     *     // ... filter to delete one Followers
     *   }
     * })
     * 
    **/
    delete<T extends followersDeleteArgs>(
      args: SelectSubset<T, followersDeleteArgs>
    ): Prisma__followersClient<followersGetPayload<T>>

    /**
     * Update one Followers.
     * @param {followersUpdateArgs} args - Arguments to update one Followers.
     * @example
     * // Update one Followers
     * const followers = await prisma.followers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends followersUpdateArgs>(
      args: SelectSubset<T, followersUpdateArgs>
    ): Prisma__followersClient<followersGetPayload<T>>

    /**
     * Delete zero or more Followers.
     * @param {followersDeleteManyArgs} args - Arguments to filter Followers to delete.
     * @example
     * // Delete a few Followers
     * const { count } = await prisma.followers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends followersDeleteManyArgs>(
      args?: SelectSubset<T, followersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {followersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Followers
     * const followers = await prisma.followers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends followersUpdateManyArgs>(
      args: SelectSubset<T, followersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Followers.
     * @param {followersUpsertArgs} args - Arguments to update or create a Followers.
     * @example
     * // Update or create a Followers
     * const followers = await prisma.followers.upsert({
     *   create: {
     *     // ... data to create a Followers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Followers we want to update
     *   }
     * })
    **/
    upsert<T extends followersUpsertArgs>(
      args: SelectSubset<T, followersUpsertArgs>
    ): Prisma__followersClient<followersGetPayload<T>>

    /**
     * Find one Followers that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {followersFindUniqueOrThrowArgs} args - Arguments to find a Followers
     * @example
     * // Get one Followers
     * const followers = await prisma.followers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends followersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, followersFindUniqueOrThrowArgs>
    ): Prisma__followersClient<followersGetPayload<T>>

    /**
     * Find the first Followers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {followersFindFirstOrThrowArgs} args - Arguments to find a Followers
     * @example
     * // Get one Followers
     * const followers = await prisma.followers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends followersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, followersFindFirstOrThrowArgs>
    ): Prisma__followersClient<followersGetPayload<T>>

    /**
     * Count the number of Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {followersCountArgs} args - Arguments to filter Followers to count.
     * @example
     * // Count the number of Followers
     * const count = await prisma.followers.count({
     *   where: {
     *     // ... the filter for the Followers we want to count
     *   }
     * })
    **/
    count<T extends followersCountArgs>(
      args?: Subset<T, followersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowersAggregateArgs>(args: Subset<T, FollowersAggregateArgs>): PrismaPromise<GetFollowersAggregateType<T>>

    /**
     * Group by Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowersGroupByArgs['orderBy'] }
        : { orderBy?: FollowersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for followers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__followersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    users_followers_userIdTousers<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * followers base type for findUnique actions
   */
  export type followersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
    /**
     * Filter, which followers to fetch.
     * 
    **/
    where: followersWhereUniqueInput
  }

  /**
   * followers: findUnique
   */
  export interface followersFindUniqueArgs extends followersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * followers base type for findFirst actions
   */
  export type followersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
    /**
     * Filter, which followers to fetch.
     * 
    **/
    where?: followersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of followers to fetch.
     * 
    **/
    orderBy?: Enumerable<followersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for followers.
     * 
    **/
    cursor?: followersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` followers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` followers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of followers.
     * 
    **/
    distinct?: Enumerable<FollowersScalarFieldEnum>
  }

  /**
   * followers: findFirst
   */
  export interface followersFindFirstArgs extends followersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * followers findMany
   */
  export type followersFindManyArgs = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
    /**
     * Filter, which followers to fetch.
     * 
    **/
    where?: followersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of followers to fetch.
     * 
    **/
    orderBy?: Enumerable<followersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing followers.
     * 
    **/
    cursor?: followersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` followers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` followers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FollowersScalarFieldEnum>
  }


  /**
   * followers create
   */
  export type followersCreateArgs = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
    /**
     * The data needed to create a followers.
     * 
    **/
    data: XOR<followersCreateInput, followersUncheckedCreateInput>
  }


  /**
   * followers createMany
   */
  export type followersCreateManyArgs = {
    /**
     * The data used to create many followers.
     * 
    **/
    data: Enumerable<followersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * followers update
   */
  export type followersUpdateArgs = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
    /**
     * The data needed to update a followers.
     * 
    **/
    data: XOR<followersUpdateInput, followersUncheckedUpdateInput>
    /**
     * Choose, which followers to update.
     * 
    **/
    where: followersWhereUniqueInput
  }


  /**
   * followers updateMany
   */
  export type followersUpdateManyArgs = {
    /**
     * The data used to update followers.
     * 
    **/
    data: XOR<followersUpdateManyMutationInput, followersUncheckedUpdateManyInput>
    /**
     * Filter which followers to update
     * 
    **/
    where?: followersWhereInput
  }


  /**
   * followers upsert
   */
  export type followersUpsertArgs = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
    /**
     * The filter to search for the followers to update in case it exists.
     * 
    **/
    where: followersWhereUniqueInput
    /**
     * In case the followers found by the `where` argument doesn't exist, create a new followers with this data.
     * 
    **/
    create: XOR<followersCreateInput, followersUncheckedCreateInput>
    /**
     * In case the followers was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<followersUpdateInput, followersUncheckedUpdateInput>
  }


  /**
   * followers delete
   */
  export type followersDeleteArgs = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
    /**
     * Filter which followers to delete.
     * 
    **/
    where: followersWhereUniqueInput
  }


  /**
   * followers deleteMany
   */
  export type followersDeleteManyArgs = {
    /**
     * Filter which followers to delete
     * 
    **/
    where?: followersWhereInput
  }


  /**
   * followers: findUniqueOrThrow
   */
  export type followersFindUniqueOrThrowArgs = followersFindUniqueArgsBase
      

  /**
   * followers: findFirstOrThrow
   */
  export type followersFindFirstOrThrowArgs = followersFindFirstArgsBase
      

  /**
   * followers without action
   */
  export type followersArgs = {
    /**
     * Select specific fields to fetch from the followers
     * 
    **/
    select?: followersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: followersInclude | null
  }



  /**
   * Model collections
   */


  export type AggregateCollections = {
    _count: CollectionsCountAggregateOutputType | null
    _avg: CollectionsAvgAggregateOutputType | null
    _sum: CollectionsSumAggregateOutputType | null
    _min: CollectionsMinAggregateOutputType | null
    _max: CollectionsMaxAggregateOutputType | null
  }

  export type CollectionsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CollectionsSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CollectionsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    imageUrl: string | null
    createdDate: Date | null
  }

  export type CollectionsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    imageUrl: string | null
    createdDate: Date | null
  }

  export type CollectionsCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    imageUrl: number
    createdDate: number
    _all: number
  }


  export type CollectionsAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CollectionsSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CollectionsMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    imageUrl?: true
    createdDate?: true
  }

  export type CollectionsMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    imageUrl?: true
    createdDate?: true
  }

  export type CollectionsCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    imageUrl?: true
    createdDate?: true
    _all?: true
  }

  export type CollectionsAggregateArgs = {
    /**
     * Filter which collections to aggregate.
     * 
    **/
    where?: collectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collections to fetch.
     * 
    **/
    orderBy?: Enumerable<collectionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: collectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collections.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned collections
    **/
    _count?: true | CollectionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CollectionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CollectionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollectionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollectionsMaxAggregateInputType
  }

  export type GetCollectionsAggregateType<T extends CollectionsAggregateArgs> = {
        [P in keyof T & keyof AggregateCollections]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollections[P]>
      : GetScalarType<T[P], AggregateCollections[P]>
  }




  export type CollectionsGroupByArgs = {
    where?: collectionsWhereInput
    orderBy?: Enumerable<collectionsOrderByWithAggregationInput>
    by: Array<CollectionsScalarFieldEnum>
    having?: collectionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollectionsCountAggregateInputType | true
    _avg?: CollectionsAvgAggregateInputType
    _sum?: CollectionsSumAggregateInputType
    _min?: CollectionsMinAggregateInputType
    _max?: CollectionsMaxAggregateInputType
  }


  export type CollectionsGroupByOutputType = {
    id: number
    userId: number
    name: string
    imageUrl: string | null
    createdDate: Date | null
    _count: CollectionsCountAggregateOutputType | null
    _avg: CollectionsAvgAggregateOutputType | null
    _sum: CollectionsSumAggregateOutputType | null
    _min: CollectionsMinAggregateOutputType | null
    _max: CollectionsMaxAggregateOutputType | null
  }

  type GetCollectionsGroupByPayload<T extends CollectionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CollectionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollectionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollectionsGroupByOutputType[P]>
            : GetScalarType<T[P], CollectionsGroupByOutputType[P]>
        }
      >
    >


  export type collectionsSelect = {
    id?: boolean
    userId?: boolean
    name?: boolean
    imageUrl?: boolean
    createdDate?: boolean
    users?: boolean | usersArgs
    artworkCollections?: boolean | artworkCollectionsFindManyArgs
    _count?: boolean | CollectionsCountOutputTypeArgs
  }


  export type collectionsInclude = {
    users?: boolean | usersArgs
    artworkCollections?: boolean | artworkCollectionsFindManyArgs
    _count?: boolean | CollectionsCountOutputTypeArgs
  } 

  export type collectionsGetPayload<S extends boolean | null | undefined | collectionsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? collections :
    S extends undefined ? never :
    S extends { include: any } & (collectionsArgs | collectionsFindManyArgs)
    ? collections  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'artworkCollections' ? Array < artworkCollectionsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? CollectionsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (collectionsArgs | collectionsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'artworkCollections' ? Array < artworkCollectionsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? CollectionsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof collections ? collections[P] : never
  } 
      : collections


  type collectionsCountArgs = Merge<
    Omit<collectionsFindManyArgs, 'select' | 'include'> & {
      select?: CollectionsCountAggregateInputType | true
    }
  >

  export interface collectionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Collections that matches the filter.
     * @param {collectionsFindUniqueArgs} args - Arguments to find a Collections
     * @example
     * // Get one Collections
     * const collections = await prisma.collections.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends collectionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, collectionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'collections'> extends True ? Prisma__collectionsClient<collectionsGetPayload<T>> : Prisma__collectionsClient<collectionsGetPayload<T> | null, null>

    /**
     * Find the first Collections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collectionsFindFirstArgs} args - Arguments to find a Collections
     * @example
     * // Get one Collections
     * const collections = await prisma.collections.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends collectionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, collectionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'collections'> extends True ? Prisma__collectionsClient<collectionsGetPayload<T>> : Prisma__collectionsClient<collectionsGetPayload<T> | null, null>

    /**
     * Find zero or more Collections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collectionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Collections
     * const collections = await prisma.collections.findMany()
     * 
     * // Get first 10 Collections
     * const collections = await prisma.collections.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collectionsWithIdOnly = await prisma.collections.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends collectionsFindManyArgs>(
      args?: SelectSubset<T, collectionsFindManyArgs>
    ): PrismaPromise<Array<collectionsGetPayload<T>>>

    /**
     * Create a Collections.
     * @param {collectionsCreateArgs} args - Arguments to create a Collections.
     * @example
     * // Create one Collections
     * const Collections = await prisma.collections.create({
     *   data: {
     *     // ... data to create a Collections
     *   }
     * })
     * 
    **/
    create<T extends collectionsCreateArgs>(
      args: SelectSubset<T, collectionsCreateArgs>
    ): Prisma__collectionsClient<collectionsGetPayload<T>>

    /**
     * Create many Collections.
     *     @param {collectionsCreateManyArgs} args - Arguments to create many Collections.
     *     @example
     *     // Create many Collections
     *     const collections = await prisma.collections.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends collectionsCreateManyArgs>(
      args?: SelectSubset<T, collectionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Collections.
     * @param {collectionsDeleteArgs} args - Arguments to delete one Collections.
     * @example
     * // Delete one Collections
     * const Collections = await prisma.collections.delete({
     *   where: {
     *     // ... filter to delete one Collections
     *   }
     * })
     * 
    **/
    delete<T extends collectionsDeleteArgs>(
      args: SelectSubset<T, collectionsDeleteArgs>
    ): Prisma__collectionsClient<collectionsGetPayload<T>>

    /**
     * Update one Collections.
     * @param {collectionsUpdateArgs} args - Arguments to update one Collections.
     * @example
     * // Update one Collections
     * const collections = await prisma.collections.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends collectionsUpdateArgs>(
      args: SelectSubset<T, collectionsUpdateArgs>
    ): Prisma__collectionsClient<collectionsGetPayload<T>>

    /**
     * Delete zero or more Collections.
     * @param {collectionsDeleteManyArgs} args - Arguments to filter Collections to delete.
     * @example
     * // Delete a few Collections
     * const { count } = await prisma.collections.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends collectionsDeleteManyArgs>(
      args?: SelectSubset<T, collectionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Collections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collectionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Collections
     * const collections = await prisma.collections.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends collectionsUpdateManyArgs>(
      args: SelectSubset<T, collectionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Collections.
     * @param {collectionsUpsertArgs} args - Arguments to update or create a Collections.
     * @example
     * // Update or create a Collections
     * const collections = await prisma.collections.upsert({
     *   create: {
     *     // ... data to create a Collections
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Collections we want to update
     *   }
     * })
    **/
    upsert<T extends collectionsUpsertArgs>(
      args: SelectSubset<T, collectionsUpsertArgs>
    ): Prisma__collectionsClient<collectionsGetPayload<T>>

    /**
     * Find one Collections that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {collectionsFindUniqueOrThrowArgs} args - Arguments to find a Collections
     * @example
     * // Get one Collections
     * const collections = await prisma.collections.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends collectionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, collectionsFindUniqueOrThrowArgs>
    ): Prisma__collectionsClient<collectionsGetPayload<T>>

    /**
     * Find the first Collections that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collectionsFindFirstOrThrowArgs} args - Arguments to find a Collections
     * @example
     * // Get one Collections
     * const collections = await prisma.collections.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends collectionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, collectionsFindFirstOrThrowArgs>
    ): Prisma__collectionsClient<collectionsGetPayload<T>>

    /**
     * Count the number of Collections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collectionsCountArgs} args - Arguments to filter Collections to count.
     * @example
     * // Count the number of Collections
     * const count = await prisma.collections.count({
     *   where: {
     *     // ... the filter for the Collections we want to count
     *   }
     * })
    **/
    count<T extends collectionsCountArgs>(
      args?: Subset<T, collectionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollectionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Collections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollectionsAggregateArgs>(args: Subset<T, CollectionsAggregateArgs>): PrismaPromise<GetCollectionsAggregateType<T>>

    /**
     * Group by Collections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollectionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollectionsGroupByArgs['orderBy'] }
        : { orderBy?: CollectionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollectionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollectionsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for collections.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__collectionsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    artworkCollections<T extends artworkCollectionsFindManyArgs= {}>(args?: Subset<T, artworkCollectionsFindManyArgs>): PrismaPromise<Array<artworkCollectionsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * collections base type for findUnique actions
   */
  export type collectionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the collections
     * 
    **/
    select?: collectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: collectionsInclude | null
    /**
     * Filter, which collections to fetch.
     * 
    **/
    where: collectionsWhereUniqueInput
  }

  /**
   * collections: findUnique
   */
  export interface collectionsFindUniqueArgs extends collectionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * collections base type for findFirst actions
   */
  export type collectionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the collections
     * 
    **/
    select?: collectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: collectionsInclude | null
    /**
     * Filter, which collections to fetch.
     * 
    **/
    where?: collectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collections to fetch.
     * 
    **/
    orderBy?: Enumerable<collectionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for collections.
     * 
    **/
    cursor?: collectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collections.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of collections.
     * 
    **/
    distinct?: Enumerable<CollectionsScalarFieldEnum>
  }

  /**
   * collections: findFirst
   */
  export interface collectionsFindFirstArgs extends collectionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * collections findMany
   */
  export type collectionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the collections
     * 
    **/
    select?: collectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: collectionsInclude | null
    /**
     * Filter, which collections to fetch.
     * 
    **/
    where?: collectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collections to fetch.
     * 
    **/
    orderBy?: Enumerable<collectionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing collections.
     * 
    **/
    cursor?: collectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collections.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CollectionsScalarFieldEnum>
  }


  /**
   * collections create
   */
  export type collectionsCreateArgs = {
    /**
     * Select specific fields to fetch from the collections
     * 
    **/
    select?: collectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: collectionsInclude | null
    /**
     * The data needed to create a collections.
     * 
    **/
    data: XOR<collectionsCreateInput, collectionsUncheckedCreateInput>
  }


  /**
   * collections createMany
   */
  export type collectionsCreateManyArgs = {
    /**
     * The data used to create many collections.
     * 
    **/
    data: Enumerable<collectionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * collections update
   */
  export type collectionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the collections
     * 
    **/
    select?: collectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: collectionsInclude | null
    /**
     * The data needed to update a collections.
     * 
    **/
    data: XOR<collectionsUpdateInput, collectionsUncheckedUpdateInput>
    /**
     * Choose, which collections to update.
     * 
    **/
    where: collectionsWhereUniqueInput
  }


  /**
   * collections updateMany
   */
  export type collectionsUpdateManyArgs = {
    /**
     * The data used to update collections.
     * 
    **/
    data: XOR<collectionsUpdateManyMutationInput, collectionsUncheckedUpdateManyInput>
    /**
     * Filter which collections to update
     * 
    **/
    where?: collectionsWhereInput
  }


  /**
   * collections upsert
   */
  export type collectionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the collections
     * 
    **/
    select?: collectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: collectionsInclude | null
    /**
     * The filter to search for the collections to update in case it exists.
     * 
    **/
    where: collectionsWhereUniqueInput
    /**
     * In case the collections found by the `where` argument doesn't exist, create a new collections with this data.
     * 
    **/
    create: XOR<collectionsCreateInput, collectionsUncheckedCreateInput>
    /**
     * In case the collections was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<collectionsUpdateInput, collectionsUncheckedUpdateInput>
  }


  /**
   * collections delete
   */
  export type collectionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the collections
     * 
    **/
    select?: collectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: collectionsInclude | null
    /**
     * Filter which collections to delete.
     * 
    **/
    where: collectionsWhereUniqueInput
  }


  /**
   * collections deleteMany
   */
  export type collectionsDeleteManyArgs = {
    /**
     * Filter which collections to delete
     * 
    **/
    where?: collectionsWhereInput
  }


  /**
   * collections: findUniqueOrThrow
   */
  export type collectionsFindUniqueOrThrowArgs = collectionsFindUniqueArgsBase
      

  /**
   * collections: findFirstOrThrow
   */
  export type collectionsFindFirstOrThrowArgs = collectionsFindFirstArgsBase
      

  /**
   * collections without action
   */
  export type collectionsArgs = {
    /**
     * Select specific fields to fetch from the collections
     * 
    **/
    select?: collectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: collectionsInclude | null
  }



  /**
   * Model commentsLikes
   */


  export type AggregateCommentsLikes = {
    _count: CommentsLikesCountAggregateOutputType | null
    _avg: CommentsLikesAvgAggregateOutputType | null
    _sum: CommentsLikesSumAggregateOutputType | null
    _min: CommentsLikesMinAggregateOutputType | null
    _max: CommentsLikesMaxAggregateOutputType | null
  }

  export type CommentsLikesAvgAggregateOutputType = {
    id: number | null
    commentId: number | null
    userId: number | null
  }

  export type CommentsLikesSumAggregateOutputType = {
    id: number | null
    commentId: number | null
    userId: number | null
  }

  export type CommentsLikesMinAggregateOutputType = {
    id: number | null
    commentId: number | null
    userId: number | null
    positive: boolean | null
  }

  export type CommentsLikesMaxAggregateOutputType = {
    id: number | null
    commentId: number | null
    userId: number | null
    positive: boolean | null
  }

  export type CommentsLikesCountAggregateOutputType = {
    id: number
    commentId: number
    userId: number
    positive: number
    _all: number
  }


  export type CommentsLikesAvgAggregateInputType = {
    id?: true
    commentId?: true
    userId?: true
  }

  export type CommentsLikesSumAggregateInputType = {
    id?: true
    commentId?: true
    userId?: true
  }

  export type CommentsLikesMinAggregateInputType = {
    id?: true
    commentId?: true
    userId?: true
    positive?: true
  }

  export type CommentsLikesMaxAggregateInputType = {
    id?: true
    commentId?: true
    userId?: true
    positive?: true
  }

  export type CommentsLikesCountAggregateInputType = {
    id?: true
    commentId?: true
    userId?: true
    positive?: true
    _all?: true
  }

  export type CommentsLikesAggregateArgs = {
    /**
     * Filter which commentsLikes to aggregate.
     * 
    **/
    where?: commentsLikesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentsLikes to fetch.
     * 
    **/
    orderBy?: Enumerable<commentsLikesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: commentsLikesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentsLikes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentsLikes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned commentsLikes
    **/
    _count?: true | CommentsLikesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentsLikesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentsLikesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentsLikesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentsLikesMaxAggregateInputType
  }

  export type GetCommentsLikesAggregateType<T extends CommentsLikesAggregateArgs> = {
        [P in keyof T & keyof AggregateCommentsLikes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommentsLikes[P]>
      : GetScalarType<T[P], AggregateCommentsLikes[P]>
  }




  export type CommentsLikesGroupByArgs = {
    where?: commentsLikesWhereInput
    orderBy?: Enumerable<commentsLikesOrderByWithAggregationInput>
    by: Array<CommentsLikesScalarFieldEnum>
    having?: commentsLikesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentsLikesCountAggregateInputType | true
    _avg?: CommentsLikesAvgAggregateInputType
    _sum?: CommentsLikesSumAggregateInputType
    _min?: CommentsLikesMinAggregateInputType
    _max?: CommentsLikesMaxAggregateInputType
  }


  export type CommentsLikesGroupByOutputType = {
    id: number
    commentId: number
    userId: number
    positive: boolean | null
    _count: CommentsLikesCountAggregateOutputType | null
    _avg: CommentsLikesAvgAggregateOutputType | null
    _sum: CommentsLikesSumAggregateOutputType | null
    _min: CommentsLikesMinAggregateOutputType | null
    _max: CommentsLikesMaxAggregateOutputType | null
  }

  type GetCommentsLikesGroupByPayload<T extends CommentsLikesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CommentsLikesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentsLikesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentsLikesGroupByOutputType[P]>
            : GetScalarType<T[P], CommentsLikesGroupByOutputType[P]>
        }
      >
    >


  export type commentsLikesSelect = {
    id?: boolean
    commentId?: boolean
    userId?: boolean
    positive?: boolean
    comments?: boolean | commentsArgs
    users?: boolean | usersArgs
  }


  export type commentsLikesInclude = {
    comments?: boolean | commentsArgs
    users?: boolean | usersArgs
  } 

  export type commentsLikesGetPayload<S extends boolean | null | undefined | commentsLikesArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? commentsLikes :
    S extends undefined ? never :
    S extends { include: any } & (commentsLikesArgs | commentsLikesFindManyArgs)
    ? commentsLikes  & {
    [P in TrueKeys<S['include']>]:
        P extends 'comments' ? commentsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (commentsLikesArgs | commentsLikesFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'comments' ? commentsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof commentsLikes ? commentsLikes[P] : never
  } 
      : commentsLikes


  type commentsLikesCountArgs = Merge<
    Omit<commentsLikesFindManyArgs, 'select' | 'include'> & {
      select?: CommentsLikesCountAggregateInputType | true
    }
  >

  export interface commentsLikesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one CommentsLikes that matches the filter.
     * @param {commentsLikesFindUniqueArgs} args - Arguments to find a CommentsLikes
     * @example
     * // Get one CommentsLikes
     * const commentsLikes = await prisma.commentsLikes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends commentsLikesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, commentsLikesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'commentsLikes'> extends True ? Prisma__commentsLikesClient<commentsLikesGetPayload<T>> : Prisma__commentsLikesClient<commentsLikesGetPayload<T> | null, null>

    /**
     * Find the first CommentsLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsLikesFindFirstArgs} args - Arguments to find a CommentsLikes
     * @example
     * // Get one CommentsLikes
     * const commentsLikes = await prisma.commentsLikes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends commentsLikesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, commentsLikesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'commentsLikes'> extends True ? Prisma__commentsLikesClient<commentsLikesGetPayload<T>> : Prisma__commentsLikesClient<commentsLikesGetPayload<T> | null, null>

    /**
     * Find zero or more CommentsLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsLikesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommentsLikes
     * const commentsLikes = await prisma.commentsLikes.findMany()
     * 
     * // Get first 10 CommentsLikes
     * const commentsLikes = await prisma.commentsLikes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentsLikesWithIdOnly = await prisma.commentsLikes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends commentsLikesFindManyArgs>(
      args?: SelectSubset<T, commentsLikesFindManyArgs>
    ): PrismaPromise<Array<commentsLikesGetPayload<T>>>

    /**
     * Create a CommentsLikes.
     * @param {commentsLikesCreateArgs} args - Arguments to create a CommentsLikes.
     * @example
     * // Create one CommentsLikes
     * const CommentsLikes = await prisma.commentsLikes.create({
     *   data: {
     *     // ... data to create a CommentsLikes
     *   }
     * })
     * 
    **/
    create<T extends commentsLikesCreateArgs>(
      args: SelectSubset<T, commentsLikesCreateArgs>
    ): Prisma__commentsLikesClient<commentsLikesGetPayload<T>>

    /**
     * Create many CommentsLikes.
     *     @param {commentsLikesCreateManyArgs} args - Arguments to create many CommentsLikes.
     *     @example
     *     // Create many CommentsLikes
     *     const commentsLikes = await prisma.commentsLikes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends commentsLikesCreateManyArgs>(
      args?: SelectSubset<T, commentsLikesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CommentsLikes.
     * @param {commentsLikesDeleteArgs} args - Arguments to delete one CommentsLikes.
     * @example
     * // Delete one CommentsLikes
     * const CommentsLikes = await prisma.commentsLikes.delete({
     *   where: {
     *     // ... filter to delete one CommentsLikes
     *   }
     * })
     * 
    **/
    delete<T extends commentsLikesDeleteArgs>(
      args: SelectSubset<T, commentsLikesDeleteArgs>
    ): Prisma__commentsLikesClient<commentsLikesGetPayload<T>>

    /**
     * Update one CommentsLikes.
     * @param {commentsLikesUpdateArgs} args - Arguments to update one CommentsLikes.
     * @example
     * // Update one CommentsLikes
     * const commentsLikes = await prisma.commentsLikes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commentsLikesUpdateArgs>(
      args: SelectSubset<T, commentsLikesUpdateArgs>
    ): Prisma__commentsLikesClient<commentsLikesGetPayload<T>>

    /**
     * Delete zero or more CommentsLikes.
     * @param {commentsLikesDeleteManyArgs} args - Arguments to filter CommentsLikes to delete.
     * @example
     * // Delete a few CommentsLikes
     * const { count } = await prisma.commentsLikes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commentsLikesDeleteManyArgs>(
      args?: SelectSubset<T, commentsLikesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommentsLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsLikesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommentsLikes
     * const commentsLikes = await prisma.commentsLikes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commentsLikesUpdateManyArgs>(
      args: SelectSubset<T, commentsLikesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CommentsLikes.
     * @param {commentsLikesUpsertArgs} args - Arguments to update or create a CommentsLikes.
     * @example
     * // Update or create a CommentsLikes
     * const commentsLikes = await prisma.commentsLikes.upsert({
     *   create: {
     *     // ... data to create a CommentsLikes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommentsLikes we want to update
     *   }
     * })
    **/
    upsert<T extends commentsLikesUpsertArgs>(
      args: SelectSubset<T, commentsLikesUpsertArgs>
    ): Prisma__commentsLikesClient<commentsLikesGetPayload<T>>

    /**
     * Find one CommentsLikes that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {commentsLikesFindUniqueOrThrowArgs} args - Arguments to find a CommentsLikes
     * @example
     * // Get one CommentsLikes
     * const commentsLikes = await prisma.commentsLikes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends commentsLikesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, commentsLikesFindUniqueOrThrowArgs>
    ): Prisma__commentsLikesClient<commentsLikesGetPayload<T>>

    /**
     * Find the first CommentsLikes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsLikesFindFirstOrThrowArgs} args - Arguments to find a CommentsLikes
     * @example
     * // Get one CommentsLikes
     * const commentsLikes = await prisma.commentsLikes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends commentsLikesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, commentsLikesFindFirstOrThrowArgs>
    ): Prisma__commentsLikesClient<commentsLikesGetPayload<T>>

    /**
     * Count the number of CommentsLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsLikesCountArgs} args - Arguments to filter CommentsLikes to count.
     * @example
     * // Count the number of CommentsLikes
     * const count = await prisma.commentsLikes.count({
     *   where: {
     *     // ... the filter for the CommentsLikes we want to count
     *   }
     * })
    **/
    count<T extends commentsLikesCountArgs>(
      args?: Subset<T, commentsLikesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentsLikesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommentsLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsLikesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentsLikesAggregateArgs>(args: Subset<T, CommentsLikesAggregateArgs>): PrismaPromise<GetCommentsLikesAggregateType<T>>

    /**
     * Group by CommentsLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsLikesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentsLikesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentsLikesGroupByArgs['orderBy'] }
        : { orderBy?: CommentsLikesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentsLikesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentsLikesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for commentsLikes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__commentsLikesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    comments<T extends commentsArgs= {}>(args?: Subset<T, commentsArgs>): Prisma__commentsClient<commentsGetPayload<T> | Null>;

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * commentsLikes base type for findUnique actions
   */
  export type commentsLikesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the commentsLikes
     * 
    **/
    select?: commentsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsLikesInclude | null
    /**
     * Filter, which commentsLikes to fetch.
     * 
    **/
    where: commentsLikesWhereUniqueInput
  }

  /**
   * commentsLikes: findUnique
   */
  export interface commentsLikesFindUniqueArgs extends commentsLikesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * commentsLikes base type for findFirst actions
   */
  export type commentsLikesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the commentsLikes
     * 
    **/
    select?: commentsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsLikesInclude | null
    /**
     * Filter, which commentsLikes to fetch.
     * 
    **/
    where?: commentsLikesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentsLikes to fetch.
     * 
    **/
    orderBy?: Enumerable<commentsLikesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commentsLikes.
     * 
    **/
    cursor?: commentsLikesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentsLikes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentsLikes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commentsLikes.
     * 
    **/
    distinct?: Enumerable<CommentsLikesScalarFieldEnum>
  }

  /**
   * commentsLikes: findFirst
   */
  export interface commentsLikesFindFirstArgs extends commentsLikesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * commentsLikes findMany
   */
  export type commentsLikesFindManyArgs = {
    /**
     * Select specific fields to fetch from the commentsLikes
     * 
    **/
    select?: commentsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsLikesInclude | null
    /**
     * Filter, which commentsLikes to fetch.
     * 
    **/
    where?: commentsLikesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentsLikes to fetch.
     * 
    **/
    orderBy?: Enumerable<commentsLikesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing commentsLikes.
     * 
    **/
    cursor?: commentsLikesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentsLikes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentsLikes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CommentsLikesScalarFieldEnum>
  }


  /**
   * commentsLikes create
   */
  export type commentsLikesCreateArgs = {
    /**
     * Select specific fields to fetch from the commentsLikes
     * 
    **/
    select?: commentsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsLikesInclude | null
    /**
     * The data needed to create a commentsLikes.
     * 
    **/
    data: XOR<commentsLikesCreateInput, commentsLikesUncheckedCreateInput>
  }


  /**
   * commentsLikes createMany
   */
  export type commentsLikesCreateManyArgs = {
    /**
     * The data used to create many commentsLikes.
     * 
    **/
    data: Enumerable<commentsLikesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * commentsLikes update
   */
  export type commentsLikesUpdateArgs = {
    /**
     * Select specific fields to fetch from the commentsLikes
     * 
    **/
    select?: commentsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsLikesInclude | null
    /**
     * The data needed to update a commentsLikes.
     * 
    **/
    data: XOR<commentsLikesUpdateInput, commentsLikesUncheckedUpdateInput>
    /**
     * Choose, which commentsLikes to update.
     * 
    **/
    where: commentsLikesWhereUniqueInput
  }


  /**
   * commentsLikes updateMany
   */
  export type commentsLikesUpdateManyArgs = {
    /**
     * The data used to update commentsLikes.
     * 
    **/
    data: XOR<commentsLikesUpdateManyMutationInput, commentsLikesUncheckedUpdateManyInput>
    /**
     * Filter which commentsLikes to update
     * 
    **/
    where?: commentsLikesWhereInput
  }


  /**
   * commentsLikes upsert
   */
  export type commentsLikesUpsertArgs = {
    /**
     * Select specific fields to fetch from the commentsLikes
     * 
    **/
    select?: commentsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsLikesInclude | null
    /**
     * The filter to search for the commentsLikes to update in case it exists.
     * 
    **/
    where: commentsLikesWhereUniqueInput
    /**
     * In case the commentsLikes found by the `where` argument doesn't exist, create a new commentsLikes with this data.
     * 
    **/
    create: XOR<commentsLikesCreateInput, commentsLikesUncheckedCreateInput>
    /**
     * In case the commentsLikes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<commentsLikesUpdateInput, commentsLikesUncheckedUpdateInput>
  }


  /**
   * commentsLikes delete
   */
  export type commentsLikesDeleteArgs = {
    /**
     * Select specific fields to fetch from the commentsLikes
     * 
    **/
    select?: commentsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsLikesInclude | null
    /**
     * Filter which commentsLikes to delete.
     * 
    **/
    where: commentsLikesWhereUniqueInput
  }


  /**
   * commentsLikes deleteMany
   */
  export type commentsLikesDeleteManyArgs = {
    /**
     * Filter which commentsLikes to delete
     * 
    **/
    where?: commentsLikesWhereInput
  }


  /**
   * commentsLikes: findUniqueOrThrow
   */
  export type commentsLikesFindUniqueOrThrowArgs = commentsLikesFindUniqueArgsBase
      

  /**
   * commentsLikes: findFirstOrThrow
   */
  export type commentsLikesFindFirstOrThrowArgs = commentsLikesFindFirstArgsBase
      

  /**
   * commentsLikes without action
   */
  export type commentsLikesArgs = {
    /**
     * Select specific fields to fetch from the commentsLikes
     * 
    **/
    select?: commentsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentsLikesInclude | null
  }



  /**
   * Model artworksAddresses
   */


  export type AggregateArtworksAddresses = {
    _count: ArtworksAddressesCountAggregateOutputType | null
    _avg: ArtworksAddressesAvgAggregateOutputType | null
    _sum: ArtworksAddressesSumAggregateOutputType | null
    _min: ArtworksAddressesMinAggregateOutputType | null
    _max: ArtworksAddressesMaxAggregateOutputType | null
  }

  export type ArtworksAddressesAvgAggregateOutputType = {
    id: number | null
    artworkId: number | null
  }

  export type ArtworksAddressesSumAggregateOutputType = {
    id: number | null
    artworkId: number | null
  }

  export type ArtworksAddressesMinAggregateOutputType = {
    id: number | null
    artworkId: number | null
    address: string | null
  }

  export type ArtworksAddressesMaxAggregateOutputType = {
    id: number | null
    artworkId: number | null
    address: string | null
  }

  export type ArtworksAddressesCountAggregateOutputType = {
    id: number
    artworkId: number
    address: number
    _all: number
  }


  export type ArtworksAddressesAvgAggregateInputType = {
    id?: true
    artworkId?: true
  }

  export type ArtworksAddressesSumAggregateInputType = {
    id?: true
    artworkId?: true
  }

  export type ArtworksAddressesMinAggregateInputType = {
    id?: true
    artworkId?: true
    address?: true
  }

  export type ArtworksAddressesMaxAggregateInputType = {
    id?: true
    artworkId?: true
    address?: true
  }

  export type ArtworksAddressesCountAggregateInputType = {
    id?: true
    artworkId?: true
    address?: true
    _all?: true
  }

  export type ArtworksAddressesAggregateArgs = {
    /**
     * Filter which artworksAddresses to aggregate.
     * 
    **/
    where?: artworksAddressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksAddressesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: artworksAddressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksAddresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned artworksAddresses
    **/
    _count?: true | ArtworksAddressesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtworksAddressesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtworksAddressesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtworksAddressesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtworksAddressesMaxAggregateInputType
  }

  export type GetArtworksAddressesAggregateType<T extends ArtworksAddressesAggregateArgs> = {
        [P in keyof T & keyof AggregateArtworksAddresses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtworksAddresses[P]>
      : GetScalarType<T[P], AggregateArtworksAddresses[P]>
  }




  export type ArtworksAddressesGroupByArgs = {
    where?: artworksAddressesWhereInput
    orderBy?: Enumerable<artworksAddressesOrderByWithAggregationInput>
    by: Array<ArtworksAddressesScalarFieldEnum>
    having?: artworksAddressesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtworksAddressesCountAggregateInputType | true
    _avg?: ArtworksAddressesAvgAggregateInputType
    _sum?: ArtworksAddressesSumAggregateInputType
    _min?: ArtworksAddressesMinAggregateInputType
    _max?: ArtworksAddressesMaxAggregateInputType
  }


  export type ArtworksAddressesGroupByOutputType = {
    id: number
    artworkId: number
    address: string | null
    _count: ArtworksAddressesCountAggregateOutputType | null
    _avg: ArtworksAddressesAvgAggregateOutputType | null
    _sum: ArtworksAddressesSumAggregateOutputType | null
    _min: ArtworksAddressesMinAggregateOutputType | null
    _max: ArtworksAddressesMaxAggregateOutputType | null
  }

  type GetArtworksAddressesGroupByPayload<T extends ArtworksAddressesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ArtworksAddressesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtworksAddressesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtworksAddressesGroupByOutputType[P]>
            : GetScalarType<T[P], ArtworksAddressesGroupByOutputType[P]>
        }
      >
    >


  export type artworksAddressesSelect = {
    id?: boolean
    artworkId?: boolean
    address?: boolean
    artworks?: boolean | artworksArgs
  }


  export type artworksAddressesInclude = {
    artworks?: boolean | artworksArgs
  } 

  export type artworksAddressesGetPayload<S extends boolean | null | undefined | artworksAddressesArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? artworksAddresses :
    S extends undefined ? never :
    S extends { include: any } & (artworksAddressesArgs | artworksAddressesFindManyArgs)
    ? artworksAddresses  & {
    [P in TrueKeys<S['include']>]:
        P extends 'artworks' ? artworksGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (artworksAddressesArgs | artworksAddressesFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'artworks' ? artworksGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof artworksAddresses ? artworksAddresses[P] : never
  } 
      : artworksAddresses


  type artworksAddressesCountArgs = Merge<
    Omit<artworksAddressesFindManyArgs, 'select' | 'include'> & {
      select?: ArtworksAddressesCountAggregateInputType | true
    }
  >

  export interface artworksAddressesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ArtworksAddresses that matches the filter.
     * @param {artworksAddressesFindUniqueArgs} args - Arguments to find a ArtworksAddresses
     * @example
     * // Get one ArtworksAddresses
     * const artworksAddresses = await prisma.artworksAddresses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends artworksAddressesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, artworksAddressesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'artworksAddresses'> extends True ? Prisma__artworksAddressesClient<artworksAddressesGetPayload<T>> : Prisma__artworksAddressesClient<artworksAddressesGetPayload<T> | null, null>

    /**
     * Find the first ArtworksAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksAddressesFindFirstArgs} args - Arguments to find a ArtworksAddresses
     * @example
     * // Get one ArtworksAddresses
     * const artworksAddresses = await prisma.artworksAddresses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends artworksAddressesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, artworksAddressesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'artworksAddresses'> extends True ? Prisma__artworksAddressesClient<artworksAddressesGetPayload<T>> : Prisma__artworksAddressesClient<artworksAddressesGetPayload<T> | null, null>

    /**
     * Find zero or more ArtworksAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksAddressesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArtworksAddresses
     * const artworksAddresses = await prisma.artworksAddresses.findMany()
     * 
     * // Get first 10 ArtworksAddresses
     * const artworksAddresses = await prisma.artworksAddresses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artworksAddressesWithIdOnly = await prisma.artworksAddresses.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends artworksAddressesFindManyArgs>(
      args?: SelectSubset<T, artworksAddressesFindManyArgs>
    ): PrismaPromise<Array<artworksAddressesGetPayload<T>>>

    /**
     * Create a ArtworksAddresses.
     * @param {artworksAddressesCreateArgs} args - Arguments to create a ArtworksAddresses.
     * @example
     * // Create one ArtworksAddresses
     * const ArtworksAddresses = await prisma.artworksAddresses.create({
     *   data: {
     *     // ... data to create a ArtworksAddresses
     *   }
     * })
     * 
    **/
    create<T extends artworksAddressesCreateArgs>(
      args: SelectSubset<T, artworksAddressesCreateArgs>
    ): Prisma__artworksAddressesClient<artworksAddressesGetPayload<T>>

    /**
     * Create many ArtworksAddresses.
     *     @param {artworksAddressesCreateManyArgs} args - Arguments to create many ArtworksAddresses.
     *     @example
     *     // Create many ArtworksAddresses
     *     const artworksAddresses = await prisma.artworksAddresses.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends artworksAddressesCreateManyArgs>(
      args?: SelectSubset<T, artworksAddressesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ArtworksAddresses.
     * @param {artworksAddressesDeleteArgs} args - Arguments to delete one ArtworksAddresses.
     * @example
     * // Delete one ArtworksAddresses
     * const ArtworksAddresses = await prisma.artworksAddresses.delete({
     *   where: {
     *     // ... filter to delete one ArtworksAddresses
     *   }
     * })
     * 
    **/
    delete<T extends artworksAddressesDeleteArgs>(
      args: SelectSubset<T, artworksAddressesDeleteArgs>
    ): Prisma__artworksAddressesClient<artworksAddressesGetPayload<T>>

    /**
     * Update one ArtworksAddresses.
     * @param {artworksAddressesUpdateArgs} args - Arguments to update one ArtworksAddresses.
     * @example
     * // Update one ArtworksAddresses
     * const artworksAddresses = await prisma.artworksAddresses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends artworksAddressesUpdateArgs>(
      args: SelectSubset<T, artworksAddressesUpdateArgs>
    ): Prisma__artworksAddressesClient<artworksAddressesGetPayload<T>>

    /**
     * Delete zero or more ArtworksAddresses.
     * @param {artworksAddressesDeleteManyArgs} args - Arguments to filter ArtworksAddresses to delete.
     * @example
     * // Delete a few ArtworksAddresses
     * const { count } = await prisma.artworksAddresses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends artworksAddressesDeleteManyArgs>(
      args?: SelectSubset<T, artworksAddressesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArtworksAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksAddressesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArtworksAddresses
     * const artworksAddresses = await prisma.artworksAddresses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends artworksAddressesUpdateManyArgs>(
      args: SelectSubset<T, artworksAddressesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ArtworksAddresses.
     * @param {artworksAddressesUpsertArgs} args - Arguments to update or create a ArtworksAddresses.
     * @example
     * // Update or create a ArtworksAddresses
     * const artworksAddresses = await prisma.artworksAddresses.upsert({
     *   create: {
     *     // ... data to create a ArtworksAddresses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArtworksAddresses we want to update
     *   }
     * })
    **/
    upsert<T extends artworksAddressesUpsertArgs>(
      args: SelectSubset<T, artworksAddressesUpsertArgs>
    ): Prisma__artworksAddressesClient<artworksAddressesGetPayload<T>>

    /**
     * Find one ArtworksAddresses that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {artworksAddressesFindUniqueOrThrowArgs} args - Arguments to find a ArtworksAddresses
     * @example
     * // Get one ArtworksAddresses
     * const artworksAddresses = await prisma.artworksAddresses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends artworksAddressesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, artworksAddressesFindUniqueOrThrowArgs>
    ): Prisma__artworksAddressesClient<artworksAddressesGetPayload<T>>

    /**
     * Find the first ArtworksAddresses that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksAddressesFindFirstOrThrowArgs} args - Arguments to find a ArtworksAddresses
     * @example
     * // Get one ArtworksAddresses
     * const artworksAddresses = await prisma.artworksAddresses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends artworksAddressesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, artworksAddressesFindFirstOrThrowArgs>
    ): Prisma__artworksAddressesClient<artworksAddressesGetPayload<T>>

    /**
     * Count the number of ArtworksAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksAddressesCountArgs} args - Arguments to filter ArtworksAddresses to count.
     * @example
     * // Count the number of ArtworksAddresses
     * const count = await prisma.artworksAddresses.count({
     *   where: {
     *     // ... the filter for the ArtworksAddresses we want to count
     *   }
     * })
    **/
    count<T extends artworksAddressesCountArgs>(
      args?: Subset<T, artworksAddressesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtworksAddressesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArtworksAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksAddressesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtworksAddressesAggregateArgs>(args: Subset<T, ArtworksAddressesAggregateArgs>): PrismaPromise<GetArtworksAddressesAggregateType<T>>

    /**
     * Group by ArtworksAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksAddressesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtworksAddressesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtworksAddressesGroupByArgs['orderBy'] }
        : { orderBy?: ArtworksAddressesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtworksAddressesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtworksAddressesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for artworksAddresses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__artworksAddressesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    artworks<T extends artworksArgs= {}>(args?: Subset<T, artworksArgs>): Prisma__artworksClient<artworksGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * artworksAddresses base type for findUnique actions
   */
  export type artworksAddressesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the artworksAddresses
     * 
    **/
    select?: artworksAddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksAddressesInclude | null
    /**
     * Filter, which artworksAddresses to fetch.
     * 
    **/
    where: artworksAddressesWhereUniqueInput
  }

  /**
   * artworksAddresses: findUnique
   */
  export interface artworksAddressesFindUniqueArgs extends artworksAddressesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworksAddresses base type for findFirst actions
   */
  export type artworksAddressesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the artworksAddresses
     * 
    **/
    select?: artworksAddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksAddressesInclude | null
    /**
     * Filter, which artworksAddresses to fetch.
     * 
    **/
    where?: artworksAddressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksAddressesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artworksAddresses.
     * 
    **/
    cursor?: artworksAddressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksAddresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artworksAddresses.
     * 
    **/
    distinct?: Enumerable<ArtworksAddressesScalarFieldEnum>
  }

  /**
   * artworksAddresses: findFirst
   */
  export interface artworksAddressesFindFirstArgs extends artworksAddressesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworksAddresses findMany
   */
  export type artworksAddressesFindManyArgs = {
    /**
     * Select specific fields to fetch from the artworksAddresses
     * 
    **/
    select?: artworksAddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksAddressesInclude | null
    /**
     * Filter, which artworksAddresses to fetch.
     * 
    **/
    where?: artworksAddressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksAddressesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing artworksAddresses.
     * 
    **/
    cursor?: artworksAddressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksAddresses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ArtworksAddressesScalarFieldEnum>
  }


  /**
   * artworksAddresses create
   */
  export type artworksAddressesCreateArgs = {
    /**
     * Select specific fields to fetch from the artworksAddresses
     * 
    **/
    select?: artworksAddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksAddressesInclude | null
    /**
     * The data needed to create a artworksAddresses.
     * 
    **/
    data: XOR<artworksAddressesCreateInput, artworksAddressesUncheckedCreateInput>
  }


  /**
   * artworksAddresses createMany
   */
  export type artworksAddressesCreateManyArgs = {
    /**
     * The data used to create many artworksAddresses.
     * 
    **/
    data: Enumerable<artworksAddressesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * artworksAddresses update
   */
  export type artworksAddressesUpdateArgs = {
    /**
     * Select specific fields to fetch from the artworksAddresses
     * 
    **/
    select?: artworksAddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksAddressesInclude | null
    /**
     * The data needed to update a artworksAddresses.
     * 
    **/
    data: XOR<artworksAddressesUpdateInput, artworksAddressesUncheckedUpdateInput>
    /**
     * Choose, which artworksAddresses to update.
     * 
    **/
    where: artworksAddressesWhereUniqueInput
  }


  /**
   * artworksAddresses updateMany
   */
  export type artworksAddressesUpdateManyArgs = {
    /**
     * The data used to update artworksAddresses.
     * 
    **/
    data: XOR<artworksAddressesUpdateManyMutationInput, artworksAddressesUncheckedUpdateManyInput>
    /**
     * Filter which artworksAddresses to update
     * 
    **/
    where?: artworksAddressesWhereInput
  }


  /**
   * artworksAddresses upsert
   */
  export type artworksAddressesUpsertArgs = {
    /**
     * Select specific fields to fetch from the artworksAddresses
     * 
    **/
    select?: artworksAddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksAddressesInclude | null
    /**
     * The filter to search for the artworksAddresses to update in case it exists.
     * 
    **/
    where: artworksAddressesWhereUniqueInput
    /**
     * In case the artworksAddresses found by the `where` argument doesn't exist, create a new artworksAddresses with this data.
     * 
    **/
    create: XOR<artworksAddressesCreateInput, artworksAddressesUncheckedCreateInput>
    /**
     * In case the artworksAddresses was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<artworksAddressesUpdateInput, artworksAddressesUncheckedUpdateInput>
  }


  /**
   * artworksAddresses delete
   */
  export type artworksAddressesDeleteArgs = {
    /**
     * Select specific fields to fetch from the artworksAddresses
     * 
    **/
    select?: artworksAddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksAddressesInclude | null
    /**
     * Filter which artworksAddresses to delete.
     * 
    **/
    where: artworksAddressesWhereUniqueInput
  }


  /**
   * artworksAddresses deleteMany
   */
  export type artworksAddressesDeleteManyArgs = {
    /**
     * Filter which artworksAddresses to delete
     * 
    **/
    where?: artworksAddressesWhereInput
  }


  /**
   * artworksAddresses: findUniqueOrThrow
   */
  export type artworksAddressesFindUniqueOrThrowArgs = artworksAddressesFindUniqueArgsBase
      

  /**
   * artworksAddresses: findFirstOrThrow
   */
  export type artworksAddressesFindFirstOrThrowArgs = artworksAddressesFindFirstArgsBase
      

  /**
   * artworksAddresses without action
   */
  export type artworksAddressesArgs = {
    /**
     * Select specific fields to fetch from the artworksAddresses
     * 
    **/
    select?: artworksAddressesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksAddressesInclude | null
  }



  /**
   * Model artworksCollaborators
   */


  export type AggregateArtworksCollaborators = {
    _count: ArtworksCollaboratorsCountAggregateOutputType | null
    _avg: ArtworksCollaboratorsAvgAggregateOutputType | null
    _sum: ArtworksCollaboratorsSumAggregateOutputType | null
    _min: ArtworksCollaboratorsMinAggregateOutputType | null
    _max: ArtworksCollaboratorsMaxAggregateOutputType | null
  }

  export type ArtworksCollaboratorsAvgAggregateOutputType = {
    id: number | null
    artistId: number | null
    artworkId: number | null
  }

  export type ArtworksCollaboratorsSumAggregateOutputType = {
    id: number | null
    artistId: number | null
    artworkId: number | null
  }

  export type ArtworksCollaboratorsMinAggregateOutputType = {
    id: number | null
    artistId: number | null
    artworkId: number | null
  }

  export type ArtworksCollaboratorsMaxAggregateOutputType = {
    id: number | null
    artistId: number | null
    artworkId: number | null
  }

  export type ArtworksCollaboratorsCountAggregateOutputType = {
    id: number
    artistId: number
    artworkId: number
    _all: number
  }


  export type ArtworksCollaboratorsAvgAggregateInputType = {
    id?: true
    artistId?: true
    artworkId?: true
  }

  export type ArtworksCollaboratorsSumAggregateInputType = {
    id?: true
    artistId?: true
    artworkId?: true
  }

  export type ArtworksCollaboratorsMinAggregateInputType = {
    id?: true
    artistId?: true
    artworkId?: true
  }

  export type ArtworksCollaboratorsMaxAggregateInputType = {
    id?: true
    artistId?: true
    artworkId?: true
  }

  export type ArtworksCollaboratorsCountAggregateInputType = {
    id?: true
    artistId?: true
    artworkId?: true
    _all?: true
  }

  export type ArtworksCollaboratorsAggregateArgs = {
    /**
     * Filter which artworksCollaborators to aggregate.
     * 
    **/
    where?: artworksCollaboratorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksCollaborators to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksCollaboratorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: artworksCollaboratorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksCollaborators from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksCollaborators.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned artworksCollaborators
    **/
    _count?: true | ArtworksCollaboratorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtworksCollaboratorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtworksCollaboratorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtworksCollaboratorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtworksCollaboratorsMaxAggregateInputType
  }

  export type GetArtworksCollaboratorsAggregateType<T extends ArtworksCollaboratorsAggregateArgs> = {
        [P in keyof T & keyof AggregateArtworksCollaborators]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtworksCollaborators[P]>
      : GetScalarType<T[P], AggregateArtworksCollaborators[P]>
  }




  export type ArtworksCollaboratorsGroupByArgs = {
    where?: artworksCollaboratorsWhereInput
    orderBy?: Enumerable<artworksCollaboratorsOrderByWithAggregationInput>
    by: Array<ArtworksCollaboratorsScalarFieldEnum>
    having?: artworksCollaboratorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtworksCollaboratorsCountAggregateInputType | true
    _avg?: ArtworksCollaboratorsAvgAggregateInputType
    _sum?: ArtworksCollaboratorsSumAggregateInputType
    _min?: ArtworksCollaboratorsMinAggregateInputType
    _max?: ArtworksCollaboratorsMaxAggregateInputType
  }


  export type ArtworksCollaboratorsGroupByOutputType = {
    id: number
    artistId: number
    artworkId: number
    _count: ArtworksCollaboratorsCountAggregateOutputType | null
    _avg: ArtworksCollaboratorsAvgAggregateOutputType | null
    _sum: ArtworksCollaboratorsSumAggregateOutputType | null
    _min: ArtworksCollaboratorsMinAggregateOutputType | null
    _max: ArtworksCollaboratorsMaxAggregateOutputType | null
  }

  type GetArtworksCollaboratorsGroupByPayload<T extends ArtworksCollaboratorsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ArtworksCollaboratorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtworksCollaboratorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtworksCollaboratorsGroupByOutputType[P]>
            : GetScalarType<T[P], ArtworksCollaboratorsGroupByOutputType[P]>
        }
      >
    >


  export type artworksCollaboratorsSelect = {
    id?: boolean
    artistId?: boolean
    artworkId?: boolean
    artworks?: boolean | artworksArgs
    users?: boolean | usersArgs
  }


  export type artworksCollaboratorsInclude = {
    artworks?: boolean | artworksArgs
    users?: boolean | usersArgs
  } 

  export type artworksCollaboratorsGetPayload<S extends boolean | null | undefined | artworksCollaboratorsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? artworksCollaborators :
    S extends undefined ? never :
    S extends { include: any } & (artworksCollaboratorsArgs | artworksCollaboratorsFindManyArgs)
    ? artworksCollaborators  & {
    [P in TrueKeys<S['include']>]:
        P extends 'artworks' ? artworksGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (artworksCollaboratorsArgs | artworksCollaboratorsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'artworks' ? artworksGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof artworksCollaborators ? artworksCollaborators[P] : never
  } 
      : artworksCollaborators


  type artworksCollaboratorsCountArgs = Merge<
    Omit<artworksCollaboratorsFindManyArgs, 'select' | 'include'> & {
      select?: ArtworksCollaboratorsCountAggregateInputType | true
    }
  >

  export interface artworksCollaboratorsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ArtworksCollaborators that matches the filter.
     * @param {artworksCollaboratorsFindUniqueArgs} args - Arguments to find a ArtworksCollaborators
     * @example
     * // Get one ArtworksCollaborators
     * const artworksCollaborators = await prisma.artworksCollaborators.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends artworksCollaboratorsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, artworksCollaboratorsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'artworksCollaborators'> extends True ? Prisma__artworksCollaboratorsClient<artworksCollaboratorsGetPayload<T>> : Prisma__artworksCollaboratorsClient<artworksCollaboratorsGetPayload<T> | null, null>

    /**
     * Find the first ArtworksCollaborators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksCollaboratorsFindFirstArgs} args - Arguments to find a ArtworksCollaborators
     * @example
     * // Get one ArtworksCollaborators
     * const artworksCollaborators = await prisma.artworksCollaborators.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends artworksCollaboratorsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, artworksCollaboratorsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'artworksCollaborators'> extends True ? Prisma__artworksCollaboratorsClient<artworksCollaboratorsGetPayload<T>> : Prisma__artworksCollaboratorsClient<artworksCollaboratorsGetPayload<T> | null, null>

    /**
     * Find zero or more ArtworksCollaborators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksCollaboratorsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArtworksCollaborators
     * const artworksCollaborators = await prisma.artworksCollaborators.findMany()
     * 
     * // Get first 10 ArtworksCollaborators
     * const artworksCollaborators = await prisma.artworksCollaborators.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artworksCollaboratorsWithIdOnly = await prisma.artworksCollaborators.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends artworksCollaboratorsFindManyArgs>(
      args?: SelectSubset<T, artworksCollaboratorsFindManyArgs>
    ): PrismaPromise<Array<artworksCollaboratorsGetPayload<T>>>

    /**
     * Create a ArtworksCollaborators.
     * @param {artworksCollaboratorsCreateArgs} args - Arguments to create a ArtworksCollaborators.
     * @example
     * // Create one ArtworksCollaborators
     * const ArtworksCollaborators = await prisma.artworksCollaborators.create({
     *   data: {
     *     // ... data to create a ArtworksCollaborators
     *   }
     * })
     * 
    **/
    create<T extends artworksCollaboratorsCreateArgs>(
      args: SelectSubset<T, artworksCollaboratorsCreateArgs>
    ): Prisma__artworksCollaboratorsClient<artworksCollaboratorsGetPayload<T>>

    /**
     * Create many ArtworksCollaborators.
     *     @param {artworksCollaboratorsCreateManyArgs} args - Arguments to create many ArtworksCollaborators.
     *     @example
     *     // Create many ArtworksCollaborators
     *     const artworksCollaborators = await prisma.artworksCollaborators.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends artworksCollaboratorsCreateManyArgs>(
      args?: SelectSubset<T, artworksCollaboratorsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ArtworksCollaborators.
     * @param {artworksCollaboratorsDeleteArgs} args - Arguments to delete one ArtworksCollaborators.
     * @example
     * // Delete one ArtworksCollaborators
     * const ArtworksCollaborators = await prisma.artworksCollaborators.delete({
     *   where: {
     *     // ... filter to delete one ArtworksCollaborators
     *   }
     * })
     * 
    **/
    delete<T extends artworksCollaboratorsDeleteArgs>(
      args: SelectSubset<T, artworksCollaboratorsDeleteArgs>
    ): Prisma__artworksCollaboratorsClient<artworksCollaboratorsGetPayload<T>>

    /**
     * Update one ArtworksCollaborators.
     * @param {artworksCollaboratorsUpdateArgs} args - Arguments to update one ArtworksCollaborators.
     * @example
     * // Update one ArtworksCollaborators
     * const artworksCollaborators = await prisma.artworksCollaborators.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends artworksCollaboratorsUpdateArgs>(
      args: SelectSubset<T, artworksCollaboratorsUpdateArgs>
    ): Prisma__artworksCollaboratorsClient<artworksCollaboratorsGetPayload<T>>

    /**
     * Delete zero or more ArtworksCollaborators.
     * @param {artworksCollaboratorsDeleteManyArgs} args - Arguments to filter ArtworksCollaborators to delete.
     * @example
     * // Delete a few ArtworksCollaborators
     * const { count } = await prisma.artworksCollaborators.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends artworksCollaboratorsDeleteManyArgs>(
      args?: SelectSubset<T, artworksCollaboratorsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArtworksCollaborators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksCollaboratorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArtworksCollaborators
     * const artworksCollaborators = await prisma.artworksCollaborators.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends artworksCollaboratorsUpdateManyArgs>(
      args: SelectSubset<T, artworksCollaboratorsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ArtworksCollaborators.
     * @param {artworksCollaboratorsUpsertArgs} args - Arguments to update or create a ArtworksCollaborators.
     * @example
     * // Update or create a ArtworksCollaborators
     * const artworksCollaborators = await prisma.artworksCollaborators.upsert({
     *   create: {
     *     // ... data to create a ArtworksCollaborators
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArtworksCollaborators we want to update
     *   }
     * })
    **/
    upsert<T extends artworksCollaboratorsUpsertArgs>(
      args: SelectSubset<T, artworksCollaboratorsUpsertArgs>
    ): Prisma__artworksCollaboratorsClient<artworksCollaboratorsGetPayload<T>>

    /**
     * Find one ArtworksCollaborators that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {artworksCollaboratorsFindUniqueOrThrowArgs} args - Arguments to find a ArtworksCollaborators
     * @example
     * // Get one ArtworksCollaborators
     * const artworksCollaborators = await prisma.artworksCollaborators.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends artworksCollaboratorsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, artworksCollaboratorsFindUniqueOrThrowArgs>
    ): Prisma__artworksCollaboratorsClient<artworksCollaboratorsGetPayload<T>>

    /**
     * Find the first ArtworksCollaborators that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksCollaboratorsFindFirstOrThrowArgs} args - Arguments to find a ArtworksCollaborators
     * @example
     * // Get one ArtworksCollaborators
     * const artworksCollaborators = await prisma.artworksCollaborators.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends artworksCollaboratorsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, artworksCollaboratorsFindFirstOrThrowArgs>
    ): Prisma__artworksCollaboratorsClient<artworksCollaboratorsGetPayload<T>>

    /**
     * Count the number of ArtworksCollaborators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksCollaboratorsCountArgs} args - Arguments to filter ArtworksCollaborators to count.
     * @example
     * // Count the number of ArtworksCollaborators
     * const count = await prisma.artworksCollaborators.count({
     *   where: {
     *     // ... the filter for the ArtworksCollaborators we want to count
     *   }
     * })
    **/
    count<T extends artworksCollaboratorsCountArgs>(
      args?: Subset<T, artworksCollaboratorsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtworksCollaboratorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArtworksCollaborators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksCollaboratorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtworksCollaboratorsAggregateArgs>(args: Subset<T, ArtworksCollaboratorsAggregateArgs>): PrismaPromise<GetArtworksCollaboratorsAggregateType<T>>

    /**
     * Group by ArtworksCollaborators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksCollaboratorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtworksCollaboratorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtworksCollaboratorsGroupByArgs['orderBy'] }
        : { orderBy?: ArtworksCollaboratorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtworksCollaboratorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtworksCollaboratorsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for artworksCollaborators.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__artworksCollaboratorsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    artworks<T extends artworksArgs= {}>(args?: Subset<T, artworksArgs>): Prisma__artworksClient<artworksGetPayload<T> | Null>;

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * artworksCollaborators base type for findUnique actions
   */
  export type artworksCollaboratorsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the artworksCollaborators
     * 
    **/
    select?: artworksCollaboratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksCollaboratorsInclude | null
    /**
     * Filter, which artworksCollaborators to fetch.
     * 
    **/
    where: artworksCollaboratorsWhereUniqueInput
  }

  /**
   * artworksCollaborators: findUnique
   */
  export interface artworksCollaboratorsFindUniqueArgs extends artworksCollaboratorsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworksCollaborators base type for findFirst actions
   */
  export type artworksCollaboratorsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the artworksCollaborators
     * 
    **/
    select?: artworksCollaboratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksCollaboratorsInclude | null
    /**
     * Filter, which artworksCollaborators to fetch.
     * 
    **/
    where?: artworksCollaboratorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksCollaborators to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksCollaboratorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artworksCollaborators.
     * 
    **/
    cursor?: artworksCollaboratorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksCollaborators from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksCollaborators.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artworksCollaborators.
     * 
    **/
    distinct?: Enumerable<ArtworksCollaboratorsScalarFieldEnum>
  }

  /**
   * artworksCollaborators: findFirst
   */
  export interface artworksCollaboratorsFindFirstArgs extends artworksCollaboratorsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworksCollaborators findMany
   */
  export type artworksCollaboratorsFindManyArgs = {
    /**
     * Select specific fields to fetch from the artworksCollaborators
     * 
    **/
    select?: artworksCollaboratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksCollaboratorsInclude | null
    /**
     * Filter, which artworksCollaborators to fetch.
     * 
    **/
    where?: artworksCollaboratorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksCollaborators to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksCollaboratorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing artworksCollaborators.
     * 
    **/
    cursor?: artworksCollaboratorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksCollaborators from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksCollaborators.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ArtworksCollaboratorsScalarFieldEnum>
  }


  /**
   * artworksCollaborators create
   */
  export type artworksCollaboratorsCreateArgs = {
    /**
     * Select specific fields to fetch from the artworksCollaborators
     * 
    **/
    select?: artworksCollaboratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksCollaboratorsInclude | null
    /**
     * The data needed to create a artworksCollaborators.
     * 
    **/
    data: XOR<artworksCollaboratorsCreateInput, artworksCollaboratorsUncheckedCreateInput>
  }


  /**
   * artworksCollaborators createMany
   */
  export type artworksCollaboratorsCreateManyArgs = {
    /**
     * The data used to create many artworksCollaborators.
     * 
    **/
    data: Enumerable<artworksCollaboratorsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * artworksCollaborators update
   */
  export type artworksCollaboratorsUpdateArgs = {
    /**
     * Select specific fields to fetch from the artworksCollaborators
     * 
    **/
    select?: artworksCollaboratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksCollaboratorsInclude | null
    /**
     * The data needed to update a artworksCollaborators.
     * 
    **/
    data: XOR<artworksCollaboratorsUpdateInput, artworksCollaboratorsUncheckedUpdateInput>
    /**
     * Choose, which artworksCollaborators to update.
     * 
    **/
    where: artworksCollaboratorsWhereUniqueInput
  }


  /**
   * artworksCollaborators updateMany
   */
  export type artworksCollaboratorsUpdateManyArgs = {
    /**
     * The data used to update artworksCollaborators.
     * 
    **/
    data: XOR<artworksCollaboratorsUpdateManyMutationInput, artworksCollaboratorsUncheckedUpdateManyInput>
    /**
     * Filter which artworksCollaborators to update
     * 
    **/
    where?: artworksCollaboratorsWhereInput
  }


  /**
   * artworksCollaborators upsert
   */
  export type artworksCollaboratorsUpsertArgs = {
    /**
     * Select specific fields to fetch from the artworksCollaborators
     * 
    **/
    select?: artworksCollaboratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksCollaboratorsInclude | null
    /**
     * The filter to search for the artworksCollaborators to update in case it exists.
     * 
    **/
    where: artworksCollaboratorsWhereUniqueInput
    /**
     * In case the artworksCollaborators found by the `where` argument doesn't exist, create a new artworksCollaborators with this data.
     * 
    **/
    create: XOR<artworksCollaboratorsCreateInput, artworksCollaboratorsUncheckedCreateInput>
    /**
     * In case the artworksCollaborators was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<artworksCollaboratorsUpdateInput, artworksCollaboratorsUncheckedUpdateInput>
  }


  /**
   * artworksCollaborators delete
   */
  export type artworksCollaboratorsDeleteArgs = {
    /**
     * Select specific fields to fetch from the artworksCollaborators
     * 
    **/
    select?: artworksCollaboratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksCollaboratorsInclude | null
    /**
     * Filter which artworksCollaborators to delete.
     * 
    **/
    where: artworksCollaboratorsWhereUniqueInput
  }


  /**
   * artworksCollaborators deleteMany
   */
  export type artworksCollaboratorsDeleteManyArgs = {
    /**
     * Filter which artworksCollaborators to delete
     * 
    **/
    where?: artworksCollaboratorsWhereInput
  }


  /**
   * artworksCollaborators: findUniqueOrThrow
   */
  export type artworksCollaboratorsFindUniqueOrThrowArgs = artworksCollaboratorsFindUniqueArgsBase
      

  /**
   * artworksCollaborators: findFirstOrThrow
   */
  export type artworksCollaboratorsFindFirstOrThrowArgs = artworksCollaboratorsFindFirstArgsBase
      

  /**
   * artworksCollaborators without action
   */
  export type artworksCollaboratorsArgs = {
    /**
     * Select specific fields to fetch from the artworksCollaborators
     * 
    **/
    select?: artworksCollaboratorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksCollaboratorsInclude | null
  }



  /**
   * Model artworksColors
   */


  export type AggregateArtworksColors = {
    _count: ArtworksColorsCountAggregateOutputType | null
    _avg: ArtworksColorsAvgAggregateOutputType | null
    _sum: ArtworksColorsSumAggregateOutputType | null
    _min: ArtworksColorsMinAggregateOutputType | null
    _max: ArtworksColorsMaxAggregateOutputType | null
  }

  export type ArtworksColorsAvgAggregateOutputType = {
    id: number | null
    artworkId: number | null
  }

  export type ArtworksColorsSumAggregateOutputType = {
    id: number | null
    artworkId: number | null
  }

  export type ArtworksColorsMinAggregateOutputType = {
    id: number | null
    artworkId: number | null
    color: string | null
  }

  export type ArtworksColorsMaxAggregateOutputType = {
    id: number | null
    artworkId: number | null
    color: string | null
  }

  export type ArtworksColorsCountAggregateOutputType = {
    id: number
    artworkId: number
    color: number
    _all: number
  }


  export type ArtworksColorsAvgAggregateInputType = {
    id?: true
    artworkId?: true
  }

  export type ArtworksColorsSumAggregateInputType = {
    id?: true
    artworkId?: true
  }

  export type ArtworksColorsMinAggregateInputType = {
    id?: true
    artworkId?: true
    color?: true
  }

  export type ArtworksColorsMaxAggregateInputType = {
    id?: true
    artworkId?: true
    color?: true
  }

  export type ArtworksColorsCountAggregateInputType = {
    id?: true
    artworkId?: true
    color?: true
    _all?: true
  }

  export type ArtworksColorsAggregateArgs = {
    /**
     * Filter which artworksColors to aggregate.
     * 
    **/
    where?: artworksColorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksColors to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksColorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: artworksColorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksColors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksColors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned artworksColors
    **/
    _count?: true | ArtworksColorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtworksColorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtworksColorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtworksColorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtworksColorsMaxAggregateInputType
  }

  export type GetArtworksColorsAggregateType<T extends ArtworksColorsAggregateArgs> = {
        [P in keyof T & keyof AggregateArtworksColors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtworksColors[P]>
      : GetScalarType<T[P], AggregateArtworksColors[P]>
  }




  export type ArtworksColorsGroupByArgs = {
    where?: artworksColorsWhereInput
    orderBy?: Enumerable<artworksColorsOrderByWithAggregationInput>
    by: Array<ArtworksColorsScalarFieldEnum>
    having?: artworksColorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtworksColorsCountAggregateInputType | true
    _avg?: ArtworksColorsAvgAggregateInputType
    _sum?: ArtworksColorsSumAggregateInputType
    _min?: ArtworksColorsMinAggregateInputType
    _max?: ArtworksColorsMaxAggregateInputType
  }


  export type ArtworksColorsGroupByOutputType = {
    id: number
    artworkId: number
    color: string
    _count: ArtworksColorsCountAggregateOutputType | null
    _avg: ArtworksColorsAvgAggregateOutputType | null
    _sum: ArtworksColorsSumAggregateOutputType | null
    _min: ArtworksColorsMinAggregateOutputType | null
    _max: ArtworksColorsMaxAggregateOutputType | null
  }

  type GetArtworksColorsGroupByPayload<T extends ArtworksColorsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ArtworksColorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtworksColorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtworksColorsGroupByOutputType[P]>
            : GetScalarType<T[P], ArtworksColorsGroupByOutputType[P]>
        }
      >
    >


  export type artworksColorsSelect = {
    id?: boolean
    artworkId?: boolean
    color?: boolean
    artworks?: boolean | artworksArgs
  }


  export type artworksColorsInclude = {
    artworks?: boolean | artworksArgs
  } 

  export type artworksColorsGetPayload<S extends boolean | null | undefined | artworksColorsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? artworksColors :
    S extends undefined ? never :
    S extends { include: any } & (artworksColorsArgs | artworksColorsFindManyArgs)
    ? artworksColors  & {
    [P in TrueKeys<S['include']>]:
        P extends 'artworks' ? artworksGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (artworksColorsArgs | artworksColorsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'artworks' ? artworksGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof artworksColors ? artworksColors[P] : never
  } 
      : artworksColors


  type artworksColorsCountArgs = Merge<
    Omit<artworksColorsFindManyArgs, 'select' | 'include'> & {
      select?: ArtworksColorsCountAggregateInputType | true
    }
  >

  export interface artworksColorsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ArtworksColors that matches the filter.
     * @param {artworksColorsFindUniqueArgs} args - Arguments to find a ArtworksColors
     * @example
     * // Get one ArtworksColors
     * const artworksColors = await prisma.artworksColors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends artworksColorsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, artworksColorsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'artworksColors'> extends True ? Prisma__artworksColorsClient<artworksColorsGetPayload<T>> : Prisma__artworksColorsClient<artworksColorsGetPayload<T> | null, null>

    /**
     * Find the first ArtworksColors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksColorsFindFirstArgs} args - Arguments to find a ArtworksColors
     * @example
     * // Get one ArtworksColors
     * const artworksColors = await prisma.artworksColors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends artworksColorsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, artworksColorsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'artworksColors'> extends True ? Prisma__artworksColorsClient<artworksColorsGetPayload<T>> : Prisma__artworksColorsClient<artworksColorsGetPayload<T> | null, null>

    /**
     * Find zero or more ArtworksColors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksColorsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArtworksColors
     * const artworksColors = await prisma.artworksColors.findMany()
     * 
     * // Get first 10 ArtworksColors
     * const artworksColors = await prisma.artworksColors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artworksColorsWithIdOnly = await prisma.artworksColors.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends artworksColorsFindManyArgs>(
      args?: SelectSubset<T, artworksColorsFindManyArgs>
    ): PrismaPromise<Array<artworksColorsGetPayload<T>>>

    /**
     * Create a ArtworksColors.
     * @param {artworksColorsCreateArgs} args - Arguments to create a ArtworksColors.
     * @example
     * // Create one ArtworksColors
     * const ArtworksColors = await prisma.artworksColors.create({
     *   data: {
     *     // ... data to create a ArtworksColors
     *   }
     * })
     * 
    **/
    create<T extends artworksColorsCreateArgs>(
      args: SelectSubset<T, artworksColorsCreateArgs>
    ): Prisma__artworksColorsClient<artworksColorsGetPayload<T>>

    /**
     * Create many ArtworksColors.
     *     @param {artworksColorsCreateManyArgs} args - Arguments to create many ArtworksColors.
     *     @example
     *     // Create many ArtworksColors
     *     const artworksColors = await prisma.artworksColors.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends artworksColorsCreateManyArgs>(
      args?: SelectSubset<T, artworksColorsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ArtworksColors.
     * @param {artworksColorsDeleteArgs} args - Arguments to delete one ArtworksColors.
     * @example
     * // Delete one ArtworksColors
     * const ArtworksColors = await prisma.artworksColors.delete({
     *   where: {
     *     // ... filter to delete one ArtworksColors
     *   }
     * })
     * 
    **/
    delete<T extends artworksColorsDeleteArgs>(
      args: SelectSubset<T, artworksColorsDeleteArgs>
    ): Prisma__artworksColorsClient<artworksColorsGetPayload<T>>

    /**
     * Update one ArtworksColors.
     * @param {artworksColorsUpdateArgs} args - Arguments to update one ArtworksColors.
     * @example
     * // Update one ArtworksColors
     * const artworksColors = await prisma.artworksColors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends artworksColorsUpdateArgs>(
      args: SelectSubset<T, artworksColorsUpdateArgs>
    ): Prisma__artworksColorsClient<artworksColorsGetPayload<T>>

    /**
     * Delete zero or more ArtworksColors.
     * @param {artworksColorsDeleteManyArgs} args - Arguments to filter ArtworksColors to delete.
     * @example
     * // Delete a few ArtworksColors
     * const { count } = await prisma.artworksColors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends artworksColorsDeleteManyArgs>(
      args?: SelectSubset<T, artworksColorsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArtworksColors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksColorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArtworksColors
     * const artworksColors = await prisma.artworksColors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends artworksColorsUpdateManyArgs>(
      args: SelectSubset<T, artworksColorsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ArtworksColors.
     * @param {artworksColorsUpsertArgs} args - Arguments to update or create a ArtworksColors.
     * @example
     * // Update or create a ArtworksColors
     * const artworksColors = await prisma.artworksColors.upsert({
     *   create: {
     *     // ... data to create a ArtworksColors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArtworksColors we want to update
     *   }
     * })
    **/
    upsert<T extends artworksColorsUpsertArgs>(
      args: SelectSubset<T, artworksColorsUpsertArgs>
    ): Prisma__artworksColorsClient<artworksColorsGetPayload<T>>

    /**
     * Find one ArtworksColors that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {artworksColorsFindUniqueOrThrowArgs} args - Arguments to find a ArtworksColors
     * @example
     * // Get one ArtworksColors
     * const artworksColors = await prisma.artworksColors.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends artworksColorsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, artworksColorsFindUniqueOrThrowArgs>
    ): Prisma__artworksColorsClient<artworksColorsGetPayload<T>>

    /**
     * Find the first ArtworksColors that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksColorsFindFirstOrThrowArgs} args - Arguments to find a ArtworksColors
     * @example
     * // Get one ArtworksColors
     * const artworksColors = await prisma.artworksColors.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends artworksColorsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, artworksColorsFindFirstOrThrowArgs>
    ): Prisma__artworksColorsClient<artworksColorsGetPayload<T>>

    /**
     * Count the number of ArtworksColors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksColorsCountArgs} args - Arguments to filter ArtworksColors to count.
     * @example
     * // Count the number of ArtworksColors
     * const count = await prisma.artworksColors.count({
     *   where: {
     *     // ... the filter for the ArtworksColors we want to count
     *   }
     * })
    **/
    count<T extends artworksColorsCountArgs>(
      args?: Subset<T, artworksColorsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtworksColorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArtworksColors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksColorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtworksColorsAggregateArgs>(args: Subset<T, ArtworksColorsAggregateArgs>): PrismaPromise<GetArtworksColorsAggregateType<T>>

    /**
     * Group by ArtworksColors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksColorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtworksColorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtworksColorsGroupByArgs['orderBy'] }
        : { orderBy?: ArtworksColorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtworksColorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtworksColorsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for artworksColors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__artworksColorsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    artworks<T extends artworksArgs= {}>(args?: Subset<T, artworksArgs>): Prisma__artworksClient<artworksGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * artworksColors base type for findUnique actions
   */
  export type artworksColorsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the artworksColors
     * 
    **/
    select?: artworksColorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksColorsInclude | null
    /**
     * Filter, which artworksColors to fetch.
     * 
    **/
    where: artworksColorsWhereUniqueInput
  }

  /**
   * artworksColors: findUnique
   */
  export interface artworksColorsFindUniqueArgs extends artworksColorsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworksColors base type for findFirst actions
   */
  export type artworksColorsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the artworksColors
     * 
    **/
    select?: artworksColorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksColorsInclude | null
    /**
     * Filter, which artworksColors to fetch.
     * 
    **/
    where?: artworksColorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksColors to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksColorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artworksColors.
     * 
    **/
    cursor?: artworksColorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksColors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksColors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artworksColors.
     * 
    **/
    distinct?: Enumerable<ArtworksColorsScalarFieldEnum>
  }

  /**
   * artworksColors: findFirst
   */
  export interface artworksColorsFindFirstArgs extends artworksColorsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworksColors findMany
   */
  export type artworksColorsFindManyArgs = {
    /**
     * Select specific fields to fetch from the artworksColors
     * 
    **/
    select?: artworksColorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksColorsInclude | null
    /**
     * Filter, which artworksColors to fetch.
     * 
    **/
    where?: artworksColorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksColors to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksColorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing artworksColors.
     * 
    **/
    cursor?: artworksColorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksColors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksColors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ArtworksColorsScalarFieldEnum>
  }


  /**
   * artworksColors create
   */
  export type artworksColorsCreateArgs = {
    /**
     * Select specific fields to fetch from the artworksColors
     * 
    **/
    select?: artworksColorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksColorsInclude | null
    /**
     * The data needed to create a artworksColors.
     * 
    **/
    data: XOR<artworksColorsCreateInput, artworksColorsUncheckedCreateInput>
  }


  /**
   * artworksColors createMany
   */
  export type artworksColorsCreateManyArgs = {
    /**
     * The data used to create many artworksColors.
     * 
    **/
    data: Enumerable<artworksColorsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * artworksColors update
   */
  export type artworksColorsUpdateArgs = {
    /**
     * Select specific fields to fetch from the artworksColors
     * 
    **/
    select?: artworksColorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksColorsInclude | null
    /**
     * The data needed to update a artworksColors.
     * 
    **/
    data: XOR<artworksColorsUpdateInput, artworksColorsUncheckedUpdateInput>
    /**
     * Choose, which artworksColors to update.
     * 
    **/
    where: artworksColorsWhereUniqueInput
  }


  /**
   * artworksColors updateMany
   */
  export type artworksColorsUpdateManyArgs = {
    /**
     * The data used to update artworksColors.
     * 
    **/
    data: XOR<artworksColorsUpdateManyMutationInput, artworksColorsUncheckedUpdateManyInput>
    /**
     * Filter which artworksColors to update
     * 
    **/
    where?: artworksColorsWhereInput
  }


  /**
   * artworksColors upsert
   */
  export type artworksColorsUpsertArgs = {
    /**
     * Select specific fields to fetch from the artworksColors
     * 
    **/
    select?: artworksColorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksColorsInclude | null
    /**
     * The filter to search for the artworksColors to update in case it exists.
     * 
    **/
    where: artworksColorsWhereUniqueInput
    /**
     * In case the artworksColors found by the `where` argument doesn't exist, create a new artworksColors with this data.
     * 
    **/
    create: XOR<artworksColorsCreateInput, artworksColorsUncheckedCreateInput>
    /**
     * In case the artworksColors was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<artworksColorsUpdateInput, artworksColorsUncheckedUpdateInput>
  }


  /**
   * artworksColors delete
   */
  export type artworksColorsDeleteArgs = {
    /**
     * Select specific fields to fetch from the artworksColors
     * 
    **/
    select?: artworksColorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksColorsInclude | null
    /**
     * Filter which artworksColors to delete.
     * 
    **/
    where: artworksColorsWhereUniqueInput
  }


  /**
   * artworksColors deleteMany
   */
  export type artworksColorsDeleteManyArgs = {
    /**
     * Filter which artworksColors to delete
     * 
    **/
    where?: artworksColorsWhereInput
  }


  /**
   * artworksColors: findUniqueOrThrow
   */
  export type artworksColorsFindUniqueOrThrowArgs = artworksColorsFindUniqueArgsBase
      

  /**
   * artworksColors: findFirstOrThrow
   */
  export type artworksColorsFindFirstOrThrowArgs = artworksColorsFindFirstArgsBase
      

  /**
   * artworksColors without action
   */
  export type artworksColorsArgs = {
    /**
     * Select specific fields to fetch from the artworksColors
     * 
    **/
    select?: artworksColorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksColorsInclude | null
  }



  /**
   * Model artworksMaterials
   */


  export type AggregateArtworksMaterials = {
    _count: ArtworksMaterialsCountAggregateOutputType | null
    _avg: ArtworksMaterialsAvgAggregateOutputType | null
    _sum: ArtworksMaterialsSumAggregateOutputType | null
    _min: ArtworksMaterialsMinAggregateOutputType | null
    _max: ArtworksMaterialsMaxAggregateOutputType | null
  }

  export type ArtworksMaterialsAvgAggregateOutputType = {
    id: number | null
    artworkId: number | null
  }

  export type ArtworksMaterialsSumAggregateOutputType = {
    id: number | null
    artworkId: number | null
  }

  export type ArtworksMaterialsMinAggregateOutputType = {
    id: number | null
    artworkId: number | null
    material: string | null
  }

  export type ArtworksMaterialsMaxAggregateOutputType = {
    id: number | null
    artworkId: number | null
    material: string | null
  }

  export type ArtworksMaterialsCountAggregateOutputType = {
    id: number
    artworkId: number
    material: number
    _all: number
  }


  export type ArtworksMaterialsAvgAggregateInputType = {
    id?: true
    artworkId?: true
  }

  export type ArtworksMaterialsSumAggregateInputType = {
    id?: true
    artworkId?: true
  }

  export type ArtworksMaterialsMinAggregateInputType = {
    id?: true
    artworkId?: true
    material?: true
  }

  export type ArtworksMaterialsMaxAggregateInputType = {
    id?: true
    artworkId?: true
    material?: true
  }

  export type ArtworksMaterialsCountAggregateInputType = {
    id?: true
    artworkId?: true
    material?: true
    _all?: true
  }

  export type ArtworksMaterialsAggregateArgs = {
    /**
     * Filter which artworksMaterials to aggregate.
     * 
    **/
    where?: artworksMaterialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksMaterials to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksMaterialsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: artworksMaterialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksMaterials from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksMaterials.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned artworksMaterials
    **/
    _count?: true | ArtworksMaterialsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtworksMaterialsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtworksMaterialsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtworksMaterialsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtworksMaterialsMaxAggregateInputType
  }

  export type GetArtworksMaterialsAggregateType<T extends ArtworksMaterialsAggregateArgs> = {
        [P in keyof T & keyof AggregateArtworksMaterials]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtworksMaterials[P]>
      : GetScalarType<T[P], AggregateArtworksMaterials[P]>
  }




  export type ArtworksMaterialsGroupByArgs = {
    where?: artworksMaterialsWhereInput
    orderBy?: Enumerable<artworksMaterialsOrderByWithAggregationInput>
    by: Array<ArtworksMaterialsScalarFieldEnum>
    having?: artworksMaterialsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtworksMaterialsCountAggregateInputType | true
    _avg?: ArtworksMaterialsAvgAggregateInputType
    _sum?: ArtworksMaterialsSumAggregateInputType
    _min?: ArtworksMaterialsMinAggregateInputType
    _max?: ArtworksMaterialsMaxAggregateInputType
  }


  export type ArtworksMaterialsGroupByOutputType = {
    id: number
    artworkId: number
    material: string
    _count: ArtworksMaterialsCountAggregateOutputType | null
    _avg: ArtworksMaterialsAvgAggregateOutputType | null
    _sum: ArtworksMaterialsSumAggregateOutputType | null
    _min: ArtworksMaterialsMinAggregateOutputType | null
    _max: ArtworksMaterialsMaxAggregateOutputType | null
  }

  type GetArtworksMaterialsGroupByPayload<T extends ArtworksMaterialsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ArtworksMaterialsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtworksMaterialsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtworksMaterialsGroupByOutputType[P]>
            : GetScalarType<T[P], ArtworksMaterialsGroupByOutputType[P]>
        }
      >
    >


  export type artworksMaterialsSelect = {
    id?: boolean
    artworkId?: boolean
    material?: boolean
    artworks?: boolean | artworksArgs
  }


  export type artworksMaterialsInclude = {
    artworks?: boolean | artworksArgs
  } 

  export type artworksMaterialsGetPayload<S extends boolean | null | undefined | artworksMaterialsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? artworksMaterials :
    S extends undefined ? never :
    S extends { include: any } & (artworksMaterialsArgs | artworksMaterialsFindManyArgs)
    ? artworksMaterials  & {
    [P in TrueKeys<S['include']>]:
        P extends 'artworks' ? artworksGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (artworksMaterialsArgs | artworksMaterialsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'artworks' ? artworksGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof artworksMaterials ? artworksMaterials[P] : never
  } 
      : artworksMaterials


  type artworksMaterialsCountArgs = Merge<
    Omit<artworksMaterialsFindManyArgs, 'select' | 'include'> & {
      select?: ArtworksMaterialsCountAggregateInputType | true
    }
  >

  export interface artworksMaterialsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ArtworksMaterials that matches the filter.
     * @param {artworksMaterialsFindUniqueArgs} args - Arguments to find a ArtworksMaterials
     * @example
     * // Get one ArtworksMaterials
     * const artworksMaterials = await prisma.artworksMaterials.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends artworksMaterialsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, artworksMaterialsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'artworksMaterials'> extends True ? Prisma__artworksMaterialsClient<artworksMaterialsGetPayload<T>> : Prisma__artworksMaterialsClient<artworksMaterialsGetPayload<T> | null, null>

    /**
     * Find the first ArtworksMaterials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksMaterialsFindFirstArgs} args - Arguments to find a ArtworksMaterials
     * @example
     * // Get one ArtworksMaterials
     * const artworksMaterials = await prisma.artworksMaterials.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends artworksMaterialsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, artworksMaterialsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'artworksMaterials'> extends True ? Prisma__artworksMaterialsClient<artworksMaterialsGetPayload<T>> : Prisma__artworksMaterialsClient<artworksMaterialsGetPayload<T> | null, null>

    /**
     * Find zero or more ArtworksMaterials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksMaterialsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArtworksMaterials
     * const artworksMaterials = await prisma.artworksMaterials.findMany()
     * 
     * // Get first 10 ArtworksMaterials
     * const artworksMaterials = await prisma.artworksMaterials.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artworksMaterialsWithIdOnly = await prisma.artworksMaterials.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends artworksMaterialsFindManyArgs>(
      args?: SelectSubset<T, artworksMaterialsFindManyArgs>
    ): PrismaPromise<Array<artworksMaterialsGetPayload<T>>>

    /**
     * Create a ArtworksMaterials.
     * @param {artworksMaterialsCreateArgs} args - Arguments to create a ArtworksMaterials.
     * @example
     * // Create one ArtworksMaterials
     * const ArtworksMaterials = await prisma.artworksMaterials.create({
     *   data: {
     *     // ... data to create a ArtworksMaterials
     *   }
     * })
     * 
    **/
    create<T extends artworksMaterialsCreateArgs>(
      args: SelectSubset<T, artworksMaterialsCreateArgs>
    ): Prisma__artworksMaterialsClient<artworksMaterialsGetPayload<T>>

    /**
     * Create many ArtworksMaterials.
     *     @param {artworksMaterialsCreateManyArgs} args - Arguments to create many ArtworksMaterials.
     *     @example
     *     // Create many ArtworksMaterials
     *     const artworksMaterials = await prisma.artworksMaterials.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends artworksMaterialsCreateManyArgs>(
      args?: SelectSubset<T, artworksMaterialsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ArtworksMaterials.
     * @param {artworksMaterialsDeleteArgs} args - Arguments to delete one ArtworksMaterials.
     * @example
     * // Delete one ArtworksMaterials
     * const ArtworksMaterials = await prisma.artworksMaterials.delete({
     *   where: {
     *     // ... filter to delete one ArtworksMaterials
     *   }
     * })
     * 
    **/
    delete<T extends artworksMaterialsDeleteArgs>(
      args: SelectSubset<T, artworksMaterialsDeleteArgs>
    ): Prisma__artworksMaterialsClient<artworksMaterialsGetPayload<T>>

    /**
     * Update one ArtworksMaterials.
     * @param {artworksMaterialsUpdateArgs} args - Arguments to update one ArtworksMaterials.
     * @example
     * // Update one ArtworksMaterials
     * const artworksMaterials = await prisma.artworksMaterials.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends artworksMaterialsUpdateArgs>(
      args: SelectSubset<T, artworksMaterialsUpdateArgs>
    ): Prisma__artworksMaterialsClient<artworksMaterialsGetPayload<T>>

    /**
     * Delete zero or more ArtworksMaterials.
     * @param {artworksMaterialsDeleteManyArgs} args - Arguments to filter ArtworksMaterials to delete.
     * @example
     * // Delete a few ArtworksMaterials
     * const { count } = await prisma.artworksMaterials.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends artworksMaterialsDeleteManyArgs>(
      args?: SelectSubset<T, artworksMaterialsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArtworksMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksMaterialsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArtworksMaterials
     * const artworksMaterials = await prisma.artworksMaterials.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends artworksMaterialsUpdateManyArgs>(
      args: SelectSubset<T, artworksMaterialsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ArtworksMaterials.
     * @param {artworksMaterialsUpsertArgs} args - Arguments to update or create a ArtworksMaterials.
     * @example
     * // Update or create a ArtworksMaterials
     * const artworksMaterials = await prisma.artworksMaterials.upsert({
     *   create: {
     *     // ... data to create a ArtworksMaterials
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArtworksMaterials we want to update
     *   }
     * })
    **/
    upsert<T extends artworksMaterialsUpsertArgs>(
      args: SelectSubset<T, artworksMaterialsUpsertArgs>
    ): Prisma__artworksMaterialsClient<artworksMaterialsGetPayload<T>>

    /**
     * Find one ArtworksMaterials that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {artworksMaterialsFindUniqueOrThrowArgs} args - Arguments to find a ArtworksMaterials
     * @example
     * // Get one ArtworksMaterials
     * const artworksMaterials = await prisma.artworksMaterials.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends artworksMaterialsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, artworksMaterialsFindUniqueOrThrowArgs>
    ): Prisma__artworksMaterialsClient<artworksMaterialsGetPayload<T>>

    /**
     * Find the first ArtworksMaterials that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksMaterialsFindFirstOrThrowArgs} args - Arguments to find a ArtworksMaterials
     * @example
     * // Get one ArtworksMaterials
     * const artworksMaterials = await prisma.artworksMaterials.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends artworksMaterialsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, artworksMaterialsFindFirstOrThrowArgs>
    ): Prisma__artworksMaterialsClient<artworksMaterialsGetPayload<T>>

    /**
     * Count the number of ArtworksMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksMaterialsCountArgs} args - Arguments to filter ArtworksMaterials to count.
     * @example
     * // Count the number of ArtworksMaterials
     * const count = await prisma.artworksMaterials.count({
     *   where: {
     *     // ... the filter for the ArtworksMaterials we want to count
     *   }
     * })
    **/
    count<T extends artworksMaterialsCountArgs>(
      args?: Subset<T, artworksMaterialsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtworksMaterialsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArtworksMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksMaterialsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtworksMaterialsAggregateArgs>(args: Subset<T, ArtworksMaterialsAggregateArgs>): PrismaPromise<GetArtworksMaterialsAggregateType<T>>

    /**
     * Group by ArtworksMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksMaterialsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtworksMaterialsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtworksMaterialsGroupByArgs['orderBy'] }
        : { orderBy?: ArtworksMaterialsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtworksMaterialsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtworksMaterialsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for artworksMaterials.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__artworksMaterialsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    artworks<T extends artworksArgs= {}>(args?: Subset<T, artworksArgs>): Prisma__artworksClient<artworksGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * artworksMaterials base type for findUnique actions
   */
  export type artworksMaterialsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the artworksMaterials
     * 
    **/
    select?: artworksMaterialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMaterialsInclude | null
    /**
     * Filter, which artworksMaterials to fetch.
     * 
    **/
    where: artworksMaterialsWhereUniqueInput
  }

  /**
   * artworksMaterials: findUnique
   */
  export interface artworksMaterialsFindUniqueArgs extends artworksMaterialsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworksMaterials base type for findFirst actions
   */
  export type artworksMaterialsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the artworksMaterials
     * 
    **/
    select?: artworksMaterialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMaterialsInclude | null
    /**
     * Filter, which artworksMaterials to fetch.
     * 
    **/
    where?: artworksMaterialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksMaterials to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksMaterialsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artworksMaterials.
     * 
    **/
    cursor?: artworksMaterialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksMaterials from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksMaterials.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artworksMaterials.
     * 
    **/
    distinct?: Enumerable<ArtworksMaterialsScalarFieldEnum>
  }

  /**
   * artworksMaterials: findFirst
   */
  export interface artworksMaterialsFindFirstArgs extends artworksMaterialsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworksMaterials findMany
   */
  export type artworksMaterialsFindManyArgs = {
    /**
     * Select specific fields to fetch from the artworksMaterials
     * 
    **/
    select?: artworksMaterialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMaterialsInclude | null
    /**
     * Filter, which artworksMaterials to fetch.
     * 
    **/
    where?: artworksMaterialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksMaterials to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksMaterialsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing artworksMaterials.
     * 
    **/
    cursor?: artworksMaterialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksMaterials from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksMaterials.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ArtworksMaterialsScalarFieldEnum>
  }


  /**
   * artworksMaterials create
   */
  export type artworksMaterialsCreateArgs = {
    /**
     * Select specific fields to fetch from the artworksMaterials
     * 
    **/
    select?: artworksMaterialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMaterialsInclude | null
    /**
     * The data needed to create a artworksMaterials.
     * 
    **/
    data: XOR<artworksMaterialsCreateInput, artworksMaterialsUncheckedCreateInput>
  }


  /**
   * artworksMaterials createMany
   */
  export type artworksMaterialsCreateManyArgs = {
    /**
     * The data used to create many artworksMaterials.
     * 
    **/
    data: Enumerable<artworksMaterialsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * artworksMaterials update
   */
  export type artworksMaterialsUpdateArgs = {
    /**
     * Select specific fields to fetch from the artworksMaterials
     * 
    **/
    select?: artworksMaterialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMaterialsInclude | null
    /**
     * The data needed to update a artworksMaterials.
     * 
    **/
    data: XOR<artworksMaterialsUpdateInput, artworksMaterialsUncheckedUpdateInput>
    /**
     * Choose, which artworksMaterials to update.
     * 
    **/
    where: artworksMaterialsWhereUniqueInput
  }


  /**
   * artworksMaterials updateMany
   */
  export type artworksMaterialsUpdateManyArgs = {
    /**
     * The data used to update artworksMaterials.
     * 
    **/
    data: XOR<artworksMaterialsUpdateManyMutationInput, artworksMaterialsUncheckedUpdateManyInput>
    /**
     * Filter which artworksMaterials to update
     * 
    **/
    where?: artworksMaterialsWhereInput
  }


  /**
   * artworksMaterials upsert
   */
  export type artworksMaterialsUpsertArgs = {
    /**
     * Select specific fields to fetch from the artworksMaterials
     * 
    **/
    select?: artworksMaterialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMaterialsInclude | null
    /**
     * The filter to search for the artworksMaterials to update in case it exists.
     * 
    **/
    where: artworksMaterialsWhereUniqueInput
    /**
     * In case the artworksMaterials found by the `where` argument doesn't exist, create a new artworksMaterials with this data.
     * 
    **/
    create: XOR<artworksMaterialsCreateInput, artworksMaterialsUncheckedCreateInput>
    /**
     * In case the artworksMaterials was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<artworksMaterialsUpdateInput, artworksMaterialsUncheckedUpdateInput>
  }


  /**
   * artworksMaterials delete
   */
  export type artworksMaterialsDeleteArgs = {
    /**
     * Select specific fields to fetch from the artworksMaterials
     * 
    **/
    select?: artworksMaterialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMaterialsInclude | null
    /**
     * Filter which artworksMaterials to delete.
     * 
    **/
    where: artworksMaterialsWhereUniqueInput
  }


  /**
   * artworksMaterials deleteMany
   */
  export type artworksMaterialsDeleteManyArgs = {
    /**
     * Filter which artworksMaterials to delete
     * 
    **/
    where?: artworksMaterialsWhereInput
  }


  /**
   * artworksMaterials: findUniqueOrThrow
   */
  export type artworksMaterialsFindUniqueOrThrowArgs = artworksMaterialsFindUniqueArgsBase
      

  /**
   * artworksMaterials: findFirstOrThrow
   */
  export type artworksMaterialsFindFirstOrThrowArgs = artworksMaterialsFindFirstArgsBase
      

  /**
   * artworksMaterials without action
   */
  export type artworksMaterialsArgs = {
    /**
     * Select specific fields to fetch from the artworksMaterials
     * 
    **/
    select?: artworksMaterialsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMaterialsInclude | null
  }



  /**
   * Model artworksMovements
   */


  export type AggregateArtworksMovements = {
    _count: ArtworksMovementsCountAggregateOutputType | null
    _avg: ArtworksMovementsAvgAggregateOutputType | null
    _sum: ArtworksMovementsSumAggregateOutputType | null
    _min: ArtworksMovementsMinAggregateOutputType | null
    _max: ArtworksMovementsMaxAggregateOutputType | null
  }

  export type ArtworksMovementsAvgAggregateOutputType = {
    id: number | null
    artworkId: number | null
  }

  export type ArtworksMovementsSumAggregateOutputType = {
    id: number | null
    artworkId: number | null
  }

  export type ArtworksMovementsMinAggregateOutputType = {
    id: number | null
    artworkId: number | null
    movement: string | null
  }

  export type ArtworksMovementsMaxAggregateOutputType = {
    id: number | null
    artworkId: number | null
    movement: string | null
  }

  export type ArtworksMovementsCountAggregateOutputType = {
    id: number
    artworkId: number
    movement: number
    _all: number
  }


  export type ArtworksMovementsAvgAggregateInputType = {
    id?: true
    artworkId?: true
  }

  export type ArtworksMovementsSumAggregateInputType = {
    id?: true
    artworkId?: true
  }

  export type ArtworksMovementsMinAggregateInputType = {
    id?: true
    artworkId?: true
    movement?: true
  }

  export type ArtworksMovementsMaxAggregateInputType = {
    id?: true
    artworkId?: true
    movement?: true
  }

  export type ArtworksMovementsCountAggregateInputType = {
    id?: true
    artworkId?: true
    movement?: true
    _all?: true
  }

  export type ArtworksMovementsAggregateArgs = {
    /**
     * Filter which artworksMovements to aggregate.
     * 
    **/
    where?: artworksMovementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksMovements to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksMovementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: artworksMovementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksMovements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksMovements.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned artworksMovements
    **/
    _count?: true | ArtworksMovementsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtworksMovementsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtworksMovementsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtworksMovementsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtworksMovementsMaxAggregateInputType
  }

  export type GetArtworksMovementsAggregateType<T extends ArtworksMovementsAggregateArgs> = {
        [P in keyof T & keyof AggregateArtworksMovements]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtworksMovements[P]>
      : GetScalarType<T[P], AggregateArtworksMovements[P]>
  }




  export type ArtworksMovementsGroupByArgs = {
    where?: artworksMovementsWhereInput
    orderBy?: Enumerable<artworksMovementsOrderByWithAggregationInput>
    by: Array<ArtworksMovementsScalarFieldEnum>
    having?: artworksMovementsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtworksMovementsCountAggregateInputType | true
    _avg?: ArtworksMovementsAvgAggregateInputType
    _sum?: ArtworksMovementsSumAggregateInputType
    _min?: ArtworksMovementsMinAggregateInputType
    _max?: ArtworksMovementsMaxAggregateInputType
  }


  export type ArtworksMovementsGroupByOutputType = {
    id: number
    artworkId: number
    movement: string
    _count: ArtworksMovementsCountAggregateOutputType | null
    _avg: ArtworksMovementsAvgAggregateOutputType | null
    _sum: ArtworksMovementsSumAggregateOutputType | null
    _min: ArtworksMovementsMinAggregateOutputType | null
    _max: ArtworksMovementsMaxAggregateOutputType | null
  }

  type GetArtworksMovementsGroupByPayload<T extends ArtworksMovementsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ArtworksMovementsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtworksMovementsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtworksMovementsGroupByOutputType[P]>
            : GetScalarType<T[P], ArtworksMovementsGroupByOutputType[P]>
        }
      >
    >


  export type artworksMovementsSelect = {
    id?: boolean
    artworkId?: boolean
    movement?: boolean
    artworks?: boolean | artworksArgs
  }


  export type artworksMovementsInclude = {
    artworks?: boolean | artworksArgs
  } 

  export type artworksMovementsGetPayload<S extends boolean | null | undefined | artworksMovementsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? artworksMovements :
    S extends undefined ? never :
    S extends { include: any } & (artworksMovementsArgs | artworksMovementsFindManyArgs)
    ? artworksMovements  & {
    [P in TrueKeys<S['include']>]:
        P extends 'artworks' ? artworksGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (artworksMovementsArgs | artworksMovementsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'artworks' ? artworksGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof artworksMovements ? artworksMovements[P] : never
  } 
      : artworksMovements


  type artworksMovementsCountArgs = Merge<
    Omit<artworksMovementsFindManyArgs, 'select' | 'include'> & {
      select?: ArtworksMovementsCountAggregateInputType | true
    }
  >

  export interface artworksMovementsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ArtworksMovements that matches the filter.
     * @param {artworksMovementsFindUniqueArgs} args - Arguments to find a ArtworksMovements
     * @example
     * // Get one ArtworksMovements
     * const artworksMovements = await prisma.artworksMovements.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends artworksMovementsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, artworksMovementsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'artworksMovements'> extends True ? Prisma__artworksMovementsClient<artworksMovementsGetPayload<T>> : Prisma__artworksMovementsClient<artworksMovementsGetPayload<T> | null, null>

    /**
     * Find the first ArtworksMovements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksMovementsFindFirstArgs} args - Arguments to find a ArtworksMovements
     * @example
     * // Get one ArtworksMovements
     * const artworksMovements = await prisma.artworksMovements.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends artworksMovementsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, artworksMovementsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'artworksMovements'> extends True ? Prisma__artworksMovementsClient<artworksMovementsGetPayload<T>> : Prisma__artworksMovementsClient<artworksMovementsGetPayload<T> | null, null>

    /**
     * Find zero or more ArtworksMovements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksMovementsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArtworksMovements
     * const artworksMovements = await prisma.artworksMovements.findMany()
     * 
     * // Get first 10 ArtworksMovements
     * const artworksMovements = await prisma.artworksMovements.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artworksMovementsWithIdOnly = await prisma.artworksMovements.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends artworksMovementsFindManyArgs>(
      args?: SelectSubset<T, artworksMovementsFindManyArgs>
    ): PrismaPromise<Array<artworksMovementsGetPayload<T>>>

    /**
     * Create a ArtworksMovements.
     * @param {artworksMovementsCreateArgs} args - Arguments to create a ArtworksMovements.
     * @example
     * // Create one ArtworksMovements
     * const ArtworksMovements = await prisma.artworksMovements.create({
     *   data: {
     *     // ... data to create a ArtworksMovements
     *   }
     * })
     * 
    **/
    create<T extends artworksMovementsCreateArgs>(
      args: SelectSubset<T, artworksMovementsCreateArgs>
    ): Prisma__artworksMovementsClient<artworksMovementsGetPayload<T>>

    /**
     * Create many ArtworksMovements.
     *     @param {artworksMovementsCreateManyArgs} args - Arguments to create many ArtworksMovements.
     *     @example
     *     // Create many ArtworksMovements
     *     const artworksMovements = await prisma.artworksMovements.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends artworksMovementsCreateManyArgs>(
      args?: SelectSubset<T, artworksMovementsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ArtworksMovements.
     * @param {artworksMovementsDeleteArgs} args - Arguments to delete one ArtworksMovements.
     * @example
     * // Delete one ArtworksMovements
     * const ArtworksMovements = await prisma.artworksMovements.delete({
     *   where: {
     *     // ... filter to delete one ArtworksMovements
     *   }
     * })
     * 
    **/
    delete<T extends artworksMovementsDeleteArgs>(
      args: SelectSubset<T, artworksMovementsDeleteArgs>
    ): Prisma__artworksMovementsClient<artworksMovementsGetPayload<T>>

    /**
     * Update one ArtworksMovements.
     * @param {artworksMovementsUpdateArgs} args - Arguments to update one ArtworksMovements.
     * @example
     * // Update one ArtworksMovements
     * const artworksMovements = await prisma.artworksMovements.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends artworksMovementsUpdateArgs>(
      args: SelectSubset<T, artworksMovementsUpdateArgs>
    ): Prisma__artworksMovementsClient<artworksMovementsGetPayload<T>>

    /**
     * Delete zero or more ArtworksMovements.
     * @param {artworksMovementsDeleteManyArgs} args - Arguments to filter ArtworksMovements to delete.
     * @example
     * // Delete a few ArtworksMovements
     * const { count } = await prisma.artworksMovements.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends artworksMovementsDeleteManyArgs>(
      args?: SelectSubset<T, artworksMovementsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArtworksMovements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksMovementsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArtworksMovements
     * const artworksMovements = await prisma.artworksMovements.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends artworksMovementsUpdateManyArgs>(
      args: SelectSubset<T, artworksMovementsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ArtworksMovements.
     * @param {artworksMovementsUpsertArgs} args - Arguments to update or create a ArtworksMovements.
     * @example
     * // Update or create a ArtworksMovements
     * const artworksMovements = await prisma.artworksMovements.upsert({
     *   create: {
     *     // ... data to create a ArtworksMovements
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArtworksMovements we want to update
     *   }
     * })
    **/
    upsert<T extends artworksMovementsUpsertArgs>(
      args: SelectSubset<T, artworksMovementsUpsertArgs>
    ): Prisma__artworksMovementsClient<artworksMovementsGetPayload<T>>

    /**
     * Find one ArtworksMovements that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {artworksMovementsFindUniqueOrThrowArgs} args - Arguments to find a ArtworksMovements
     * @example
     * // Get one ArtworksMovements
     * const artworksMovements = await prisma.artworksMovements.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends artworksMovementsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, artworksMovementsFindUniqueOrThrowArgs>
    ): Prisma__artworksMovementsClient<artworksMovementsGetPayload<T>>

    /**
     * Find the first ArtworksMovements that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksMovementsFindFirstOrThrowArgs} args - Arguments to find a ArtworksMovements
     * @example
     * // Get one ArtworksMovements
     * const artworksMovements = await prisma.artworksMovements.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends artworksMovementsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, artworksMovementsFindFirstOrThrowArgs>
    ): Prisma__artworksMovementsClient<artworksMovementsGetPayload<T>>

    /**
     * Count the number of ArtworksMovements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksMovementsCountArgs} args - Arguments to filter ArtworksMovements to count.
     * @example
     * // Count the number of ArtworksMovements
     * const count = await prisma.artworksMovements.count({
     *   where: {
     *     // ... the filter for the ArtworksMovements we want to count
     *   }
     * })
    **/
    count<T extends artworksMovementsCountArgs>(
      args?: Subset<T, artworksMovementsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtworksMovementsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArtworksMovements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksMovementsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtworksMovementsAggregateArgs>(args: Subset<T, ArtworksMovementsAggregateArgs>): PrismaPromise<GetArtworksMovementsAggregateType<T>>

    /**
     * Group by ArtworksMovements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksMovementsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtworksMovementsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtworksMovementsGroupByArgs['orderBy'] }
        : { orderBy?: ArtworksMovementsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtworksMovementsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtworksMovementsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for artworksMovements.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__artworksMovementsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    artworks<T extends artworksArgs= {}>(args?: Subset<T, artworksArgs>): Prisma__artworksClient<artworksGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * artworksMovements base type for findUnique actions
   */
  export type artworksMovementsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the artworksMovements
     * 
    **/
    select?: artworksMovementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMovementsInclude | null
    /**
     * Filter, which artworksMovements to fetch.
     * 
    **/
    where: artworksMovementsWhereUniqueInput
  }

  /**
   * artworksMovements: findUnique
   */
  export interface artworksMovementsFindUniqueArgs extends artworksMovementsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworksMovements base type for findFirst actions
   */
  export type artworksMovementsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the artworksMovements
     * 
    **/
    select?: artworksMovementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMovementsInclude | null
    /**
     * Filter, which artworksMovements to fetch.
     * 
    **/
    where?: artworksMovementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksMovements to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksMovementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artworksMovements.
     * 
    **/
    cursor?: artworksMovementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksMovements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksMovements.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artworksMovements.
     * 
    **/
    distinct?: Enumerable<ArtworksMovementsScalarFieldEnum>
  }

  /**
   * artworksMovements: findFirst
   */
  export interface artworksMovementsFindFirstArgs extends artworksMovementsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworksMovements findMany
   */
  export type artworksMovementsFindManyArgs = {
    /**
     * Select specific fields to fetch from the artworksMovements
     * 
    **/
    select?: artworksMovementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMovementsInclude | null
    /**
     * Filter, which artworksMovements to fetch.
     * 
    **/
    where?: artworksMovementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksMovements to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksMovementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing artworksMovements.
     * 
    **/
    cursor?: artworksMovementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksMovements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksMovements.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ArtworksMovementsScalarFieldEnum>
  }


  /**
   * artworksMovements create
   */
  export type artworksMovementsCreateArgs = {
    /**
     * Select specific fields to fetch from the artworksMovements
     * 
    **/
    select?: artworksMovementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMovementsInclude | null
    /**
     * The data needed to create a artworksMovements.
     * 
    **/
    data: XOR<artworksMovementsCreateInput, artworksMovementsUncheckedCreateInput>
  }


  /**
   * artworksMovements createMany
   */
  export type artworksMovementsCreateManyArgs = {
    /**
     * The data used to create many artworksMovements.
     * 
    **/
    data: Enumerable<artworksMovementsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * artworksMovements update
   */
  export type artworksMovementsUpdateArgs = {
    /**
     * Select specific fields to fetch from the artworksMovements
     * 
    **/
    select?: artworksMovementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMovementsInclude | null
    /**
     * The data needed to update a artworksMovements.
     * 
    **/
    data: XOR<artworksMovementsUpdateInput, artworksMovementsUncheckedUpdateInput>
    /**
     * Choose, which artworksMovements to update.
     * 
    **/
    where: artworksMovementsWhereUniqueInput
  }


  /**
   * artworksMovements updateMany
   */
  export type artworksMovementsUpdateManyArgs = {
    /**
     * The data used to update artworksMovements.
     * 
    **/
    data: XOR<artworksMovementsUpdateManyMutationInput, artworksMovementsUncheckedUpdateManyInput>
    /**
     * Filter which artworksMovements to update
     * 
    **/
    where?: artworksMovementsWhereInput
  }


  /**
   * artworksMovements upsert
   */
  export type artworksMovementsUpsertArgs = {
    /**
     * Select specific fields to fetch from the artworksMovements
     * 
    **/
    select?: artworksMovementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMovementsInclude | null
    /**
     * The filter to search for the artworksMovements to update in case it exists.
     * 
    **/
    where: artworksMovementsWhereUniqueInput
    /**
     * In case the artworksMovements found by the `where` argument doesn't exist, create a new artworksMovements with this data.
     * 
    **/
    create: XOR<artworksMovementsCreateInput, artworksMovementsUncheckedCreateInput>
    /**
     * In case the artworksMovements was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<artworksMovementsUpdateInput, artworksMovementsUncheckedUpdateInput>
  }


  /**
   * artworksMovements delete
   */
  export type artworksMovementsDeleteArgs = {
    /**
     * Select specific fields to fetch from the artworksMovements
     * 
    **/
    select?: artworksMovementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMovementsInclude | null
    /**
     * Filter which artworksMovements to delete.
     * 
    **/
    where: artworksMovementsWhereUniqueInput
  }


  /**
   * artworksMovements deleteMany
   */
  export type artworksMovementsDeleteManyArgs = {
    /**
     * Filter which artworksMovements to delete
     * 
    **/
    where?: artworksMovementsWhereInput
  }


  /**
   * artworksMovements: findUniqueOrThrow
   */
  export type artworksMovementsFindUniqueOrThrowArgs = artworksMovementsFindUniqueArgsBase
      

  /**
   * artworksMovements: findFirstOrThrow
   */
  export type artworksMovementsFindFirstOrThrowArgs = artworksMovementsFindFirstArgsBase
      

  /**
   * artworksMovements without action
   */
  export type artworksMovementsArgs = {
    /**
     * Select specific fields to fetch from the artworksMovements
     * 
    **/
    select?: artworksMovementsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksMovementsInclude | null
  }



  /**
   * Model artworksTags
   */


  export type AggregateArtworksTags = {
    _count: ArtworksTagsCountAggregateOutputType | null
    _avg: ArtworksTagsAvgAggregateOutputType | null
    _sum: ArtworksTagsSumAggregateOutputType | null
    _min: ArtworksTagsMinAggregateOutputType | null
    _max: ArtworksTagsMaxAggregateOutputType | null
  }

  export type ArtworksTagsAvgAggregateOutputType = {
    id: number | null
    artworkId: number | null
  }

  export type ArtworksTagsSumAggregateOutputType = {
    id: number | null
    artworkId: number | null
  }

  export type ArtworksTagsMinAggregateOutputType = {
    id: number | null
    artworkId: number | null
    tag: string | null
  }

  export type ArtworksTagsMaxAggregateOutputType = {
    id: number | null
    artworkId: number | null
    tag: string | null
  }

  export type ArtworksTagsCountAggregateOutputType = {
    id: number
    artworkId: number
    tag: number
    _all: number
  }


  export type ArtworksTagsAvgAggregateInputType = {
    id?: true
    artworkId?: true
  }

  export type ArtworksTagsSumAggregateInputType = {
    id?: true
    artworkId?: true
  }

  export type ArtworksTagsMinAggregateInputType = {
    id?: true
    artworkId?: true
    tag?: true
  }

  export type ArtworksTagsMaxAggregateInputType = {
    id?: true
    artworkId?: true
    tag?: true
  }

  export type ArtworksTagsCountAggregateInputType = {
    id?: true
    artworkId?: true
    tag?: true
    _all?: true
  }

  export type ArtworksTagsAggregateArgs = {
    /**
     * Filter which artworksTags to aggregate.
     * 
    **/
    where?: artworksTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksTags to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksTagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: artworksTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksTags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned artworksTags
    **/
    _count?: true | ArtworksTagsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtworksTagsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtworksTagsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtworksTagsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtworksTagsMaxAggregateInputType
  }

  export type GetArtworksTagsAggregateType<T extends ArtworksTagsAggregateArgs> = {
        [P in keyof T & keyof AggregateArtworksTags]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtworksTags[P]>
      : GetScalarType<T[P], AggregateArtworksTags[P]>
  }




  export type ArtworksTagsGroupByArgs = {
    where?: artworksTagsWhereInput
    orderBy?: Enumerable<artworksTagsOrderByWithAggregationInput>
    by: Array<ArtworksTagsScalarFieldEnum>
    having?: artworksTagsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtworksTagsCountAggregateInputType | true
    _avg?: ArtworksTagsAvgAggregateInputType
    _sum?: ArtworksTagsSumAggregateInputType
    _min?: ArtworksTagsMinAggregateInputType
    _max?: ArtworksTagsMaxAggregateInputType
  }


  export type ArtworksTagsGroupByOutputType = {
    id: number
    artworkId: number
    tag: string | null
    _count: ArtworksTagsCountAggregateOutputType | null
    _avg: ArtworksTagsAvgAggregateOutputType | null
    _sum: ArtworksTagsSumAggregateOutputType | null
    _min: ArtworksTagsMinAggregateOutputType | null
    _max: ArtworksTagsMaxAggregateOutputType | null
  }

  type GetArtworksTagsGroupByPayload<T extends ArtworksTagsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ArtworksTagsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtworksTagsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtworksTagsGroupByOutputType[P]>
            : GetScalarType<T[P], ArtworksTagsGroupByOutputType[P]>
        }
      >
    >


  export type artworksTagsSelect = {
    id?: boolean
    artworkId?: boolean
    tag?: boolean
    artworks?: boolean | artworksArgs
  }


  export type artworksTagsInclude = {
    artworks?: boolean | artworksArgs
  } 

  export type artworksTagsGetPayload<S extends boolean | null | undefined | artworksTagsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? artworksTags :
    S extends undefined ? never :
    S extends { include: any } & (artworksTagsArgs | artworksTagsFindManyArgs)
    ? artworksTags  & {
    [P in TrueKeys<S['include']>]:
        P extends 'artworks' ? artworksGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (artworksTagsArgs | artworksTagsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'artworks' ? artworksGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof artworksTags ? artworksTags[P] : never
  } 
      : artworksTags


  type artworksTagsCountArgs = Merge<
    Omit<artworksTagsFindManyArgs, 'select' | 'include'> & {
      select?: ArtworksTagsCountAggregateInputType | true
    }
  >

  export interface artworksTagsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ArtworksTags that matches the filter.
     * @param {artworksTagsFindUniqueArgs} args - Arguments to find a ArtworksTags
     * @example
     * // Get one ArtworksTags
     * const artworksTags = await prisma.artworksTags.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends artworksTagsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, artworksTagsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'artworksTags'> extends True ? Prisma__artworksTagsClient<artworksTagsGetPayload<T>> : Prisma__artworksTagsClient<artworksTagsGetPayload<T> | null, null>

    /**
     * Find the first ArtworksTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksTagsFindFirstArgs} args - Arguments to find a ArtworksTags
     * @example
     * // Get one ArtworksTags
     * const artworksTags = await prisma.artworksTags.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends artworksTagsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, artworksTagsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'artworksTags'> extends True ? Prisma__artworksTagsClient<artworksTagsGetPayload<T>> : Prisma__artworksTagsClient<artworksTagsGetPayload<T> | null, null>

    /**
     * Find zero or more ArtworksTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksTagsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArtworksTags
     * const artworksTags = await prisma.artworksTags.findMany()
     * 
     * // Get first 10 ArtworksTags
     * const artworksTags = await prisma.artworksTags.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artworksTagsWithIdOnly = await prisma.artworksTags.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends artworksTagsFindManyArgs>(
      args?: SelectSubset<T, artworksTagsFindManyArgs>
    ): PrismaPromise<Array<artworksTagsGetPayload<T>>>

    /**
     * Create a ArtworksTags.
     * @param {artworksTagsCreateArgs} args - Arguments to create a ArtworksTags.
     * @example
     * // Create one ArtworksTags
     * const ArtworksTags = await prisma.artworksTags.create({
     *   data: {
     *     // ... data to create a ArtworksTags
     *   }
     * })
     * 
    **/
    create<T extends artworksTagsCreateArgs>(
      args: SelectSubset<T, artworksTagsCreateArgs>
    ): Prisma__artworksTagsClient<artworksTagsGetPayload<T>>

    /**
     * Create many ArtworksTags.
     *     @param {artworksTagsCreateManyArgs} args - Arguments to create many ArtworksTags.
     *     @example
     *     // Create many ArtworksTags
     *     const artworksTags = await prisma.artworksTags.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends artworksTagsCreateManyArgs>(
      args?: SelectSubset<T, artworksTagsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ArtworksTags.
     * @param {artworksTagsDeleteArgs} args - Arguments to delete one ArtworksTags.
     * @example
     * // Delete one ArtworksTags
     * const ArtworksTags = await prisma.artworksTags.delete({
     *   where: {
     *     // ... filter to delete one ArtworksTags
     *   }
     * })
     * 
    **/
    delete<T extends artworksTagsDeleteArgs>(
      args: SelectSubset<T, artworksTagsDeleteArgs>
    ): Prisma__artworksTagsClient<artworksTagsGetPayload<T>>

    /**
     * Update one ArtworksTags.
     * @param {artworksTagsUpdateArgs} args - Arguments to update one ArtworksTags.
     * @example
     * // Update one ArtworksTags
     * const artworksTags = await prisma.artworksTags.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends artworksTagsUpdateArgs>(
      args: SelectSubset<T, artworksTagsUpdateArgs>
    ): Prisma__artworksTagsClient<artworksTagsGetPayload<T>>

    /**
     * Delete zero or more ArtworksTags.
     * @param {artworksTagsDeleteManyArgs} args - Arguments to filter ArtworksTags to delete.
     * @example
     * // Delete a few ArtworksTags
     * const { count } = await prisma.artworksTags.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends artworksTagsDeleteManyArgs>(
      args?: SelectSubset<T, artworksTagsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArtworksTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksTagsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArtworksTags
     * const artworksTags = await prisma.artworksTags.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends artworksTagsUpdateManyArgs>(
      args: SelectSubset<T, artworksTagsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ArtworksTags.
     * @param {artworksTagsUpsertArgs} args - Arguments to update or create a ArtworksTags.
     * @example
     * // Update or create a ArtworksTags
     * const artworksTags = await prisma.artworksTags.upsert({
     *   create: {
     *     // ... data to create a ArtworksTags
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArtworksTags we want to update
     *   }
     * })
    **/
    upsert<T extends artworksTagsUpsertArgs>(
      args: SelectSubset<T, artworksTagsUpsertArgs>
    ): Prisma__artworksTagsClient<artworksTagsGetPayload<T>>

    /**
     * Find one ArtworksTags that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {artworksTagsFindUniqueOrThrowArgs} args - Arguments to find a ArtworksTags
     * @example
     * // Get one ArtworksTags
     * const artworksTags = await prisma.artworksTags.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends artworksTagsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, artworksTagsFindUniqueOrThrowArgs>
    ): Prisma__artworksTagsClient<artworksTagsGetPayload<T>>

    /**
     * Find the first ArtworksTags that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksTagsFindFirstOrThrowArgs} args - Arguments to find a ArtworksTags
     * @example
     * // Get one ArtworksTags
     * const artworksTags = await prisma.artworksTags.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends artworksTagsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, artworksTagsFindFirstOrThrowArgs>
    ): Prisma__artworksTagsClient<artworksTagsGetPayload<T>>

    /**
     * Count the number of ArtworksTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworksTagsCountArgs} args - Arguments to filter ArtworksTags to count.
     * @example
     * // Count the number of ArtworksTags
     * const count = await prisma.artworksTags.count({
     *   where: {
     *     // ... the filter for the ArtworksTags we want to count
     *   }
     * })
    **/
    count<T extends artworksTagsCountArgs>(
      args?: Subset<T, artworksTagsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtworksTagsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArtworksTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksTagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtworksTagsAggregateArgs>(args: Subset<T, ArtworksTagsAggregateArgs>): PrismaPromise<GetArtworksTagsAggregateType<T>>

    /**
     * Group by ArtworksTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworksTagsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtworksTagsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtworksTagsGroupByArgs['orderBy'] }
        : { orderBy?: ArtworksTagsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtworksTagsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtworksTagsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for artworksTags.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__artworksTagsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    artworks<T extends artworksArgs= {}>(args?: Subset<T, artworksArgs>): Prisma__artworksClient<artworksGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * artworksTags base type for findUnique actions
   */
  export type artworksTagsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the artworksTags
     * 
    **/
    select?: artworksTagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksTagsInclude | null
    /**
     * Filter, which artworksTags to fetch.
     * 
    **/
    where: artworksTagsWhereUniqueInput
  }

  /**
   * artworksTags: findUnique
   */
  export interface artworksTagsFindUniqueArgs extends artworksTagsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworksTags base type for findFirst actions
   */
  export type artworksTagsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the artworksTags
     * 
    **/
    select?: artworksTagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksTagsInclude | null
    /**
     * Filter, which artworksTags to fetch.
     * 
    **/
    where?: artworksTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksTags to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksTagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artworksTags.
     * 
    **/
    cursor?: artworksTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksTags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artworksTags.
     * 
    **/
    distinct?: Enumerable<ArtworksTagsScalarFieldEnum>
  }

  /**
   * artworksTags: findFirst
   */
  export interface artworksTagsFindFirstArgs extends artworksTagsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworksTags findMany
   */
  export type artworksTagsFindManyArgs = {
    /**
     * Select specific fields to fetch from the artworksTags
     * 
    **/
    select?: artworksTagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksTagsInclude | null
    /**
     * Filter, which artworksTags to fetch.
     * 
    **/
    where?: artworksTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworksTags to fetch.
     * 
    **/
    orderBy?: Enumerable<artworksTagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing artworksTags.
     * 
    **/
    cursor?: artworksTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworksTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworksTags.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ArtworksTagsScalarFieldEnum>
  }


  /**
   * artworksTags create
   */
  export type artworksTagsCreateArgs = {
    /**
     * Select specific fields to fetch from the artworksTags
     * 
    **/
    select?: artworksTagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksTagsInclude | null
    /**
     * The data needed to create a artworksTags.
     * 
    **/
    data: XOR<artworksTagsCreateInput, artworksTagsUncheckedCreateInput>
  }


  /**
   * artworksTags createMany
   */
  export type artworksTagsCreateManyArgs = {
    /**
     * The data used to create many artworksTags.
     * 
    **/
    data: Enumerable<artworksTagsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * artworksTags update
   */
  export type artworksTagsUpdateArgs = {
    /**
     * Select specific fields to fetch from the artworksTags
     * 
    **/
    select?: artworksTagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksTagsInclude | null
    /**
     * The data needed to update a artworksTags.
     * 
    **/
    data: XOR<artworksTagsUpdateInput, artworksTagsUncheckedUpdateInput>
    /**
     * Choose, which artworksTags to update.
     * 
    **/
    where: artworksTagsWhereUniqueInput
  }


  /**
   * artworksTags updateMany
   */
  export type artworksTagsUpdateManyArgs = {
    /**
     * The data used to update artworksTags.
     * 
    **/
    data: XOR<artworksTagsUpdateManyMutationInput, artworksTagsUncheckedUpdateManyInput>
    /**
     * Filter which artworksTags to update
     * 
    **/
    where?: artworksTagsWhereInput
  }


  /**
   * artworksTags upsert
   */
  export type artworksTagsUpsertArgs = {
    /**
     * Select specific fields to fetch from the artworksTags
     * 
    **/
    select?: artworksTagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksTagsInclude | null
    /**
     * The filter to search for the artworksTags to update in case it exists.
     * 
    **/
    where: artworksTagsWhereUniqueInput
    /**
     * In case the artworksTags found by the `where` argument doesn't exist, create a new artworksTags with this data.
     * 
    **/
    create: XOR<artworksTagsCreateInput, artworksTagsUncheckedCreateInput>
    /**
     * In case the artworksTags was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<artworksTagsUpdateInput, artworksTagsUncheckedUpdateInput>
  }


  /**
   * artworksTags delete
   */
  export type artworksTagsDeleteArgs = {
    /**
     * Select specific fields to fetch from the artworksTags
     * 
    **/
    select?: artworksTagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksTagsInclude | null
    /**
     * Filter which artworksTags to delete.
     * 
    **/
    where: artworksTagsWhereUniqueInput
  }


  /**
   * artworksTags deleteMany
   */
  export type artworksTagsDeleteManyArgs = {
    /**
     * Filter which artworksTags to delete
     * 
    **/
    where?: artworksTagsWhereInput
  }


  /**
   * artworksTags: findUniqueOrThrow
   */
  export type artworksTagsFindUniqueOrThrowArgs = artworksTagsFindUniqueArgsBase
      

  /**
   * artworksTags: findFirstOrThrow
   */
  export type artworksTagsFindFirstOrThrowArgs = artworksTagsFindFirstArgsBase
      

  /**
   * artworksTags without action
   */
  export type artworksTagsArgs = {
    /**
     * Select specific fields to fetch from the artworksTags
     * 
    **/
    select?: artworksTagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworksTagsInclude | null
  }



  /**
   * Model notifications
   */


  export type AggregateNotifications = {
    _count: NotificationsCountAggregateOutputType | null
    _avg: NotificationsAvgAggregateOutputType | null
    _sum: NotificationsSumAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  export type NotificationsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    typeId: number | null
  }

  export type NotificationsSumAggregateOutputType = {
    id: number | null
    userId: number | null
    typeId: number | null
  }

  export type NotificationsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    typeId: number | null
    title: string | null
    content: string | null
    link: string | null
    createdDate: Date | null
    viewed: boolean | null
  }

  export type NotificationsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    typeId: number | null
    title: string | null
    content: string | null
    link: string | null
    createdDate: Date | null
    viewed: boolean | null
  }

  export type NotificationsCountAggregateOutputType = {
    id: number
    userId: number
    typeId: number
    title: number
    content: number
    link: number
    createdDate: number
    viewed: number
    _all: number
  }


  export type NotificationsAvgAggregateInputType = {
    id?: true
    userId?: true
    typeId?: true
  }

  export type NotificationsSumAggregateInputType = {
    id?: true
    userId?: true
    typeId?: true
  }

  export type NotificationsMinAggregateInputType = {
    id?: true
    userId?: true
    typeId?: true
    title?: true
    content?: true
    link?: true
    createdDate?: true
    viewed?: true
  }

  export type NotificationsMaxAggregateInputType = {
    id?: true
    userId?: true
    typeId?: true
    title?: true
    content?: true
    link?: true
    createdDate?: true
    viewed?: true
  }

  export type NotificationsCountAggregateInputType = {
    id?: true
    userId?: true
    typeId?: true
    title?: true
    content?: true
    link?: true
    createdDate?: true
    viewed?: true
    _all?: true
  }

  export type NotificationsAggregateArgs = {
    /**
     * Filter which notifications to aggregate.
     * 
    **/
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<notificationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned notifications
    **/
    _count?: true | NotificationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationsMaxAggregateInputType
  }

  export type GetNotificationsAggregateType<T extends NotificationsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotifications]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotifications[P]>
      : GetScalarType<T[P], AggregateNotifications[P]>
  }




  export type NotificationsGroupByArgs = {
    where?: notificationsWhereInput
    orderBy?: Enumerable<notificationsOrderByWithAggregationInput>
    by: Array<NotificationsScalarFieldEnum>
    having?: notificationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationsCountAggregateInputType | true
    _avg?: NotificationsAvgAggregateInputType
    _sum?: NotificationsSumAggregateInputType
    _min?: NotificationsMinAggregateInputType
    _max?: NotificationsMaxAggregateInputType
  }


  export type NotificationsGroupByOutputType = {
    id: number
    userId: number
    typeId: number
    title: string | null
    content: string | null
    link: string | null
    createdDate: Date | null
    viewed: boolean | null
    _count: NotificationsCountAggregateOutputType | null
    _avg: NotificationsAvgAggregateOutputType | null
    _sum: NotificationsSumAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  type GetNotificationsGroupByPayload<T extends NotificationsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NotificationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
        }
      >
    >


  export type notificationsSelect = {
    id?: boolean
    userId?: boolean
    typeId?: boolean
    title?: boolean
    content?: boolean
    link?: boolean
    createdDate?: boolean
    viewed?: boolean
    users?: boolean | usersArgs
  }


  export type notificationsInclude = {
    users?: boolean | usersArgs
  } 

  export type notificationsGetPayload<S extends boolean | null | undefined | notificationsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? notifications :
    S extends undefined ? never :
    S extends { include: any } & (notificationsArgs | notificationsFindManyArgs)
    ? notifications  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (notificationsArgs | notificationsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof notifications ? notifications[P] : never
  } 
      : notifications


  type notificationsCountArgs = Merge<
    Omit<notificationsFindManyArgs, 'select' | 'include'> & {
      select?: NotificationsCountAggregateInputType | true
    }
  >

  export interface notificationsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Notifications that matches the filter.
     * @param {notificationsFindUniqueArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends notificationsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, notificationsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'notifications'> extends True ? Prisma__notificationsClient<notificationsGetPayload<T>> : Prisma__notificationsClient<notificationsGetPayload<T> | null, null>

    /**
     * Find the first Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindFirstArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends notificationsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, notificationsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'notifications'> extends True ? Prisma__notificationsClient<notificationsGetPayload<T>> : Prisma__notificationsClient<notificationsGetPayload<T> | null, null>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notifications.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notifications.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationsWithIdOnly = await prisma.notifications.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends notificationsFindManyArgs>(
      args?: SelectSubset<T, notificationsFindManyArgs>
    ): PrismaPromise<Array<notificationsGetPayload<T>>>

    /**
     * Create a Notifications.
     * @param {notificationsCreateArgs} args - Arguments to create a Notifications.
     * @example
     * // Create one Notifications
     * const Notifications = await prisma.notifications.create({
     *   data: {
     *     // ... data to create a Notifications
     *   }
     * })
     * 
    **/
    create<T extends notificationsCreateArgs>(
      args: SelectSubset<T, notificationsCreateArgs>
    ): Prisma__notificationsClient<notificationsGetPayload<T>>

    /**
     * Create many Notifications.
     *     @param {notificationsCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notifications = await prisma.notifications.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends notificationsCreateManyArgs>(
      args?: SelectSubset<T, notificationsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Notifications.
     * @param {notificationsDeleteArgs} args - Arguments to delete one Notifications.
     * @example
     * // Delete one Notifications
     * const Notifications = await prisma.notifications.delete({
     *   where: {
     *     // ... filter to delete one Notifications
     *   }
     * })
     * 
    **/
    delete<T extends notificationsDeleteArgs>(
      args: SelectSubset<T, notificationsDeleteArgs>
    ): Prisma__notificationsClient<notificationsGetPayload<T>>

    /**
     * Update one Notifications.
     * @param {notificationsUpdateArgs} args - Arguments to update one Notifications.
     * @example
     * // Update one Notifications
     * const notifications = await prisma.notifications.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends notificationsUpdateArgs>(
      args: SelectSubset<T, notificationsUpdateArgs>
    ): Prisma__notificationsClient<notificationsGetPayload<T>>

    /**
     * Delete zero or more Notifications.
     * @param {notificationsDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notifications.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends notificationsDeleteManyArgs>(
      args?: SelectSubset<T, notificationsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notifications = await prisma.notifications.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends notificationsUpdateManyArgs>(
      args: SelectSubset<T, notificationsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Notifications.
     * @param {notificationsUpsertArgs} args - Arguments to update or create a Notifications.
     * @example
     * // Update or create a Notifications
     * const notifications = await prisma.notifications.upsert({
     *   create: {
     *     // ... data to create a Notifications
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notifications we want to update
     *   }
     * })
    **/
    upsert<T extends notificationsUpsertArgs>(
      args: SelectSubset<T, notificationsUpsertArgs>
    ): Prisma__notificationsClient<notificationsGetPayload<T>>

    /**
     * Find one Notifications that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {notificationsFindUniqueOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends notificationsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, notificationsFindUniqueOrThrowArgs>
    ): Prisma__notificationsClient<notificationsGetPayload<T>>

    /**
     * Find the first Notifications that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindFirstOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends notificationsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, notificationsFindFirstOrThrowArgs>
    ): Prisma__notificationsClient<notificationsGetPayload<T>>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notifications.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends notificationsCountArgs>(
      args?: Subset<T, notificationsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationsAggregateArgs>(args: Subset<T, NotificationsAggregateArgs>): PrismaPromise<GetNotificationsAggregateType<T>>

    /**
     * Group by Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationsGroupByArgs['orderBy'] }
        : { orderBy?: NotificationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for notifications.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__notificationsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * notifications base type for findUnique actions
   */
  export type notificationsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the notifications
     * 
    **/
    select?: notificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notificationsInclude | null
    /**
     * Filter, which notifications to fetch.
     * 
    **/
    where: notificationsWhereUniqueInput
  }

  /**
   * notifications: findUnique
   */
  export interface notificationsFindUniqueArgs extends notificationsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * notifications base type for findFirst actions
   */
  export type notificationsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the notifications
     * 
    **/
    select?: notificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notificationsInclude | null
    /**
     * Filter, which notifications to fetch.
     * 
    **/
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<notificationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     * 
    **/
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     * 
    **/
    distinct?: Enumerable<NotificationsScalarFieldEnum>
  }

  /**
   * notifications: findFirst
   */
  export interface notificationsFindFirstArgs extends notificationsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * notifications findMany
   */
  export type notificationsFindManyArgs = {
    /**
     * Select specific fields to fetch from the notifications
     * 
    **/
    select?: notificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notificationsInclude | null
    /**
     * Filter, which notifications to fetch.
     * 
    **/
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<notificationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing notifications.
     * 
    **/
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NotificationsScalarFieldEnum>
  }


  /**
   * notifications create
   */
  export type notificationsCreateArgs = {
    /**
     * Select specific fields to fetch from the notifications
     * 
    **/
    select?: notificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notificationsInclude | null
    /**
     * The data needed to create a notifications.
     * 
    **/
    data: XOR<notificationsCreateInput, notificationsUncheckedCreateInput>
  }


  /**
   * notifications createMany
   */
  export type notificationsCreateManyArgs = {
    /**
     * The data used to create many notifications.
     * 
    **/
    data: Enumerable<notificationsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * notifications update
   */
  export type notificationsUpdateArgs = {
    /**
     * Select specific fields to fetch from the notifications
     * 
    **/
    select?: notificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notificationsInclude | null
    /**
     * The data needed to update a notifications.
     * 
    **/
    data: XOR<notificationsUpdateInput, notificationsUncheckedUpdateInput>
    /**
     * Choose, which notifications to update.
     * 
    **/
    where: notificationsWhereUniqueInput
  }


  /**
   * notifications updateMany
   */
  export type notificationsUpdateManyArgs = {
    /**
     * The data used to update notifications.
     * 
    **/
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyInput>
    /**
     * Filter which notifications to update
     * 
    **/
    where?: notificationsWhereInput
  }


  /**
   * notifications upsert
   */
  export type notificationsUpsertArgs = {
    /**
     * Select specific fields to fetch from the notifications
     * 
    **/
    select?: notificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notificationsInclude | null
    /**
     * The filter to search for the notifications to update in case it exists.
     * 
    **/
    where: notificationsWhereUniqueInput
    /**
     * In case the notifications found by the `where` argument doesn't exist, create a new notifications with this data.
     * 
    **/
    create: XOR<notificationsCreateInput, notificationsUncheckedCreateInput>
    /**
     * In case the notifications was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<notificationsUpdateInput, notificationsUncheckedUpdateInput>
  }


  /**
   * notifications delete
   */
  export type notificationsDeleteArgs = {
    /**
     * Select specific fields to fetch from the notifications
     * 
    **/
    select?: notificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notificationsInclude | null
    /**
     * Filter which notifications to delete.
     * 
    **/
    where: notificationsWhereUniqueInput
  }


  /**
   * notifications deleteMany
   */
  export type notificationsDeleteManyArgs = {
    /**
     * Filter which notifications to delete
     * 
    **/
    where?: notificationsWhereInput
  }


  /**
   * notifications: findUniqueOrThrow
   */
  export type notificationsFindUniqueOrThrowArgs = notificationsFindUniqueArgsBase
      

  /**
   * notifications: findFirstOrThrow
   */
  export type notificationsFindFirstOrThrowArgs = notificationsFindFirstArgsBase
      

  /**
   * notifications without action
   */
  export type notificationsArgs = {
    /**
     * Select specific fields to fetch from the notifications
     * 
    **/
    select?: notificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: notificationsInclude | null
  }



  /**
   * Model usersRatings
   */


  export type AggregateUsersRatings = {
    _count: UsersRatingsCountAggregateOutputType | null
    _avg: UsersRatingsAvgAggregateOutputType | null
    _sum: UsersRatingsSumAggregateOutputType | null
    _min: UsersRatingsMinAggregateOutputType | null
    _max: UsersRatingsMaxAggregateOutputType | null
  }

  export type UsersRatingsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    qualifierId: number | null
    rating: number | null
  }

  export type UsersRatingsSumAggregateOutputType = {
    id: number | null
    userId: number | null
    qualifierId: number | null
    rating: number | null
  }

  export type UsersRatingsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    qualifierId: number | null
    rating: number | null
  }

  export type UsersRatingsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    qualifierId: number | null
    rating: number | null
  }

  export type UsersRatingsCountAggregateOutputType = {
    id: number
    userId: number
    qualifierId: number
    rating: number
    _all: number
  }


  export type UsersRatingsAvgAggregateInputType = {
    id?: true
    userId?: true
    qualifierId?: true
    rating?: true
  }

  export type UsersRatingsSumAggregateInputType = {
    id?: true
    userId?: true
    qualifierId?: true
    rating?: true
  }

  export type UsersRatingsMinAggregateInputType = {
    id?: true
    userId?: true
    qualifierId?: true
    rating?: true
  }

  export type UsersRatingsMaxAggregateInputType = {
    id?: true
    userId?: true
    qualifierId?: true
    rating?: true
  }

  export type UsersRatingsCountAggregateInputType = {
    id?: true
    userId?: true
    qualifierId?: true
    rating?: true
    _all?: true
  }

  export type UsersRatingsAggregateArgs = {
    /**
     * Filter which usersRatings to aggregate.
     * 
    **/
    where?: usersRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usersRatings to fetch.
     * 
    **/
    orderBy?: Enumerable<usersRatingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usersRatings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usersRatings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usersRatings
    **/
    _count?: true | UsersRatingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersRatingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersRatingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersRatingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersRatingsMaxAggregateInputType
  }

  export type GetUsersRatingsAggregateType<T extends UsersRatingsAggregateArgs> = {
        [P in keyof T & keyof AggregateUsersRatings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsersRatings[P]>
      : GetScalarType<T[P], AggregateUsersRatings[P]>
  }




  export type UsersRatingsGroupByArgs = {
    where?: usersRatingsWhereInput
    orderBy?: Enumerable<usersRatingsOrderByWithAggregationInput>
    by: Array<UsersRatingsScalarFieldEnum>
    having?: usersRatingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersRatingsCountAggregateInputType | true
    _avg?: UsersRatingsAvgAggregateInputType
    _sum?: UsersRatingsSumAggregateInputType
    _min?: UsersRatingsMinAggregateInputType
    _max?: UsersRatingsMaxAggregateInputType
  }


  export type UsersRatingsGroupByOutputType = {
    id: number
    userId: number
    qualifierId: number
    rating: number | null
    _count: UsersRatingsCountAggregateOutputType | null
    _avg: UsersRatingsAvgAggregateOutputType | null
    _sum: UsersRatingsSumAggregateOutputType | null
    _min: UsersRatingsMinAggregateOutputType | null
    _max: UsersRatingsMaxAggregateOutputType | null
  }

  type GetUsersRatingsGroupByPayload<T extends UsersRatingsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersRatingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersRatingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersRatingsGroupByOutputType[P]>
            : GetScalarType<T[P], UsersRatingsGroupByOutputType[P]>
        }
      >
    >


  export type usersRatingsSelect = {
    id?: boolean
    userId?: boolean
    qualifierId?: boolean
    rating?: boolean
    users_usersTousersRatings_userId?: boolean | usersArgs
    users_usersTousersRatings_qualifierId?: boolean | usersArgs
  }


  export type usersRatingsInclude = {
    users_usersTousersRatings_userId?: boolean | usersArgs
    users_usersTousersRatings_qualifierId?: boolean | usersArgs
  } 

  export type usersRatingsGetPayload<S extends boolean | null | undefined | usersRatingsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? usersRatings :
    S extends undefined ? never :
    S extends { include: any } & (usersRatingsArgs | usersRatingsFindManyArgs)
    ? usersRatings  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users_usersTousersRatings_userId' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users_usersTousersRatings_qualifierId' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (usersRatingsArgs | usersRatingsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users_usersTousersRatings_userId' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users_usersTousersRatings_qualifierId' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof usersRatings ? usersRatings[P] : never
  } 
      : usersRatings


  type usersRatingsCountArgs = Merge<
    Omit<usersRatingsFindManyArgs, 'select' | 'include'> & {
      select?: UsersRatingsCountAggregateInputType | true
    }
  >

  export interface usersRatingsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one UsersRatings that matches the filter.
     * @param {usersRatingsFindUniqueArgs} args - Arguments to find a UsersRatings
     * @example
     * // Get one UsersRatings
     * const usersRatings = await prisma.usersRatings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersRatingsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersRatingsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'usersRatings'> extends True ? Prisma__usersRatingsClient<usersRatingsGetPayload<T>> : Prisma__usersRatingsClient<usersRatingsGetPayload<T> | null, null>

    /**
     * Find the first UsersRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersRatingsFindFirstArgs} args - Arguments to find a UsersRatings
     * @example
     * // Get one UsersRatings
     * const usersRatings = await prisma.usersRatings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersRatingsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersRatingsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'usersRatings'> extends True ? Prisma__usersRatingsClient<usersRatingsGetPayload<T>> : Prisma__usersRatingsClient<usersRatingsGetPayload<T> | null, null>

    /**
     * Find zero or more UsersRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersRatingsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsersRatings
     * const usersRatings = await prisma.usersRatings.findMany()
     * 
     * // Get first 10 UsersRatings
     * const usersRatings = await prisma.usersRatings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersRatingsWithIdOnly = await prisma.usersRatings.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersRatingsFindManyArgs>(
      args?: SelectSubset<T, usersRatingsFindManyArgs>
    ): PrismaPromise<Array<usersRatingsGetPayload<T>>>

    /**
     * Create a UsersRatings.
     * @param {usersRatingsCreateArgs} args - Arguments to create a UsersRatings.
     * @example
     * // Create one UsersRatings
     * const UsersRatings = await prisma.usersRatings.create({
     *   data: {
     *     // ... data to create a UsersRatings
     *   }
     * })
     * 
    **/
    create<T extends usersRatingsCreateArgs>(
      args: SelectSubset<T, usersRatingsCreateArgs>
    ): Prisma__usersRatingsClient<usersRatingsGetPayload<T>>

    /**
     * Create many UsersRatings.
     *     @param {usersRatingsCreateManyArgs} args - Arguments to create many UsersRatings.
     *     @example
     *     // Create many UsersRatings
     *     const usersRatings = await prisma.usersRatings.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersRatingsCreateManyArgs>(
      args?: SelectSubset<T, usersRatingsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UsersRatings.
     * @param {usersRatingsDeleteArgs} args - Arguments to delete one UsersRatings.
     * @example
     * // Delete one UsersRatings
     * const UsersRatings = await prisma.usersRatings.delete({
     *   where: {
     *     // ... filter to delete one UsersRatings
     *   }
     * })
     * 
    **/
    delete<T extends usersRatingsDeleteArgs>(
      args: SelectSubset<T, usersRatingsDeleteArgs>
    ): Prisma__usersRatingsClient<usersRatingsGetPayload<T>>

    /**
     * Update one UsersRatings.
     * @param {usersRatingsUpdateArgs} args - Arguments to update one UsersRatings.
     * @example
     * // Update one UsersRatings
     * const usersRatings = await prisma.usersRatings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersRatingsUpdateArgs>(
      args: SelectSubset<T, usersRatingsUpdateArgs>
    ): Prisma__usersRatingsClient<usersRatingsGetPayload<T>>

    /**
     * Delete zero or more UsersRatings.
     * @param {usersRatingsDeleteManyArgs} args - Arguments to filter UsersRatings to delete.
     * @example
     * // Delete a few UsersRatings
     * const { count } = await prisma.usersRatings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersRatingsDeleteManyArgs>(
      args?: SelectSubset<T, usersRatingsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsersRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersRatingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsersRatings
     * const usersRatings = await prisma.usersRatings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersRatingsUpdateManyArgs>(
      args: SelectSubset<T, usersRatingsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UsersRatings.
     * @param {usersRatingsUpsertArgs} args - Arguments to update or create a UsersRatings.
     * @example
     * // Update or create a UsersRatings
     * const usersRatings = await prisma.usersRatings.upsert({
     *   create: {
     *     // ... data to create a UsersRatings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsersRatings we want to update
     *   }
     * })
    **/
    upsert<T extends usersRatingsUpsertArgs>(
      args: SelectSubset<T, usersRatingsUpsertArgs>
    ): Prisma__usersRatingsClient<usersRatingsGetPayload<T>>

    /**
     * Find one UsersRatings that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {usersRatingsFindUniqueOrThrowArgs} args - Arguments to find a UsersRatings
     * @example
     * // Get one UsersRatings
     * const usersRatings = await prisma.usersRatings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersRatingsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usersRatingsFindUniqueOrThrowArgs>
    ): Prisma__usersRatingsClient<usersRatingsGetPayload<T>>

    /**
     * Find the first UsersRatings that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersRatingsFindFirstOrThrowArgs} args - Arguments to find a UsersRatings
     * @example
     * // Get one UsersRatings
     * const usersRatings = await prisma.usersRatings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersRatingsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usersRatingsFindFirstOrThrowArgs>
    ): Prisma__usersRatingsClient<usersRatingsGetPayload<T>>

    /**
     * Count the number of UsersRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersRatingsCountArgs} args - Arguments to filter UsersRatings to count.
     * @example
     * // Count the number of UsersRatings
     * const count = await prisma.usersRatings.count({
     *   where: {
     *     // ... the filter for the UsersRatings we want to count
     *   }
     * })
    **/
    count<T extends usersRatingsCountArgs>(
      args?: Subset<T, usersRatingsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersRatingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsersRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersRatingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersRatingsAggregateArgs>(args: Subset<T, UsersRatingsAggregateArgs>): PrismaPromise<GetUsersRatingsAggregateType<T>>

    /**
     * Group by UsersRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersRatingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersRatingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersRatingsGroupByArgs['orderBy'] }
        : { orderBy?: UsersRatingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersRatingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersRatingsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for usersRatings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersRatingsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users_usersTousersRatings_userId<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    users_usersTousersRatings_qualifierId<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * usersRatings base type for findUnique actions
   */
  export type usersRatingsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the usersRatings
     * 
    **/
    select?: usersRatingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersRatingsInclude | null
    /**
     * Filter, which usersRatings to fetch.
     * 
    **/
    where: usersRatingsWhereUniqueInput
  }

  /**
   * usersRatings: findUnique
   */
  export interface usersRatingsFindUniqueArgs extends usersRatingsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * usersRatings base type for findFirst actions
   */
  export type usersRatingsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the usersRatings
     * 
    **/
    select?: usersRatingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersRatingsInclude | null
    /**
     * Filter, which usersRatings to fetch.
     * 
    **/
    where?: usersRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usersRatings to fetch.
     * 
    **/
    orderBy?: Enumerable<usersRatingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usersRatings.
     * 
    **/
    cursor?: usersRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usersRatings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usersRatings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usersRatings.
     * 
    **/
    distinct?: Enumerable<UsersRatingsScalarFieldEnum>
  }

  /**
   * usersRatings: findFirst
   */
  export interface usersRatingsFindFirstArgs extends usersRatingsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * usersRatings findMany
   */
  export type usersRatingsFindManyArgs = {
    /**
     * Select specific fields to fetch from the usersRatings
     * 
    **/
    select?: usersRatingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersRatingsInclude | null
    /**
     * Filter, which usersRatings to fetch.
     * 
    **/
    where?: usersRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usersRatings to fetch.
     * 
    **/
    orderBy?: Enumerable<usersRatingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usersRatings.
     * 
    **/
    cursor?: usersRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usersRatings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usersRatings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersRatingsScalarFieldEnum>
  }


  /**
   * usersRatings create
   */
  export type usersRatingsCreateArgs = {
    /**
     * Select specific fields to fetch from the usersRatings
     * 
    **/
    select?: usersRatingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersRatingsInclude | null
    /**
     * The data needed to create a usersRatings.
     * 
    **/
    data: XOR<usersRatingsCreateInput, usersRatingsUncheckedCreateInput>
  }


  /**
   * usersRatings createMany
   */
  export type usersRatingsCreateManyArgs = {
    /**
     * The data used to create many usersRatings.
     * 
    **/
    data: Enumerable<usersRatingsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * usersRatings update
   */
  export type usersRatingsUpdateArgs = {
    /**
     * Select specific fields to fetch from the usersRatings
     * 
    **/
    select?: usersRatingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersRatingsInclude | null
    /**
     * The data needed to update a usersRatings.
     * 
    **/
    data: XOR<usersRatingsUpdateInput, usersRatingsUncheckedUpdateInput>
    /**
     * Choose, which usersRatings to update.
     * 
    **/
    where: usersRatingsWhereUniqueInput
  }


  /**
   * usersRatings updateMany
   */
  export type usersRatingsUpdateManyArgs = {
    /**
     * The data used to update usersRatings.
     * 
    **/
    data: XOR<usersRatingsUpdateManyMutationInput, usersRatingsUncheckedUpdateManyInput>
    /**
     * Filter which usersRatings to update
     * 
    **/
    where?: usersRatingsWhereInput
  }


  /**
   * usersRatings upsert
   */
  export type usersRatingsUpsertArgs = {
    /**
     * Select specific fields to fetch from the usersRatings
     * 
    **/
    select?: usersRatingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersRatingsInclude | null
    /**
     * The filter to search for the usersRatings to update in case it exists.
     * 
    **/
    where: usersRatingsWhereUniqueInput
    /**
     * In case the usersRatings found by the `where` argument doesn't exist, create a new usersRatings with this data.
     * 
    **/
    create: XOR<usersRatingsCreateInput, usersRatingsUncheckedCreateInput>
    /**
     * In case the usersRatings was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersRatingsUpdateInput, usersRatingsUncheckedUpdateInput>
  }


  /**
   * usersRatings delete
   */
  export type usersRatingsDeleteArgs = {
    /**
     * Select specific fields to fetch from the usersRatings
     * 
    **/
    select?: usersRatingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersRatingsInclude | null
    /**
     * Filter which usersRatings to delete.
     * 
    **/
    where: usersRatingsWhereUniqueInput
  }


  /**
   * usersRatings deleteMany
   */
  export type usersRatingsDeleteManyArgs = {
    /**
     * Filter which usersRatings to delete
     * 
    **/
    where?: usersRatingsWhereInput
  }


  /**
   * usersRatings: findUniqueOrThrow
   */
  export type usersRatingsFindUniqueOrThrowArgs = usersRatingsFindUniqueArgsBase
      

  /**
   * usersRatings: findFirstOrThrow
   */
  export type usersRatingsFindFirstOrThrowArgs = usersRatingsFindFirstArgsBase
      

  /**
   * usersRatings without action
   */
  export type usersRatingsArgs = {
    /**
     * Select specific fields to fetch from the usersRatings
     * 
    **/
    select?: usersRatingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersRatingsInclude | null
  }



  /**
   * Model artworkCollections
   */


  export type AggregateArtworkCollections = {
    _count: ArtworkCollectionsCountAggregateOutputType | null
    _avg: ArtworkCollectionsAvgAggregateOutputType | null
    _sum: ArtworkCollectionsSumAggregateOutputType | null
    _min: ArtworkCollectionsMinAggregateOutputType | null
    _max: ArtworkCollectionsMaxAggregateOutputType | null
  }

  export type ArtworkCollectionsAvgAggregateOutputType = {
    id: number | null
    collectionId: number | null
    artworkId: number | null
  }

  export type ArtworkCollectionsSumAggregateOutputType = {
    id: number | null
    collectionId: number | null
    artworkId: number | null
  }

  export type ArtworkCollectionsMinAggregateOutputType = {
    id: number | null
    collectionId: number | null
    artworkId: number | null
  }

  export type ArtworkCollectionsMaxAggregateOutputType = {
    id: number | null
    collectionId: number | null
    artworkId: number | null
  }

  export type ArtworkCollectionsCountAggregateOutputType = {
    id: number
    collectionId: number
    artworkId: number
    _all: number
  }


  export type ArtworkCollectionsAvgAggregateInputType = {
    id?: true
    collectionId?: true
    artworkId?: true
  }

  export type ArtworkCollectionsSumAggregateInputType = {
    id?: true
    collectionId?: true
    artworkId?: true
  }

  export type ArtworkCollectionsMinAggregateInputType = {
    id?: true
    collectionId?: true
    artworkId?: true
  }

  export type ArtworkCollectionsMaxAggregateInputType = {
    id?: true
    collectionId?: true
    artworkId?: true
  }

  export type ArtworkCollectionsCountAggregateInputType = {
    id?: true
    collectionId?: true
    artworkId?: true
    _all?: true
  }

  export type ArtworkCollectionsAggregateArgs = {
    /**
     * Filter which artworkCollections to aggregate.
     * 
    **/
    where?: artworkCollectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworkCollections to fetch.
     * 
    **/
    orderBy?: Enumerable<artworkCollectionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: artworkCollectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworkCollections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworkCollections.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned artworkCollections
    **/
    _count?: true | ArtworkCollectionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtworkCollectionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtworkCollectionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtworkCollectionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtworkCollectionsMaxAggregateInputType
  }

  export type GetArtworkCollectionsAggregateType<T extends ArtworkCollectionsAggregateArgs> = {
        [P in keyof T & keyof AggregateArtworkCollections]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtworkCollections[P]>
      : GetScalarType<T[P], AggregateArtworkCollections[P]>
  }




  export type ArtworkCollectionsGroupByArgs = {
    where?: artworkCollectionsWhereInput
    orderBy?: Enumerable<artworkCollectionsOrderByWithAggregationInput>
    by: Array<ArtworkCollectionsScalarFieldEnum>
    having?: artworkCollectionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtworkCollectionsCountAggregateInputType | true
    _avg?: ArtworkCollectionsAvgAggregateInputType
    _sum?: ArtworkCollectionsSumAggregateInputType
    _min?: ArtworkCollectionsMinAggregateInputType
    _max?: ArtworkCollectionsMaxAggregateInputType
  }


  export type ArtworkCollectionsGroupByOutputType = {
    id: number
    collectionId: number
    artworkId: number
    _count: ArtworkCollectionsCountAggregateOutputType | null
    _avg: ArtworkCollectionsAvgAggregateOutputType | null
    _sum: ArtworkCollectionsSumAggregateOutputType | null
    _min: ArtworkCollectionsMinAggregateOutputType | null
    _max: ArtworkCollectionsMaxAggregateOutputType | null
  }

  type GetArtworkCollectionsGroupByPayload<T extends ArtworkCollectionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ArtworkCollectionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtworkCollectionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtworkCollectionsGroupByOutputType[P]>
            : GetScalarType<T[P], ArtworkCollectionsGroupByOutputType[P]>
        }
      >
    >


  export type artworkCollectionsSelect = {
    id?: boolean
    collectionId?: boolean
    artworkId?: boolean
    collections?: boolean | collectionsArgs
    artworks?: boolean | artworksArgs
  }


  export type artworkCollectionsInclude = {
    collections?: boolean | collectionsArgs
    artworks?: boolean | artworksArgs
  } 

  export type artworkCollectionsGetPayload<S extends boolean | null | undefined | artworkCollectionsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? artworkCollections :
    S extends undefined ? never :
    S extends { include: any } & (artworkCollectionsArgs | artworkCollectionsFindManyArgs)
    ? artworkCollections  & {
    [P in TrueKeys<S['include']>]:
        P extends 'collections' ? collectionsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'artworks' ? artworksGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (artworkCollectionsArgs | artworkCollectionsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'collections' ? collectionsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'artworks' ? artworksGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof artworkCollections ? artworkCollections[P] : never
  } 
      : artworkCollections


  type artworkCollectionsCountArgs = Merge<
    Omit<artworkCollectionsFindManyArgs, 'select' | 'include'> & {
      select?: ArtworkCollectionsCountAggregateInputType | true
    }
  >

  export interface artworkCollectionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ArtworkCollections that matches the filter.
     * @param {artworkCollectionsFindUniqueArgs} args - Arguments to find a ArtworkCollections
     * @example
     * // Get one ArtworkCollections
     * const artworkCollections = await prisma.artworkCollections.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends artworkCollectionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, artworkCollectionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'artworkCollections'> extends True ? Prisma__artworkCollectionsClient<artworkCollectionsGetPayload<T>> : Prisma__artworkCollectionsClient<artworkCollectionsGetPayload<T> | null, null>

    /**
     * Find the first ArtworkCollections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworkCollectionsFindFirstArgs} args - Arguments to find a ArtworkCollections
     * @example
     * // Get one ArtworkCollections
     * const artworkCollections = await prisma.artworkCollections.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends artworkCollectionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, artworkCollectionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'artworkCollections'> extends True ? Prisma__artworkCollectionsClient<artworkCollectionsGetPayload<T>> : Prisma__artworkCollectionsClient<artworkCollectionsGetPayload<T> | null, null>

    /**
     * Find zero or more ArtworkCollections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworkCollectionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArtworkCollections
     * const artworkCollections = await prisma.artworkCollections.findMany()
     * 
     * // Get first 10 ArtworkCollections
     * const artworkCollections = await prisma.artworkCollections.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artworkCollectionsWithIdOnly = await prisma.artworkCollections.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends artworkCollectionsFindManyArgs>(
      args?: SelectSubset<T, artworkCollectionsFindManyArgs>
    ): PrismaPromise<Array<artworkCollectionsGetPayload<T>>>

    /**
     * Create a ArtworkCollections.
     * @param {artworkCollectionsCreateArgs} args - Arguments to create a ArtworkCollections.
     * @example
     * // Create one ArtworkCollections
     * const ArtworkCollections = await prisma.artworkCollections.create({
     *   data: {
     *     // ... data to create a ArtworkCollections
     *   }
     * })
     * 
    **/
    create<T extends artworkCollectionsCreateArgs>(
      args: SelectSubset<T, artworkCollectionsCreateArgs>
    ): Prisma__artworkCollectionsClient<artworkCollectionsGetPayload<T>>

    /**
     * Create many ArtworkCollections.
     *     @param {artworkCollectionsCreateManyArgs} args - Arguments to create many ArtworkCollections.
     *     @example
     *     // Create many ArtworkCollections
     *     const artworkCollections = await prisma.artworkCollections.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends artworkCollectionsCreateManyArgs>(
      args?: SelectSubset<T, artworkCollectionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ArtworkCollections.
     * @param {artworkCollectionsDeleteArgs} args - Arguments to delete one ArtworkCollections.
     * @example
     * // Delete one ArtworkCollections
     * const ArtworkCollections = await prisma.artworkCollections.delete({
     *   where: {
     *     // ... filter to delete one ArtworkCollections
     *   }
     * })
     * 
    **/
    delete<T extends artworkCollectionsDeleteArgs>(
      args: SelectSubset<T, artworkCollectionsDeleteArgs>
    ): Prisma__artworkCollectionsClient<artworkCollectionsGetPayload<T>>

    /**
     * Update one ArtworkCollections.
     * @param {artworkCollectionsUpdateArgs} args - Arguments to update one ArtworkCollections.
     * @example
     * // Update one ArtworkCollections
     * const artworkCollections = await prisma.artworkCollections.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends artworkCollectionsUpdateArgs>(
      args: SelectSubset<T, artworkCollectionsUpdateArgs>
    ): Prisma__artworkCollectionsClient<artworkCollectionsGetPayload<T>>

    /**
     * Delete zero or more ArtworkCollections.
     * @param {artworkCollectionsDeleteManyArgs} args - Arguments to filter ArtworkCollections to delete.
     * @example
     * // Delete a few ArtworkCollections
     * const { count } = await prisma.artworkCollections.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends artworkCollectionsDeleteManyArgs>(
      args?: SelectSubset<T, artworkCollectionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArtworkCollections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworkCollectionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArtworkCollections
     * const artworkCollections = await prisma.artworkCollections.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends artworkCollectionsUpdateManyArgs>(
      args: SelectSubset<T, artworkCollectionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ArtworkCollections.
     * @param {artworkCollectionsUpsertArgs} args - Arguments to update or create a ArtworkCollections.
     * @example
     * // Update or create a ArtworkCollections
     * const artworkCollections = await prisma.artworkCollections.upsert({
     *   create: {
     *     // ... data to create a ArtworkCollections
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArtworkCollections we want to update
     *   }
     * })
    **/
    upsert<T extends artworkCollectionsUpsertArgs>(
      args: SelectSubset<T, artworkCollectionsUpsertArgs>
    ): Prisma__artworkCollectionsClient<artworkCollectionsGetPayload<T>>

    /**
     * Find one ArtworkCollections that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {artworkCollectionsFindUniqueOrThrowArgs} args - Arguments to find a ArtworkCollections
     * @example
     * // Get one ArtworkCollections
     * const artworkCollections = await prisma.artworkCollections.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends artworkCollectionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, artworkCollectionsFindUniqueOrThrowArgs>
    ): Prisma__artworkCollectionsClient<artworkCollectionsGetPayload<T>>

    /**
     * Find the first ArtworkCollections that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworkCollectionsFindFirstOrThrowArgs} args - Arguments to find a ArtworkCollections
     * @example
     * // Get one ArtworkCollections
     * const artworkCollections = await prisma.artworkCollections.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends artworkCollectionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, artworkCollectionsFindFirstOrThrowArgs>
    ): Prisma__artworkCollectionsClient<artworkCollectionsGetPayload<T>>

    /**
     * Count the number of ArtworkCollections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artworkCollectionsCountArgs} args - Arguments to filter ArtworkCollections to count.
     * @example
     * // Count the number of ArtworkCollections
     * const count = await prisma.artworkCollections.count({
     *   where: {
     *     // ... the filter for the ArtworkCollections we want to count
     *   }
     * })
    **/
    count<T extends artworkCollectionsCountArgs>(
      args?: Subset<T, artworkCollectionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtworkCollectionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArtworkCollections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkCollectionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtworkCollectionsAggregateArgs>(args: Subset<T, ArtworkCollectionsAggregateArgs>): PrismaPromise<GetArtworkCollectionsAggregateType<T>>

    /**
     * Group by ArtworkCollections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkCollectionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtworkCollectionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtworkCollectionsGroupByArgs['orderBy'] }
        : { orderBy?: ArtworkCollectionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtworkCollectionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtworkCollectionsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for artworkCollections.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__artworkCollectionsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    collections<T extends collectionsArgs= {}>(args?: Subset<T, collectionsArgs>): Prisma__collectionsClient<collectionsGetPayload<T> | Null>;

    artworks<T extends artworksArgs= {}>(args?: Subset<T, artworksArgs>): Prisma__artworksClient<artworksGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * artworkCollections base type for findUnique actions
   */
  export type artworkCollectionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the artworkCollections
     * 
    **/
    select?: artworkCollectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworkCollectionsInclude | null
    /**
     * Filter, which artworkCollections to fetch.
     * 
    **/
    where: artworkCollectionsWhereUniqueInput
  }

  /**
   * artworkCollections: findUnique
   */
  export interface artworkCollectionsFindUniqueArgs extends artworkCollectionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworkCollections base type for findFirst actions
   */
  export type artworkCollectionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the artworkCollections
     * 
    **/
    select?: artworkCollectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworkCollectionsInclude | null
    /**
     * Filter, which artworkCollections to fetch.
     * 
    **/
    where?: artworkCollectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworkCollections to fetch.
     * 
    **/
    orderBy?: Enumerable<artworkCollectionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artworkCollections.
     * 
    **/
    cursor?: artworkCollectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworkCollections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworkCollections.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artworkCollections.
     * 
    **/
    distinct?: Enumerable<ArtworkCollectionsScalarFieldEnum>
  }

  /**
   * artworkCollections: findFirst
   */
  export interface artworkCollectionsFindFirstArgs extends artworkCollectionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * artworkCollections findMany
   */
  export type artworkCollectionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the artworkCollections
     * 
    **/
    select?: artworkCollectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworkCollectionsInclude | null
    /**
     * Filter, which artworkCollections to fetch.
     * 
    **/
    where?: artworkCollectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artworkCollections to fetch.
     * 
    **/
    orderBy?: Enumerable<artworkCollectionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing artworkCollections.
     * 
    **/
    cursor?: artworkCollectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artworkCollections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artworkCollections.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ArtworkCollectionsScalarFieldEnum>
  }


  /**
   * artworkCollections create
   */
  export type artworkCollectionsCreateArgs = {
    /**
     * Select specific fields to fetch from the artworkCollections
     * 
    **/
    select?: artworkCollectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworkCollectionsInclude | null
    /**
     * The data needed to create a artworkCollections.
     * 
    **/
    data: XOR<artworkCollectionsCreateInput, artworkCollectionsUncheckedCreateInput>
  }


  /**
   * artworkCollections createMany
   */
  export type artworkCollectionsCreateManyArgs = {
    /**
     * The data used to create many artworkCollections.
     * 
    **/
    data: Enumerable<artworkCollectionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * artworkCollections update
   */
  export type artworkCollectionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the artworkCollections
     * 
    **/
    select?: artworkCollectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworkCollectionsInclude | null
    /**
     * The data needed to update a artworkCollections.
     * 
    **/
    data: XOR<artworkCollectionsUpdateInput, artworkCollectionsUncheckedUpdateInput>
    /**
     * Choose, which artworkCollections to update.
     * 
    **/
    where: artworkCollectionsWhereUniqueInput
  }


  /**
   * artworkCollections updateMany
   */
  export type artworkCollectionsUpdateManyArgs = {
    /**
     * The data used to update artworkCollections.
     * 
    **/
    data: XOR<artworkCollectionsUpdateManyMutationInput, artworkCollectionsUncheckedUpdateManyInput>
    /**
     * Filter which artworkCollections to update
     * 
    **/
    where?: artworkCollectionsWhereInput
  }


  /**
   * artworkCollections upsert
   */
  export type artworkCollectionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the artworkCollections
     * 
    **/
    select?: artworkCollectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworkCollectionsInclude | null
    /**
     * The filter to search for the artworkCollections to update in case it exists.
     * 
    **/
    where: artworkCollectionsWhereUniqueInput
    /**
     * In case the artworkCollections found by the `where` argument doesn't exist, create a new artworkCollections with this data.
     * 
    **/
    create: XOR<artworkCollectionsCreateInput, artworkCollectionsUncheckedCreateInput>
    /**
     * In case the artworkCollections was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<artworkCollectionsUpdateInput, artworkCollectionsUncheckedUpdateInput>
  }


  /**
   * artworkCollections delete
   */
  export type artworkCollectionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the artworkCollections
     * 
    **/
    select?: artworkCollectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworkCollectionsInclude | null
    /**
     * Filter which artworkCollections to delete.
     * 
    **/
    where: artworkCollectionsWhereUniqueInput
  }


  /**
   * artworkCollections deleteMany
   */
  export type artworkCollectionsDeleteManyArgs = {
    /**
     * Filter which artworkCollections to delete
     * 
    **/
    where?: artworkCollectionsWhereInput
  }


  /**
   * artworkCollections: findUniqueOrThrow
   */
  export type artworkCollectionsFindUniqueOrThrowArgs = artworkCollectionsFindUniqueArgsBase
      

  /**
   * artworkCollections: findFirstOrThrow
   */
  export type artworkCollectionsFindFirstOrThrowArgs = artworkCollectionsFindFirstArgsBase
      

  /**
   * artworkCollections without action
   */
  export type artworkCollectionsArgs = {
    /**
     * Select specific fields to fetch from the artworkCollections
     * 
    **/
    select?: artworkCollectionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: artworkCollectionsInclude | null
  }



  /**
   * Model reports
   */


  export type AggregateReports = {
    _count: ReportsCountAggregateOutputType | null
    _avg: ReportsAvgAggregateOutputType | null
    _sum: ReportsSumAggregateOutputType | null
    _min: ReportsMinAggregateOutputType | null
    _max: ReportsMaxAggregateOutputType | null
  }

  export type ReportsAvgAggregateOutputType = {
    id: number | null
    reporterId: number | null
    userId: number | null
    artworkId: number | null
    commentId: number | null
  }

  export type ReportsSumAggregateOutputType = {
    id: number | null
    reporterId: number | null
    userId: number | null
    artworkId: number | null
    commentId: number | null
  }

  export type ReportsMinAggregateOutputType = {
    id: number | null
    reporterId: number | null
    description: string | null
    userId: number | null
    artworkId: number | null
    commentId: number | null
    createdDate: Date | null
  }

  export type ReportsMaxAggregateOutputType = {
    id: number | null
    reporterId: number | null
    description: string | null
    userId: number | null
    artworkId: number | null
    commentId: number | null
    createdDate: Date | null
  }

  export type ReportsCountAggregateOutputType = {
    id: number
    reporterId: number
    description: number
    userId: number
    artworkId: number
    commentId: number
    createdDate: number
    _all: number
  }


  export type ReportsAvgAggregateInputType = {
    id?: true
    reporterId?: true
    userId?: true
    artworkId?: true
    commentId?: true
  }

  export type ReportsSumAggregateInputType = {
    id?: true
    reporterId?: true
    userId?: true
    artworkId?: true
    commentId?: true
  }

  export type ReportsMinAggregateInputType = {
    id?: true
    reporterId?: true
    description?: true
    userId?: true
    artworkId?: true
    commentId?: true
    createdDate?: true
  }

  export type ReportsMaxAggregateInputType = {
    id?: true
    reporterId?: true
    description?: true
    userId?: true
    artworkId?: true
    commentId?: true
    createdDate?: true
  }

  export type ReportsCountAggregateInputType = {
    id?: true
    reporterId?: true
    description?: true
    userId?: true
    artworkId?: true
    commentId?: true
    createdDate?: true
    _all?: true
  }

  export type ReportsAggregateArgs = {
    /**
     * Filter which reports to aggregate.
     * 
    **/
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     * 
    **/
    orderBy?: Enumerable<reportsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reports
    **/
    _count?: true | ReportsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportsMaxAggregateInputType
  }

  export type GetReportsAggregateType<T extends ReportsAggregateArgs> = {
        [P in keyof T & keyof AggregateReports]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReports[P]>
      : GetScalarType<T[P], AggregateReports[P]>
  }




  export type ReportsGroupByArgs = {
    where?: reportsWhereInput
    orderBy?: Enumerable<reportsOrderByWithAggregationInput>
    by: Array<ReportsScalarFieldEnum>
    having?: reportsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportsCountAggregateInputType | true
    _avg?: ReportsAvgAggregateInputType
    _sum?: ReportsSumAggregateInputType
    _min?: ReportsMinAggregateInputType
    _max?: ReportsMaxAggregateInputType
  }


  export type ReportsGroupByOutputType = {
    id: number
    reporterId: number
    description: string
    userId: number | null
    artworkId: number | null
    commentId: number | null
    createdDate: Date | null
    _count: ReportsCountAggregateOutputType | null
    _avg: ReportsAvgAggregateOutputType | null
    _sum: ReportsSumAggregateOutputType | null
    _min: ReportsMinAggregateOutputType | null
    _max: ReportsMaxAggregateOutputType | null
  }

  type GetReportsGroupByPayload<T extends ReportsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReportsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportsGroupByOutputType[P]>
            : GetScalarType<T[P], ReportsGroupByOutputType[P]>
        }
      >
    >


  export type reportsSelect = {
    id?: boolean
    reporterId?: boolean
    description?: boolean
    userId?: boolean
    artworkId?: boolean
    commentId?: boolean
    createdDate?: boolean
    users_reports_reporterIdTousers?: boolean | usersArgs
    users_reports_userIdTousers?: boolean | usersArgs
    artworks?: boolean | artworksArgs
    comments?: boolean | commentsArgs
  }


  export type reportsInclude = {
    users_reports_reporterIdTousers?: boolean | usersArgs
    users_reports_userIdTousers?: boolean | usersArgs
    artworks?: boolean | artworksArgs
    comments?: boolean | commentsArgs
  } 

  export type reportsGetPayload<S extends boolean | null | undefined | reportsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? reports :
    S extends undefined ? never :
    S extends { include: any } & (reportsArgs | reportsFindManyArgs)
    ? reports  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users_reports_reporterIdTousers' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users_reports_userIdTousers' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'artworks' ? artworksGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'comments' ? commentsGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : S extends { select: any } & (reportsArgs | reportsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users_reports_reporterIdTousers' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users_reports_userIdTousers' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'artworks' ? artworksGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'comments' ? commentsGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof reports ? reports[P] : never
  } 
      : reports


  type reportsCountArgs = Merge<
    Omit<reportsFindManyArgs, 'select' | 'include'> & {
      select?: ReportsCountAggregateInputType | true
    }
  >

  export interface reportsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Reports that matches the filter.
     * @param {reportsFindUniqueArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends reportsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, reportsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'reports'> extends True ? Prisma__reportsClient<reportsGetPayload<T>> : Prisma__reportsClient<reportsGetPayload<T> | null, null>

    /**
     * Find the first Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsFindFirstArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends reportsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, reportsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'reports'> extends True ? Prisma__reportsClient<reportsGetPayload<T>> : Prisma__reportsClient<reportsGetPayload<T> | null, null>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.reports.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.reports.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportsWithIdOnly = await prisma.reports.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends reportsFindManyArgs>(
      args?: SelectSubset<T, reportsFindManyArgs>
    ): PrismaPromise<Array<reportsGetPayload<T>>>

    /**
     * Create a Reports.
     * @param {reportsCreateArgs} args - Arguments to create a Reports.
     * @example
     * // Create one Reports
     * const Reports = await prisma.reports.create({
     *   data: {
     *     // ... data to create a Reports
     *   }
     * })
     * 
    **/
    create<T extends reportsCreateArgs>(
      args: SelectSubset<T, reportsCreateArgs>
    ): Prisma__reportsClient<reportsGetPayload<T>>

    /**
     * Create many Reports.
     *     @param {reportsCreateManyArgs} args - Arguments to create many Reports.
     *     @example
     *     // Create many Reports
     *     const reports = await prisma.reports.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends reportsCreateManyArgs>(
      args?: SelectSubset<T, reportsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Reports.
     * @param {reportsDeleteArgs} args - Arguments to delete one Reports.
     * @example
     * // Delete one Reports
     * const Reports = await prisma.reports.delete({
     *   where: {
     *     // ... filter to delete one Reports
     *   }
     * })
     * 
    **/
    delete<T extends reportsDeleteArgs>(
      args: SelectSubset<T, reportsDeleteArgs>
    ): Prisma__reportsClient<reportsGetPayload<T>>

    /**
     * Update one Reports.
     * @param {reportsUpdateArgs} args - Arguments to update one Reports.
     * @example
     * // Update one Reports
     * const reports = await prisma.reports.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends reportsUpdateArgs>(
      args: SelectSubset<T, reportsUpdateArgs>
    ): Prisma__reportsClient<reportsGetPayload<T>>

    /**
     * Delete zero or more Reports.
     * @param {reportsDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.reports.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends reportsDeleteManyArgs>(
      args?: SelectSubset<T, reportsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const reports = await prisma.reports.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends reportsUpdateManyArgs>(
      args: SelectSubset<T, reportsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reports.
     * @param {reportsUpsertArgs} args - Arguments to update or create a Reports.
     * @example
     * // Update or create a Reports
     * const reports = await prisma.reports.upsert({
     *   create: {
     *     // ... data to create a Reports
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reports we want to update
     *   }
     * })
    **/
    upsert<T extends reportsUpsertArgs>(
      args: SelectSubset<T, reportsUpsertArgs>
    ): Prisma__reportsClient<reportsGetPayload<T>>

    /**
     * Find one Reports that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {reportsFindUniqueOrThrowArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends reportsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, reportsFindUniqueOrThrowArgs>
    ): Prisma__reportsClient<reportsGetPayload<T>>

    /**
     * Find the first Reports that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsFindFirstOrThrowArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends reportsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, reportsFindFirstOrThrowArgs>
    ): Prisma__reportsClient<reportsGetPayload<T>>

    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportsCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.reports.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends reportsCountArgs>(
      args?: Subset<T, reportsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportsAggregateArgs>(args: Subset<T, ReportsAggregateArgs>): PrismaPromise<GetReportsAggregateType<T>>

    /**
     * Group by Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportsGroupByArgs['orderBy'] }
        : { orderBy?: ReportsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for reports.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__reportsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users_reports_reporterIdTousers<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    users_reports_userIdTousers<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    artworks<T extends artworksArgs= {}>(args?: Subset<T, artworksArgs>): Prisma__artworksClient<artworksGetPayload<T> | Null>;

    comments<T extends commentsArgs= {}>(args?: Subset<T, commentsArgs>): Prisma__commentsClient<commentsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * reports base type for findUnique actions
   */
  export type reportsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the reports
     * 
    **/
    select?: reportsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reportsInclude | null
    /**
     * Filter, which reports to fetch.
     * 
    **/
    where: reportsWhereUniqueInput
  }

  /**
   * reports: findUnique
   */
  export interface reportsFindUniqueArgs extends reportsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * reports base type for findFirst actions
   */
  export type reportsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the reports
     * 
    **/
    select?: reportsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reportsInclude | null
    /**
     * Filter, which reports to fetch.
     * 
    **/
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     * 
    **/
    orderBy?: Enumerable<reportsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reports.
     * 
    **/
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reports.
     * 
    **/
    distinct?: Enumerable<ReportsScalarFieldEnum>
  }

  /**
   * reports: findFirst
   */
  export interface reportsFindFirstArgs extends reportsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * reports findMany
   */
  export type reportsFindManyArgs = {
    /**
     * Select specific fields to fetch from the reports
     * 
    **/
    select?: reportsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reportsInclude | null
    /**
     * Filter, which reports to fetch.
     * 
    **/
    where?: reportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reports to fetch.
     * 
    **/
    orderBy?: Enumerable<reportsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reports.
     * 
    **/
    cursor?: reportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reports.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReportsScalarFieldEnum>
  }


  /**
   * reports create
   */
  export type reportsCreateArgs = {
    /**
     * Select specific fields to fetch from the reports
     * 
    **/
    select?: reportsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reportsInclude | null
    /**
     * The data needed to create a reports.
     * 
    **/
    data: XOR<reportsCreateInput, reportsUncheckedCreateInput>
  }


  /**
   * reports createMany
   */
  export type reportsCreateManyArgs = {
    /**
     * The data used to create many reports.
     * 
    **/
    data: Enumerable<reportsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * reports update
   */
  export type reportsUpdateArgs = {
    /**
     * Select specific fields to fetch from the reports
     * 
    **/
    select?: reportsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reportsInclude | null
    /**
     * The data needed to update a reports.
     * 
    **/
    data: XOR<reportsUpdateInput, reportsUncheckedUpdateInput>
    /**
     * Choose, which reports to update.
     * 
    **/
    where: reportsWhereUniqueInput
  }


  /**
   * reports updateMany
   */
  export type reportsUpdateManyArgs = {
    /**
     * The data used to update reports.
     * 
    **/
    data: XOR<reportsUpdateManyMutationInput, reportsUncheckedUpdateManyInput>
    /**
     * Filter which reports to update
     * 
    **/
    where?: reportsWhereInput
  }


  /**
   * reports upsert
   */
  export type reportsUpsertArgs = {
    /**
     * Select specific fields to fetch from the reports
     * 
    **/
    select?: reportsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reportsInclude | null
    /**
     * The filter to search for the reports to update in case it exists.
     * 
    **/
    where: reportsWhereUniqueInput
    /**
     * In case the reports found by the `where` argument doesn't exist, create a new reports with this data.
     * 
    **/
    create: XOR<reportsCreateInput, reportsUncheckedCreateInput>
    /**
     * In case the reports was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<reportsUpdateInput, reportsUncheckedUpdateInput>
  }


  /**
   * reports delete
   */
  export type reportsDeleteArgs = {
    /**
     * Select specific fields to fetch from the reports
     * 
    **/
    select?: reportsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reportsInclude | null
    /**
     * Filter which reports to delete.
     * 
    **/
    where: reportsWhereUniqueInput
  }


  /**
   * reports deleteMany
   */
  export type reportsDeleteManyArgs = {
    /**
     * Filter which reports to delete
     * 
    **/
    where?: reportsWhereInput
  }


  /**
   * reports: findUniqueOrThrow
   */
  export type reportsFindUniqueOrThrowArgs = reportsFindUniqueArgsBase
      

  /**
   * reports: findFirstOrThrow
   */
  export type reportsFindFirstOrThrowArgs = reportsFindFirstArgsBase
      

  /**
   * reports without action
   */
  export type reportsArgs = {
    /**
     * Select specific fields to fetch from the reports
     * 
    **/
    select?: reportsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reportsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ArtworkCollectionsScalarFieldEnum: {
    id: 'id',
    collectionId: 'collectionId',
    artworkId: 'artworkId'
  };

  export type ArtworkCollectionsScalarFieldEnum = (typeof ArtworkCollectionsScalarFieldEnum)[keyof typeof ArtworkCollectionsScalarFieldEnum]


  export const ArtworksAddressesScalarFieldEnum: {
    id: 'id',
    artworkId: 'artworkId',
    address: 'address'
  };

  export type ArtworksAddressesScalarFieldEnum = (typeof ArtworksAddressesScalarFieldEnum)[keyof typeof ArtworksAddressesScalarFieldEnum]


  export const ArtworksCollaboratorsScalarFieldEnum: {
    id: 'id',
    artistId: 'artistId',
    artworkId: 'artworkId'
  };

  export type ArtworksCollaboratorsScalarFieldEnum = (typeof ArtworksCollaboratorsScalarFieldEnum)[keyof typeof ArtworksCollaboratorsScalarFieldEnum]


  export const ArtworksColorsScalarFieldEnum: {
    id: 'id',
    artworkId: 'artworkId',
    color: 'color'
  };

  export type ArtworksColorsScalarFieldEnum = (typeof ArtworksColorsScalarFieldEnum)[keyof typeof ArtworksColorsScalarFieldEnum]


  export const ArtworksMaterialsScalarFieldEnum: {
    id: 'id',
    artworkId: 'artworkId',
    material: 'material'
  };

  export type ArtworksMaterialsScalarFieldEnum = (typeof ArtworksMaterialsScalarFieldEnum)[keyof typeof ArtworksMaterialsScalarFieldEnum]


  export const ArtworksMovementsScalarFieldEnum: {
    id: 'id',
    artworkId: 'artworkId',
    movement: 'movement'
  };

  export type ArtworksMovementsScalarFieldEnum = (typeof ArtworksMovementsScalarFieldEnum)[keyof typeof ArtworksMovementsScalarFieldEnum]


  export const ArtworksScalarFieldEnum: {
    id: 'id',
    artistId: 'artistId',
    title: 'title',
    description: 'description',
    imageUrl: 'imageUrl',
    minWorkingHours: 'minWorkingHours',
    maxWorkingHours: 'maxWorkingHours',
    minPrice: 'minPrice',
    maxPrice: 'maxPrice',
    minHeight: 'minHeight',
    maxHeight: 'maxHeight',
    minWidth: 'minWidth',
    maxWidth: 'maxWidth',
    createdDate: 'createdDate',
    deletedDate: 'deletedDate',
    isDeleted: 'isDeleted'
  };

  export type ArtworksScalarFieldEnum = (typeof ArtworksScalarFieldEnum)[keyof typeof ArtworksScalarFieldEnum]


  export const ArtworksTagsScalarFieldEnum: {
    id: 'id',
    artworkId: 'artworkId',
    tag: 'tag'
  };

  export type ArtworksTagsScalarFieldEnum = (typeof ArtworksTagsScalarFieldEnum)[keyof typeof ArtworksTagsScalarFieldEnum]


  export const CollectionsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    imageUrl: 'imageUrl',
    createdDate: 'createdDate'
  };

  export type CollectionsScalarFieldEnum = (typeof CollectionsScalarFieldEnum)[keyof typeof CollectionsScalarFieldEnum]


  export const CommentsLikesScalarFieldEnum: {
    id: 'id',
    commentId: 'commentId',
    userId: 'userId',
    positive: 'positive'
  };

  export type CommentsLikesScalarFieldEnum = (typeof CommentsLikesScalarFieldEnum)[keyof typeof CommentsLikesScalarFieldEnum]


  export const CommentsScalarFieldEnum: {
    id: 'id',
    commentatorId: 'commentatorId',
    comment: 'comment',
    userId: 'userId',
    artworkId: 'artworkId',
    commentId: 'commentId',
    createdDate: 'createdDate'
  };

  export type CommentsScalarFieldEnum = (typeof CommentsScalarFieldEnum)[keyof typeof CommentsScalarFieldEnum]


  export const FavoritesArtworksScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    artworkId: 'artworkId',
    createdDate: 'createdDate'
  };

  export type FavoritesArtworksScalarFieldEnum = (typeof FavoritesArtworksScalarFieldEnum)[keyof typeof FavoritesArtworksScalarFieldEnum]


  export const FollowersScalarFieldEnum: {
    id: 'id',
    followerId: 'followerId',
    userId: 'userId',
    createdDate: 'createdDate'
  };

  export type FollowersScalarFieldEnum = (typeof FollowersScalarFieldEnum)[keyof typeof FollowersScalarFieldEnum]


  export const NotificationsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    typeId: 'typeId',
    title: 'title',
    content: 'content',
    link: 'link',
    createdDate: 'createdDate',
    viewed: 'viewed'
  };

  export type NotificationsScalarFieldEnum = (typeof NotificationsScalarFieldEnum)[keyof typeof NotificationsScalarFieldEnum]


  export const ReportsScalarFieldEnum: {
    id: 'id',
    reporterId: 'reporterId',
    description: 'description',
    userId: 'userId',
    artworkId: 'artworkId',
    commentId: 'commentId',
    createdDate: 'createdDate'
  };

  export type ReportsScalarFieldEnum = (typeof ReportsScalarFieldEnum)[keyof typeof ReportsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersRatingsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    qualifierId: 'qualifierId',
    rating: 'rating'
  };

  export type UsersRatingsScalarFieldEnum = (typeof UsersRatingsScalarFieldEnum)[keyof typeof UsersRatingsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    typeId: 'typeId',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    pass: 'pass',
    phone: 'phone',
    gender: 'gender',
    birthdate: 'birthdate',
    address: 'address',
    contact: 'contact',
    photoUrl: 'photoUrl',
    googleUid: 'googleUid',
    facebookUid: 'facebookUid',
    firebaseToken: 'firebaseToken',
    createdDate: 'createdDate',
    deletedDate: 'deletedDate',
    isDeleted: 'isDeleted'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    typeId?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    pass?: StringFilter | string
    phone?: StringNullableFilter | string | null
    gender?: StringNullableFilter | string | null
    birthdate?: DateTimeNullableFilter | Date | string | null
    address?: StringNullableFilter | string | null
    contact?: StringNullableFilter | string | null
    photoUrl?: StringNullableFilter | string | null
    googleUid?: StringNullableFilter | string | null
    facebookUid?: StringNullableFilter | string | null
    firebaseToken?: StringNullableFilter | string | null
    createdDate?: DateTimeNullableFilter | Date | string | null
    deletedDate?: DateTimeNullableFilter | Date | string | null
    isDeleted?: BoolNullableFilter | boolean | null
    artworks?: ArtworksListRelationFilter
    artworksCollaborators?: ArtworksCollaboratorsListRelationFilter
    collections?: CollectionsListRelationFilter
    comments_comments_commentatorIdTousers?: CommentsListRelationFilter
    comments_commentsTousers?: CommentsListRelationFilter
    commentsLikes?: CommentsLikesListRelationFilter
    favoritesArtworks?: FavoritesArtworksListRelationFilter
    followers?: FollowersListRelationFilter
    followers_followers_userIdTousers?: FollowersListRelationFilter
    notifications?: NotificationsListRelationFilter
    reports_reports_reporterIdTousers?: ReportsListRelationFilter
    reports_reports_userIdTousers?: ReportsListRelationFilter
    usersRatings_usersTousersRatings_userId?: UsersRatingsListRelationFilter
    usersRatings_usersTousersRatings_qualifierId?: UsersRatingsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    typeId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    pass?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    birthdate?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    photoUrl?: SortOrder
    googleUid?: SortOrder
    facebookUid?: SortOrder
    firebaseToken?: SortOrder
    createdDate?: SortOrder
    deletedDate?: SortOrder
    isDeleted?: SortOrder
    artworks?: artworksOrderByRelationAggregateInput
    artworksCollaborators?: artworksCollaboratorsOrderByRelationAggregateInput
    collections?: collectionsOrderByRelationAggregateInput
    comments_comments_commentatorIdTousers?: commentsOrderByRelationAggregateInput
    comments_commentsTousers?: commentsOrderByRelationAggregateInput
    commentsLikes?: commentsLikesOrderByRelationAggregateInput
    favoritesArtworks?: favoritesArtworksOrderByRelationAggregateInput
    followers?: followersOrderByRelationAggregateInput
    followers_followers_userIdTousers?: followersOrderByRelationAggregateInput
    notifications?: notificationsOrderByRelationAggregateInput
    reports_reports_reporterIdTousers?: reportsOrderByRelationAggregateInput
    reports_reports_userIdTousers?: reportsOrderByRelationAggregateInput
    usersRatings_usersTousersRatings_userId?: usersRatingsOrderByRelationAggregateInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    typeId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    pass?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    birthdate?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    photoUrl?: SortOrder
    googleUid?: SortOrder
    facebookUid?: SortOrder
    firebaseToken?: SortOrder
    createdDate?: SortOrder
    deletedDate?: SortOrder
    isDeleted?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    typeId?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    pass?: StringWithAggregatesFilter | string
    phone?: StringNullableWithAggregatesFilter | string | null
    gender?: StringNullableWithAggregatesFilter | string | null
    birthdate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    address?: StringNullableWithAggregatesFilter | string | null
    contact?: StringNullableWithAggregatesFilter | string | null
    photoUrl?: StringNullableWithAggregatesFilter | string | null
    googleUid?: StringNullableWithAggregatesFilter | string | null
    facebookUid?: StringNullableWithAggregatesFilter | string | null
    firebaseToken?: StringNullableWithAggregatesFilter | string | null
    createdDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    deletedDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    isDeleted?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type artworksWhereInput = {
    AND?: Enumerable<artworksWhereInput>
    OR?: Enumerable<artworksWhereInput>
    NOT?: Enumerable<artworksWhereInput>
    id?: IntFilter | number
    artistId?: IntFilter | number
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    imageUrl?: StringNullableFilter | string | null
    minWorkingHours?: IntNullableFilter | number | null
    maxWorkingHours?: IntNullableFilter | number | null
    minPrice?: FloatNullableFilter | number | null
    maxPrice?: FloatNullableFilter | number | null
    minHeight?: FloatNullableFilter | number | null
    maxHeight?: FloatNullableFilter | number | null
    minWidth?: FloatNullableFilter | number | null
    maxWidth?: FloatNullableFilter | number | null
    createdDate?: DateTimeNullableFilter | Date | string | null
    deletedDate?: DateTimeNullableFilter | Date | string | null
    isDeleted?: BoolNullableFilter | boolean | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
    artworkCollections?: ArtworkCollectionsListRelationFilter
    artworksAddresses?: ArtworksAddressesListRelationFilter
    artworksCollaborators?: ArtworksCollaboratorsListRelationFilter
    artworksColors?: ArtworksColorsListRelationFilter
    artworksMaterials?: ArtworksMaterialsListRelationFilter
    artworksMovements?: ArtworksMovementsListRelationFilter
    artworksTags?: ArtworksTagsListRelationFilter
    comments?: CommentsListRelationFilter
    favoritesArtworks?: FavoritesArtworksListRelationFilter
    reports?: ReportsListRelationFilter
  }

  export type artworksOrderByWithRelationInput = {
    id?: SortOrder
    artistId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    minWorkingHours?: SortOrder
    maxWorkingHours?: SortOrder
    minPrice?: SortOrder
    maxPrice?: SortOrder
    minHeight?: SortOrder
    maxHeight?: SortOrder
    minWidth?: SortOrder
    maxWidth?: SortOrder
    createdDate?: SortOrder
    deletedDate?: SortOrder
    isDeleted?: SortOrder
    users?: usersOrderByWithRelationInput
    artworkCollections?: artworkCollectionsOrderByRelationAggregateInput
    artworksAddresses?: artworksAddressesOrderByRelationAggregateInput
    artworksCollaborators?: artworksCollaboratorsOrderByRelationAggregateInput
    artworksColors?: artworksColorsOrderByRelationAggregateInput
    artworksMaterials?: artworksMaterialsOrderByRelationAggregateInput
    artworksMovements?: artworksMovementsOrderByRelationAggregateInput
    artworksTags?: artworksTagsOrderByRelationAggregateInput
    comments?: commentsOrderByRelationAggregateInput
    favoritesArtworks?: favoritesArtworksOrderByRelationAggregateInput
    reports?: reportsOrderByRelationAggregateInput
  }

  export type artworksWhereUniqueInput = {
    id?: number
  }

  export type artworksOrderByWithAggregationInput = {
    id?: SortOrder
    artistId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    minWorkingHours?: SortOrder
    maxWorkingHours?: SortOrder
    minPrice?: SortOrder
    maxPrice?: SortOrder
    minHeight?: SortOrder
    maxHeight?: SortOrder
    minWidth?: SortOrder
    maxWidth?: SortOrder
    createdDate?: SortOrder
    deletedDate?: SortOrder
    isDeleted?: SortOrder
    _count?: artworksCountOrderByAggregateInput
    _avg?: artworksAvgOrderByAggregateInput
    _max?: artworksMaxOrderByAggregateInput
    _min?: artworksMinOrderByAggregateInput
    _sum?: artworksSumOrderByAggregateInput
  }

  export type artworksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<artworksScalarWhereWithAggregatesInput>
    OR?: Enumerable<artworksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<artworksScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    artistId?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    imageUrl?: StringNullableWithAggregatesFilter | string | null
    minWorkingHours?: IntNullableWithAggregatesFilter | number | null
    maxWorkingHours?: IntNullableWithAggregatesFilter | number | null
    minPrice?: FloatNullableWithAggregatesFilter | number | null
    maxPrice?: FloatNullableWithAggregatesFilter | number | null
    minHeight?: FloatNullableWithAggregatesFilter | number | null
    maxHeight?: FloatNullableWithAggregatesFilter | number | null
    minWidth?: FloatNullableWithAggregatesFilter | number | null
    maxWidth?: FloatNullableWithAggregatesFilter | number | null
    createdDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    deletedDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    isDeleted?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type commentsWhereInput = {
    AND?: Enumerable<commentsWhereInput>
    OR?: Enumerable<commentsWhereInput>
    NOT?: Enumerable<commentsWhereInput>
    id?: IntFilter | number
    commentatorId?: IntFilter | number
    comment?: StringFilter | string
    userId?: IntNullableFilter | number | null
    artworkId?: IntNullableFilter | number | null
    commentId?: IntNullableFilter | number | null
    createdDate?: DateTimeNullableFilter | Date | string | null
    users_comments_commentatorIdTousers?: XOR<UsersRelationFilter, usersWhereInput>
    users_commentsTousers?: XOR<UsersRelationFilter, usersWhereInput> | null
    artworks?: XOR<ArtworksRelationFilter, artworksWhereInput> | null
    comments?: XOR<CommentsRelationFilter, commentsWhereInput> | null
    other_comments?: CommentsListRelationFilter
    commentsLikes?: CommentsLikesListRelationFilter
    reports?: ReportsListRelationFilter
  }

  export type commentsOrderByWithRelationInput = {
    id?: SortOrder
    commentatorId?: SortOrder
    comment?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    commentId?: SortOrder
    createdDate?: SortOrder
    users_comments_commentatorIdTousers?: usersOrderByWithRelationInput
    users_commentsTousers?: usersOrderByWithRelationInput
    artworks?: artworksOrderByWithRelationInput
    comments?: commentsOrderByWithRelationInput
    other_comments?: commentsOrderByRelationAggregateInput
    commentsLikes?: commentsLikesOrderByRelationAggregateInput
    reports?: reportsOrderByRelationAggregateInput
  }

  export type commentsWhereUniqueInput = {
    id?: number
  }

  export type commentsOrderByWithAggregationInput = {
    id?: SortOrder
    commentatorId?: SortOrder
    comment?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    commentId?: SortOrder
    createdDate?: SortOrder
    _count?: commentsCountOrderByAggregateInput
    _avg?: commentsAvgOrderByAggregateInput
    _max?: commentsMaxOrderByAggregateInput
    _min?: commentsMinOrderByAggregateInput
    _sum?: commentsSumOrderByAggregateInput
  }

  export type commentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<commentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<commentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<commentsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    commentatorId?: IntWithAggregatesFilter | number
    comment?: StringWithAggregatesFilter | string
    userId?: IntNullableWithAggregatesFilter | number | null
    artworkId?: IntNullableWithAggregatesFilter | number | null
    commentId?: IntNullableWithAggregatesFilter | number | null
    createdDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type favoritesArtworksWhereInput = {
    AND?: Enumerable<favoritesArtworksWhereInput>
    OR?: Enumerable<favoritesArtworksWhereInput>
    NOT?: Enumerable<favoritesArtworksWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    artworkId?: IntFilter | number
    createdDate?: DateTimeNullableFilter | Date | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
    artworks?: XOR<ArtworksRelationFilter, artworksWhereInput>
  }

  export type favoritesArtworksOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    createdDate?: SortOrder
    users?: usersOrderByWithRelationInput
    artworks?: artworksOrderByWithRelationInput
  }

  export type favoritesArtworksWhereUniqueInput = {
    id?: number
  }

  export type favoritesArtworksOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    createdDate?: SortOrder
    _count?: favoritesArtworksCountOrderByAggregateInput
    _avg?: favoritesArtworksAvgOrderByAggregateInput
    _max?: favoritesArtworksMaxOrderByAggregateInput
    _min?: favoritesArtworksMinOrderByAggregateInput
    _sum?: favoritesArtworksSumOrderByAggregateInput
  }

  export type favoritesArtworksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<favoritesArtworksScalarWhereWithAggregatesInput>
    OR?: Enumerable<favoritesArtworksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<favoritesArtworksScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    artworkId?: IntWithAggregatesFilter | number
    createdDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type followersWhereInput = {
    AND?: Enumerable<followersWhereInput>
    OR?: Enumerable<followersWhereInput>
    NOT?: Enumerable<followersWhereInput>
    id?: IntFilter | number
    followerId?: IntFilter | number
    userId?: IntFilter | number
    createdDate?: DateTimeNullableFilter | Date | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
    users_followers_userIdTousers?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type followersOrderByWithRelationInput = {
    id?: SortOrder
    followerId?: SortOrder
    userId?: SortOrder
    createdDate?: SortOrder
    users?: usersOrderByWithRelationInput
    users_followers_userIdTousers?: usersOrderByWithRelationInput
  }

  export type followersWhereUniqueInput = {
    id?: number
  }

  export type followersOrderByWithAggregationInput = {
    id?: SortOrder
    followerId?: SortOrder
    userId?: SortOrder
    createdDate?: SortOrder
    _count?: followersCountOrderByAggregateInput
    _avg?: followersAvgOrderByAggregateInput
    _max?: followersMaxOrderByAggregateInput
    _min?: followersMinOrderByAggregateInput
    _sum?: followersSumOrderByAggregateInput
  }

  export type followersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<followersScalarWhereWithAggregatesInput>
    OR?: Enumerable<followersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<followersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    followerId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    createdDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type collectionsWhereInput = {
    AND?: Enumerable<collectionsWhereInput>
    OR?: Enumerable<collectionsWhereInput>
    NOT?: Enumerable<collectionsWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    name?: StringFilter | string
    imageUrl?: StringNullableFilter | string | null
    createdDate?: DateTimeNullableFilter | Date | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
    artworkCollections?: ArtworkCollectionsListRelationFilter
  }

  export type collectionsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    createdDate?: SortOrder
    users?: usersOrderByWithRelationInput
    artworkCollections?: artworkCollectionsOrderByRelationAggregateInput
  }

  export type collectionsWhereUniqueInput = {
    id?: number
  }

  export type collectionsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    createdDate?: SortOrder
    _count?: collectionsCountOrderByAggregateInput
    _avg?: collectionsAvgOrderByAggregateInput
    _max?: collectionsMaxOrderByAggregateInput
    _min?: collectionsMinOrderByAggregateInput
    _sum?: collectionsSumOrderByAggregateInput
  }

  export type collectionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<collectionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<collectionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<collectionsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    imageUrl?: StringNullableWithAggregatesFilter | string | null
    createdDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type commentsLikesWhereInput = {
    AND?: Enumerable<commentsLikesWhereInput>
    OR?: Enumerable<commentsLikesWhereInput>
    NOT?: Enumerable<commentsLikesWhereInput>
    id?: IntFilter | number
    commentId?: IntFilter | number
    userId?: IntFilter | number
    positive?: BoolNullableFilter | boolean | null
    comments?: XOR<CommentsRelationFilter, commentsWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type commentsLikesOrderByWithRelationInput = {
    id?: SortOrder
    commentId?: SortOrder
    userId?: SortOrder
    positive?: SortOrder
    comments?: commentsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type commentsLikesWhereUniqueInput = {
    id?: number
  }

  export type commentsLikesOrderByWithAggregationInput = {
    id?: SortOrder
    commentId?: SortOrder
    userId?: SortOrder
    positive?: SortOrder
    _count?: commentsLikesCountOrderByAggregateInput
    _avg?: commentsLikesAvgOrderByAggregateInput
    _max?: commentsLikesMaxOrderByAggregateInput
    _min?: commentsLikesMinOrderByAggregateInput
    _sum?: commentsLikesSumOrderByAggregateInput
  }

  export type commentsLikesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<commentsLikesScalarWhereWithAggregatesInput>
    OR?: Enumerable<commentsLikesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<commentsLikesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    commentId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    positive?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type artworksAddressesWhereInput = {
    AND?: Enumerable<artworksAddressesWhereInput>
    OR?: Enumerable<artworksAddressesWhereInput>
    NOT?: Enumerable<artworksAddressesWhereInput>
    id?: IntFilter | number
    artworkId?: IntFilter | number
    address?: StringNullableFilter | string | null
    artworks?: XOR<ArtworksRelationFilter, artworksWhereInput>
  }

  export type artworksAddressesOrderByWithRelationInput = {
    id?: SortOrder
    artworkId?: SortOrder
    address?: SortOrder
    artworks?: artworksOrderByWithRelationInput
  }

  export type artworksAddressesWhereUniqueInput = {
    id?: number
  }

  export type artworksAddressesOrderByWithAggregationInput = {
    id?: SortOrder
    artworkId?: SortOrder
    address?: SortOrder
    _count?: artworksAddressesCountOrderByAggregateInput
    _avg?: artworksAddressesAvgOrderByAggregateInput
    _max?: artworksAddressesMaxOrderByAggregateInput
    _min?: artworksAddressesMinOrderByAggregateInput
    _sum?: artworksAddressesSumOrderByAggregateInput
  }

  export type artworksAddressesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<artworksAddressesScalarWhereWithAggregatesInput>
    OR?: Enumerable<artworksAddressesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<artworksAddressesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    artworkId?: IntWithAggregatesFilter | number
    address?: StringNullableWithAggregatesFilter | string | null
  }

  export type artworksCollaboratorsWhereInput = {
    AND?: Enumerable<artworksCollaboratorsWhereInput>
    OR?: Enumerable<artworksCollaboratorsWhereInput>
    NOT?: Enumerable<artworksCollaboratorsWhereInput>
    id?: IntFilter | number
    artistId?: IntFilter | number
    artworkId?: IntFilter | number
    artworks?: XOR<ArtworksRelationFilter, artworksWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type artworksCollaboratorsOrderByWithRelationInput = {
    id?: SortOrder
    artistId?: SortOrder
    artworkId?: SortOrder
    artworks?: artworksOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type artworksCollaboratorsWhereUniqueInput = {
    id?: number
  }

  export type artworksCollaboratorsOrderByWithAggregationInput = {
    id?: SortOrder
    artistId?: SortOrder
    artworkId?: SortOrder
    _count?: artworksCollaboratorsCountOrderByAggregateInput
    _avg?: artworksCollaboratorsAvgOrderByAggregateInput
    _max?: artworksCollaboratorsMaxOrderByAggregateInput
    _min?: artworksCollaboratorsMinOrderByAggregateInput
    _sum?: artworksCollaboratorsSumOrderByAggregateInput
  }

  export type artworksCollaboratorsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<artworksCollaboratorsScalarWhereWithAggregatesInput>
    OR?: Enumerable<artworksCollaboratorsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<artworksCollaboratorsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    artistId?: IntWithAggregatesFilter | number
    artworkId?: IntWithAggregatesFilter | number
  }

  export type artworksColorsWhereInput = {
    AND?: Enumerable<artworksColorsWhereInput>
    OR?: Enumerable<artworksColorsWhereInput>
    NOT?: Enumerable<artworksColorsWhereInput>
    id?: IntFilter | number
    artworkId?: IntFilter | number
    color?: StringFilter | string
    artworks?: XOR<ArtworksRelationFilter, artworksWhereInput>
  }

  export type artworksColorsOrderByWithRelationInput = {
    id?: SortOrder
    artworkId?: SortOrder
    color?: SortOrder
    artworks?: artworksOrderByWithRelationInput
  }

  export type artworksColorsWhereUniqueInput = {
    id?: number
  }

  export type artworksColorsOrderByWithAggregationInput = {
    id?: SortOrder
    artworkId?: SortOrder
    color?: SortOrder
    _count?: artworksColorsCountOrderByAggregateInput
    _avg?: artworksColorsAvgOrderByAggregateInput
    _max?: artworksColorsMaxOrderByAggregateInput
    _min?: artworksColorsMinOrderByAggregateInput
    _sum?: artworksColorsSumOrderByAggregateInput
  }

  export type artworksColorsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<artworksColorsScalarWhereWithAggregatesInput>
    OR?: Enumerable<artworksColorsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<artworksColorsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    artworkId?: IntWithAggregatesFilter | number
    color?: StringWithAggregatesFilter | string
  }

  export type artworksMaterialsWhereInput = {
    AND?: Enumerable<artworksMaterialsWhereInput>
    OR?: Enumerable<artworksMaterialsWhereInput>
    NOT?: Enumerable<artworksMaterialsWhereInput>
    id?: IntFilter | number
    artworkId?: IntFilter | number
    material?: StringFilter | string
    artworks?: XOR<ArtworksRelationFilter, artworksWhereInput>
  }

  export type artworksMaterialsOrderByWithRelationInput = {
    id?: SortOrder
    artworkId?: SortOrder
    material?: SortOrder
    artworks?: artworksOrderByWithRelationInput
  }

  export type artworksMaterialsWhereUniqueInput = {
    id?: number
  }

  export type artworksMaterialsOrderByWithAggregationInput = {
    id?: SortOrder
    artworkId?: SortOrder
    material?: SortOrder
    _count?: artworksMaterialsCountOrderByAggregateInput
    _avg?: artworksMaterialsAvgOrderByAggregateInput
    _max?: artworksMaterialsMaxOrderByAggregateInput
    _min?: artworksMaterialsMinOrderByAggregateInput
    _sum?: artworksMaterialsSumOrderByAggregateInput
  }

  export type artworksMaterialsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<artworksMaterialsScalarWhereWithAggregatesInput>
    OR?: Enumerable<artworksMaterialsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<artworksMaterialsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    artworkId?: IntWithAggregatesFilter | number
    material?: StringWithAggregatesFilter | string
  }

  export type artworksMovementsWhereInput = {
    AND?: Enumerable<artworksMovementsWhereInput>
    OR?: Enumerable<artworksMovementsWhereInput>
    NOT?: Enumerable<artworksMovementsWhereInput>
    id?: IntFilter | number
    artworkId?: IntFilter | number
    movement?: StringFilter | string
    artworks?: XOR<ArtworksRelationFilter, artworksWhereInput>
  }

  export type artworksMovementsOrderByWithRelationInput = {
    id?: SortOrder
    artworkId?: SortOrder
    movement?: SortOrder
    artworks?: artworksOrderByWithRelationInput
  }

  export type artworksMovementsWhereUniqueInput = {
    id?: number
  }

  export type artworksMovementsOrderByWithAggregationInput = {
    id?: SortOrder
    artworkId?: SortOrder
    movement?: SortOrder
    _count?: artworksMovementsCountOrderByAggregateInput
    _avg?: artworksMovementsAvgOrderByAggregateInput
    _max?: artworksMovementsMaxOrderByAggregateInput
    _min?: artworksMovementsMinOrderByAggregateInput
    _sum?: artworksMovementsSumOrderByAggregateInput
  }

  export type artworksMovementsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<artworksMovementsScalarWhereWithAggregatesInput>
    OR?: Enumerable<artworksMovementsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<artworksMovementsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    artworkId?: IntWithAggregatesFilter | number
    movement?: StringWithAggregatesFilter | string
  }

  export type artworksTagsWhereInput = {
    AND?: Enumerable<artworksTagsWhereInput>
    OR?: Enumerable<artworksTagsWhereInput>
    NOT?: Enumerable<artworksTagsWhereInput>
    id?: IntFilter | number
    artworkId?: IntFilter | number
    tag?: StringNullableFilter | string | null
    artworks?: XOR<ArtworksRelationFilter, artworksWhereInput>
  }

  export type artworksTagsOrderByWithRelationInput = {
    id?: SortOrder
    artworkId?: SortOrder
    tag?: SortOrder
    artworks?: artworksOrderByWithRelationInput
  }

  export type artworksTagsWhereUniqueInput = {
    id?: number
  }

  export type artworksTagsOrderByWithAggregationInput = {
    id?: SortOrder
    artworkId?: SortOrder
    tag?: SortOrder
    _count?: artworksTagsCountOrderByAggregateInput
    _avg?: artworksTagsAvgOrderByAggregateInput
    _max?: artworksTagsMaxOrderByAggregateInput
    _min?: artworksTagsMinOrderByAggregateInput
    _sum?: artworksTagsSumOrderByAggregateInput
  }

  export type artworksTagsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<artworksTagsScalarWhereWithAggregatesInput>
    OR?: Enumerable<artworksTagsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<artworksTagsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    artworkId?: IntWithAggregatesFilter | number
    tag?: StringNullableWithAggregatesFilter | string | null
  }

  export type notificationsWhereInput = {
    AND?: Enumerable<notificationsWhereInput>
    OR?: Enumerable<notificationsWhereInput>
    NOT?: Enumerable<notificationsWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    typeId?: IntFilter | number
    title?: StringNullableFilter | string | null
    content?: StringNullableFilter | string | null
    link?: StringNullableFilter | string | null
    createdDate?: DateTimeNullableFilter | Date | string | null
    viewed?: BoolNullableFilter | boolean | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type notificationsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    typeId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    link?: SortOrder
    createdDate?: SortOrder
    viewed?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type notificationsWhereUniqueInput = {
    id?: number
  }

  export type notificationsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    typeId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    link?: SortOrder
    createdDate?: SortOrder
    viewed?: SortOrder
    _count?: notificationsCountOrderByAggregateInput
    _avg?: notificationsAvgOrderByAggregateInput
    _max?: notificationsMaxOrderByAggregateInput
    _min?: notificationsMinOrderByAggregateInput
    _sum?: notificationsSumOrderByAggregateInput
  }

  export type notificationsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<notificationsScalarWhereWithAggregatesInput>
    OR?: Enumerable<notificationsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<notificationsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    typeId?: IntWithAggregatesFilter | number
    title?: StringNullableWithAggregatesFilter | string | null
    content?: StringNullableWithAggregatesFilter | string | null
    link?: StringNullableWithAggregatesFilter | string | null
    createdDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    viewed?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type usersRatingsWhereInput = {
    AND?: Enumerable<usersRatingsWhereInput>
    OR?: Enumerable<usersRatingsWhereInput>
    NOT?: Enumerable<usersRatingsWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    qualifierId?: IntFilter | number
    rating?: IntNullableFilter | number | null
    users_usersTousersRatings_userId?: XOR<UsersRelationFilter, usersWhereInput>
    users_usersTousersRatings_qualifierId?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type usersRatingsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    qualifierId?: SortOrder
    rating?: SortOrder
    users_usersTousersRatings_userId?: usersOrderByWithRelationInput
    users_usersTousersRatings_qualifierId?: usersOrderByWithRelationInput
  }

  export type usersRatingsWhereUniqueInput = {
    id?: number
  }

  export type usersRatingsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    qualifierId?: SortOrder
    rating?: SortOrder
    _count?: usersRatingsCountOrderByAggregateInput
    _avg?: usersRatingsAvgOrderByAggregateInput
    _max?: usersRatingsMaxOrderByAggregateInput
    _min?: usersRatingsMinOrderByAggregateInput
    _sum?: usersRatingsSumOrderByAggregateInput
  }

  export type usersRatingsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersRatingsScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersRatingsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersRatingsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    qualifierId?: IntWithAggregatesFilter | number
    rating?: IntNullableWithAggregatesFilter | number | null
  }

  export type artworkCollectionsWhereInput = {
    AND?: Enumerable<artworkCollectionsWhereInput>
    OR?: Enumerable<artworkCollectionsWhereInput>
    NOT?: Enumerable<artworkCollectionsWhereInput>
    id?: IntFilter | number
    collectionId?: IntFilter | number
    artworkId?: IntFilter | number
    collections?: XOR<CollectionsRelationFilter, collectionsWhereInput>
    artworks?: XOR<ArtworksRelationFilter, artworksWhereInput>
  }

  export type artworkCollectionsOrderByWithRelationInput = {
    id?: SortOrder
    collectionId?: SortOrder
    artworkId?: SortOrder
    collections?: collectionsOrderByWithRelationInput
    artworks?: artworksOrderByWithRelationInput
  }

  export type artworkCollectionsWhereUniqueInput = {
    id?: number
  }

  export type artworkCollectionsOrderByWithAggregationInput = {
    id?: SortOrder
    collectionId?: SortOrder
    artworkId?: SortOrder
    _count?: artworkCollectionsCountOrderByAggregateInput
    _avg?: artworkCollectionsAvgOrderByAggregateInput
    _max?: artworkCollectionsMaxOrderByAggregateInput
    _min?: artworkCollectionsMinOrderByAggregateInput
    _sum?: artworkCollectionsSumOrderByAggregateInput
  }

  export type artworkCollectionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<artworkCollectionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<artworkCollectionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<artworkCollectionsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    collectionId?: IntWithAggregatesFilter | number
    artworkId?: IntWithAggregatesFilter | number
  }

  export type reportsWhereInput = {
    AND?: Enumerable<reportsWhereInput>
    OR?: Enumerable<reportsWhereInput>
    NOT?: Enumerable<reportsWhereInput>
    id?: IntFilter | number
    reporterId?: IntFilter | number
    description?: StringFilter | string
    userId?: IntNullableFilter | number | null
    artworkId?: IntNullableFilter | number | null
    commentId?: IntNullableFilter | number | null
    createdDate?: DateTimeNullableFilter | Date | string | null
    users_reports_reporterIdTousers?: XOR<UsersRelationFilter, usersWhereInput>
    users_reports_userIdTousers?: XOR<UsersRelationFilter, usersWhereInput> | null
    artworks?: XOR<ArtworksRelationFilter, artworksWhereInput> | null
    comments?: XOR<CommentsRelationFilter, commentsWhereInput> | null
  }

  export type reportsOrderByWithRelationInput = {
    id?: SortOrder
    reporterId?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    commentId?: SortOrder
    createdDate?: SortOrder
    users_reports_reporterIdTousers?: usersOrderByWithRelationInput
    users_reports_userIdTousers?: usersOrderByWithRelationInput
    artworks?: artworksOrderByWithRelationInput
    comments?: commentsOrderByWithRelationInput
  }

  export type reportsWhereUniqueInput = {
    id?: number
  }

  export type reportsOrderByWithAggregationInput = {
    id?: SortOrder
    reporterId?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    commentId?: SortOrder
    createdDate?: SortOrder
    _count?: reportsCountOrderByAggregateInput
    _avg?: reportsAvgOrderByAggregateInput
    _max?: reportsMaxOrderByAggregateInput
    _min?: reportsMinOrderByAggregateInput
    _sum?: reportsSumOrderByAggregateInput
  }

  export type reportsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<reportsScalarWhereWithAggregatesInput>
    OR?: Enumerable<reportsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<reportsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    reporterId?: IntWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
    userId?: IntNullableWithAggregatesFilter | number | null
    artworkId?: IntNullableWithAggregatesFilter | number | null
    commentId?: IntNullableWithAggregatesFilter | number | null
    createdDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type usersCreateInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutUsersInput
    collections?: collectionsCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers?: followersCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput
    collections?: collectionsUncheckedCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers?: followersUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUpdateInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutUsersNestedInput
    collections?: collectionsUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersNestedInput
    followers?: followersUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput
    collections?: collectionsUncheckedUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput
    followers?: followersUncheckedUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
  }

  export type usersUpdateManyMutationInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type artworksCreateInput = {
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    users: usersCreateNestedOneWithoutArtworksInput
    artworkCollections?: artworkCollectionsCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsCreateNestedManyWithoutArtworksInput
    comments?: commentsCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutArtworksInput
    reports?: reportsCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateInput = {
    id?: number
    artistId: number
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworkCollections?: artworkCollectionsUncheckedCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesUncheckedCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsUncheckedCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsUncheckedCreateNestedManyWithoutArtworksInput
    comments?: commentsUncheckedCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput
    reports?: reportsUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: usersUpdateOneRequiredWithoutArtworksNestedInput
    artworkCollections?: artworkCollectionsUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUpdateManyWithoutArtworksNestedInput
    comments?: commentsUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutArtworksNestedInput
    reports?: reportsUpdateManyWithoutArtworksNestedInput
  }

  export type artworksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworkCollections?: artworkCollectionsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUncheckedUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUncheckedUpdateManyWithoutArtworksNestedInput
    comments?: commentsUncheckedUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutArtworksNestedInput
    reports?: reportsUncheckedUpdateManyWithoutArtworksNestedInput
  }

  export type artworksCreateManyInput = {
    id?: number
    artistId: number
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
  }

  export type artworksUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type artworksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type commentsCreateInput = {
    comment: string
    createdDate?: Date | string | null
    users_comments_commentatorIdTousers: usersCreateNestedOneWithoutComments_comments_commentatorIdTousersInput
    users_commentsTousers?: usersCreateNestedOneWithoutComments_commentsTousersInput
    artworks?: artworksCreateNestedOneWithoutCommentsInput
    comments?: commentsCreateNestedOneWithoutOther_commentsInput
    other_comments?: commentsCreateNestedManyWithoutCommentsInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutCommentsInput
    reports?: reportsCreateNestedManyWithoutCommentsInput
  }

  export type commentsUncheckedCreateInput = {
    id?: number
    commentatorId: number
    comment: string
    userId?: number | null
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
    other_comments?: commentsUncheckedCreateNestedManyWithoutCommentsInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutCommentsInput
    reports?: reportsUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type commentsUpdateInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_comments_commentatorIdTousers?: usersUpdateOneRequiredWithoutComments_comments_commentatorIdTousersNestedInput
    users_commentsTousers?: usersUpdateOneWithoutComments_commentsTousersNestedInput
    artworks?: artworksUpdateOneWithoutCommentsNestedInput
    comments?: commentsUpdateOneWithoutOther_commentsNestedInput
    other_comments?: commentsUpdateManyWithoutCommentsNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutCommentsNestedInput
    reports?: reportsUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentatorId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    other_comments?: commentsUncheckedUpdateManyWithoutCommentsNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutCommentsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type commentsCreateManyInput = {
    id?: number
    commentatorId: number
    comment: string
    userId?: number | null
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
  }

  export type commentsUpdateManyMutationInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentatorId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type favoritesArtworksCreateInput = {
    createdDate?: Date | string | null
    users: usersCreateNestedOneWithoutFavoritesArtworksInput
    artworks: artworksCreateNestedOneWithoutFavoritesArtworksInput
  }

  export type favoritesArtworksUncheckedCreateInput = {
    id?: number
    userId: number
    artworkId: number
    createdDate?: Date | string | null
  }

  export type favoritesArtworksUpdateInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutFavoritesArtworksNestedInput
    artworks?: artworksUpdateOneRequiredWithoutFavoritesArtworksNestedInput
  }

  export type favoritesArtworksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type favoritesArtworksCreateManyInput = {
    id?: number
    userId: number
    artworkId: number
    createdDate?: Date | string | null
  }

  export type favoritesArtworksUpdateManyMutationInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type favoritesArtworksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followersCreateInput = {
    createdDate?: Date | string | null
    users: usersCreateNestedOneWithoutFollowersInput
    users_followers_userIdTousers: usersCreateNestedOneWithoutFollowers_followers_userIdTousersInput
  }

  export type followersUncheckedCreateInput = {
    id?: number
    followerId: number
    userId: number
    createdDate?: Date | string | null
  }

  export type followersUpdateInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutFollowersNestedInput
    users_followers_userIdTousers?: usersUpdateOneRequiredWithoutFollowers_followers_userIdTousersNestedInput
  }

  export type followersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    followerId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followersCreateManyInput = {
    id?: number
    followerId: number
    userId: number
    createdDate?: Date | string | null
  }

  export type followersUpdateManyMutationInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    followerId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type collectionsCreateInput = {
    name: string
    imageUrl?: string | null
    createdDate?: Date | string | null
    users: usersCreateNestedOneWithoutCollectionsInput
    artworkCollections?: artworkCollectionsCreateNestedManyWithoutCollectionsInput
  }

  export type collectionsUncheckedCreateInput = {
    id?: number
    userId: number
    name: string
    imageUrl?: string | null
    createdDate?: Date | string | null
    artworkCollections?: artworkCollectionsUncheckedCreateNestedManyWithoutCollectionsInput
  }

  export type collectionsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutCollectionsNestedInput
    artworkCollections?: artworkCollectionsUpdateManyWithoutCollectionsNestedInput
  }

  export type collectionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    artworkCollections?: artworkCollectionsUncheckedUpdateManyWithoutCollectionsNestedInput
  }

  export type collectionsCreateManyInput = {
    id?: number
    userId: number
    name: string
    imageUrl?: string | null
    createdDate?: Date | string | null
  }

  export type collectionsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type collectionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentsLikesCreateInput = {
    positive?: boolean | null
    comments: commentsCreateNestedOneWithoutCommentsLikesInput
    users: usersCreateNestedOneWithoutCommentsLikesInput
  }

  export type commentsLikesUncheckedCreateInput = {
    id?: number
    commentId: number
    userId: number
    positive?: boolean | null
  }

  export type commentsLikesUpdateInput = {
    positive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: commentsUpdateOneRequiredWithoutCommentsLikesNestedInput
    users?: usersUpdateOneRequiredWithoutCommentsLikesNestedInput
  }

  export type commentsLikesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    positive?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type commentsLikesCreateManyInput = {
    id?: number
    commentId: number
    userId: number
    positive?: boolean | null
  }

  export type commentsLikesUpdateManyMutationInput = {
    positive?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type commentsLikesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    positive?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type artworksAddressesCreateInput = {
    address?: string | null
    artworks: artworksCreateNestedOneWithoutArtworksAddressesInput
  }

  export type artworksAddressesUncheckedCreateInput = {
    id?: number
    artworkId: number
    address?: string | null
  }

  export type artworksAddressesUpdateInput = {
    address?: NullableStringFieldUpdateOperationsInput | string | null
    artworks?: artworksUpdateOneRequiredWithoutArtworksAddressesNestedInput
  }

  export type artworksAddressesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type artworksAddressesCreateManyInput = {
    id?: number
    artworkId: number
    address?: string | null
  }

  export type artworksAddressesUpdateManyMutationInput = {
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type artworksAddressesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type artworksCollaboratorsCreateInput = {
    artworks: artworksCreateNestedOneWithoutArtworksCollaboratorsInput
    users: usersCreateNestedOneWithoutArtworksCollaboratorsInput
  }

  export type artworksCollaboratorsUncheckedCreateInput = {
    id?: number
    artistId: number
    artworkId: number
  }

  export type artworksCollaboratorsUpdateInput = {
    artworks?: artworksUpdateOneRequiredWithoutArtworksCollaboratorsNestedInput
    users?: usersUpdateOneRequiredWithoutArtworksCollaboratorsNestedInput
  }

  export type artworksCollaboratorsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
  }

  export type artworksCollaboratorsCreateManyInput = {
    id?: number
    artistId: number
    artworkId: number
  }

  export type artworksCollaboratorsUpdateManyMutationInput = {

  }

  export type artworksCollaboratorsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
  }

  export type artworksColorsCreateInput = {
    color: string
    artworks: artworksCreateNestedOneWithoutArtworksColorsInput
  }

  export type artworksColorsUncheckedCreateInput = {
    id?: number
    artworkId: number
    color: string
  }

  export type artworksColorsUpdateInput = {
    color?: StringFieldUpdateOperationsInput | string
    artworks?: artworksUpdateOneRequiredWithoutArtworksColorsNestedInput
  }

  export type artworksColorsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type artworksColorsCreateManyInput = {
    id?: number
    artworkId: number
    color: string
  }

  export type artworksColorsUpdateManyMutationInput = {
    color?: StringFieldUpdateOperationsInput | string
  }

  export type artworksColorsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type artworksMaterialsCreateInput = {
    material: string
    artworks: artworksCreateNestedOneWithoutArtworksMaterialsInput
  }

  export type artworksMaterialsUncheckedCreateInput = {
    id?: number
    artworkId: number
    material: string
  }

  export type artworksMaterialsUpdateInput = {
    material?: StringFieldUpdateOperationsInput | string
    artworks?: artworksUpdateOneRequiredWithoutArtworksMaterialsNestedInput
  }

  export type artworksMaterialsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    material?: StringFieldUpdateOperationsInput | string
  }

  export type artworksMaterialsCreateManyInput = {
    id?: number
    artworkId: number
    material: string
  }

  export type artworksMaterialsUpdateManyMutationInput = {
    material?: StringFieldUpdateOperationsInput | string
  }

  export type artworksMaterialsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    material?: StringFieldUpdateOperationsInput | string
  }

  export type artworksMovementsCreateInput = {
    movement: string
    artworks: artworksCreateNestedOneWithoutArtworksMovementsInput
  }

  export type artworksMovementsUncheckedCreateInput = {
    id?: number
    artworkId: number
    movement: string
  }

  export type artworksMovementsUpdateInput = {
    movement?: StringFieldUpdateOperationsInput | string
    artworks?: artworksUpdateOneRequiredWithoutArtworksMovementsNestedInput
  }

  export type artworksMovementsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    movement?: StringFieldUpdateOperationsInput | string
  }

  export type artworksMovementsCreateManyInput = {
    id?: number
    artworkId: number
    movement: string
  }

  export type artworksMovementsUpdateManyMutationInput = {
    movement?: StringFieldUpdateOperationsInput | string
  }

  export type artworksMovementsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    movement?: StringFieldUpdateOperationsInput | string
  }

  export type artworksTagsCreateInput = {
    tag?: string | null
    artworks: artworksCreateNestedOneWithoutArtworksTagsInput
  }

  export type artworksTagsUncheckedCreateInput = {
    id?: number
    artworkId: number
    tag?: string | null
  }

  export type artworksTagsUpdateInput = {
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    artworks?: artworksUpdateOneRequiredWithoutArtworksTagsNestedInput
  }

  export type artworksTagsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    tag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type artworksTagsCreateManyInput = {
    id?: number
    artworkId: number
    tag?: string | null
  }

  export type artworksTagsUpdateManyMutationInput = {
    tag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type artworksTagsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    tag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type notificationsCreateInput = {
    typeId: number
    title?: string | null
    content?: string | null
    link?: string | null
    createdDate?: Date | string | null
    viewed?: boolean | null
    users: usersCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateInput = {
    id?: number
    userId: number
    typeId: number
    title?: string | null
    content?: string | null
    link?: string | null
    createdDate?: Date | string | null
    viewed?: boolean | null
  }

  export type notificationsUpdateInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: usersUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewed?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type notificationsCreateManyInput = {
    id?: number
    userId: number
    typeId: number
    title?: string | null
    content?: string | null
    link?: string | null
    createdDate?: Date | string | null
    viewed?: boolean | null
  }

  export type notificationsUpdateManyMutationInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewed?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type notificationsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewed?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type usersRatingsCreateInput = {
    rating?: number | null
    users_usersTousersRatings_userId: usersCreateNestedOneWithoutUsersRatings_usersTousersRatings_userIdInput
    users_usersTousersRatings_qualifierId: usersCreateNestedOneWithoutUsersRatings_usersTousersRatings_qualifierIdInput
  }

  export type usersRatingsUncheckedCreateInput = {
    id?: number
    userId: number
    qualifierId: number
    rating?: number | null
  }

  export type usersRatingsUpdateInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    users_usersTousersRatings_userId?: usersUpdateOneRequiredWithoutUsersRatings_usersTousersRatings_userIdNestedInput
    users_usersTousersRatings_qualifierId?: usersUpdateOneRequiredWithoutUsersRatings_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersRatingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    qualifierId?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersRatingsCreateManyInput = {
    id?: number
    userId: number
    qualifierId: number
    rating?: number | null
  }

  export type usersRatingsUpdateManyMutationInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersRatingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    qualifierId?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type artworkCollectionsCreateInput = {
    collections: collectionsCreateNestedOneWithoutArtworkCollectionsInput
    artworks: artworksCreateNestedOneWithoutArtworkCollectionsInput
  }

  export type artworkCollectionsUncheckedCreateInput = {
    id?: number
    collectionId: number
    artworkId: number
  }

  export type artworkCollectionsUpdateInput = {
    collections?: collectionsUpdateOneRequiredWithoutArtworkCollectionsNestedInput
    artworks?: artworksUpdateOneRequiredWithoutArtworkCollectionsNestedInput
  }

  export type artworkCollectionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    collectionId?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
  }

  export type artworkCollectionsCreateManyInput = {
    id?: number
    collectionId: number
    artworkId: number
  }

  export type artworkCollectionsUpdateManyMutationInput = {

  }

  export type artworkCollectionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    collectionId?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
  }

  export type reportsCreateInput = {
    description: string
    createdDate?: Date | string | null
    users_reports_reporterIdTousers: usersCreateNestedOneWithoutReports_reports_reporterIdTousersInput
    users_reports_userIdTousers?: usersCreateNestedOneWithoutReports_reports_userIdTousersInput
    artworks?: artworksCreateNestedOneWithoutReportsInput
    comments?: commentsCreateNestedOneWithoutReportsInput
  }

  export type reportsUncheckedCreateInput = {
    id?: number
    reporterId: number
    description: string
    userId?: number | null
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
  }

  export type reportsUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_reports_reporterIdTousers?: usersUpdateOneRequiredWithoutReports_reports_reporterIdTousersNestedInput
    users_reports_userIdTousers?: usersUpdateOneWithoutReports_reports_userIdTousersNestedInput
    artworks?: artworksUpdateOneWithoutReportsNestedInput
    comments?: commentsUpdateOneWithoutReportsNestedInput
  }

  export type reportsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsCreateManyInput = {
    id?: number
    reporterId: number
    description: string
    userId?: number | null
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
  }

  export type reportsUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type ArtworksListRelationFilter = {
    every?: artworksWhereInput
    some?: artworksWhereInput
    none?: artworksWhereInput
  }

  export type ArtworksCollaboratorsListRelationFilter = {
    every?: artworksCollaboratorsWhereInput
    some?: artworksCollaboratorsWhereInput
    none?: artworksCollaboratorsWhereInput
  }

  export type CollectionsListRelationFilter = {
    every?: collectionsWhereInput
    some?: collectionsWhereInput
    none?: collectionsWhereInput
  }

  export type CommentsListRelationFilter = {
    every?: commentsWhereInput
    some?: commentsWhereInput
    none?: commentsWhereInput
  }

  export type CommentsLikesListRelationFilter = {
    every?: commentsLikesWhereInput
    some?: commentsLikesWhereInput
    none?: commentsLikesWhereInput
  }

  export type FavoritesArtworksListRelationFilter = {
    every?: favoritesArtworksWhereInput
    some?: favoritesArtworksWhereInput
    none?: favoritesArtworksWhereInput
  }

  export type FollowersListRelationFilter = {
    every?: followersWhereInput
    some?: followersWhereInput
    none?: followersWhereInput
  }

  export type NotificationsListRelationFilter = {
    every?: notificationsWhereInput
    some?: notificationsWhereInput
    none?: notificationsWhereInput
  }

  export type ReportsListRelationFilter = {
    every?: reportsWhereInput
    some?: reportsWhereInput
    none?: reportsWhereInput
  }

  export type UsersRatingsListRelationFilter = {
    every?: usersRatingsWhereInput
    some?: usersRatingsWhereInput
    none?: usersRatingsWhereInput
  }

  export type artworksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type artworksCollaboratorsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type collectionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type commentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type commentsLikesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type favoritesArtworksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type followersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type notificationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reportsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersRatingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    pass?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    birthdate?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    photoUrl?: SortOrder
    googleUid?: SortOrder
    facebookUid?: SortOrder
    firebaseToken?: SortOrder
    createdDate?: SortOrder
    deletedDate?: SortOrder
    isDeleted?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    pass?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    birthdate?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    photoUrl?: SortOrder
    googleUid?: SortOrder
    facebookUid?: SortOrder
    firebaseToken?: SortOrder
    createdDate?: SortOrder
    deletedDate?: SortOrder
    isDeleted?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    pass?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    birthdate?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    photoUrl?: SortOrder
    googleUid?: SortOrder
    facebookUid?: SortOrder
    firebaseToken?: SortOrder
    createdDate?: SortOrder
    deletedDate?: SortOrder
    isDeleted?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type ArtworkCollectionsListRelationFilter = {
    every?: artworkCollectionsWhereInput
    some?: artworkCollectionsWhereInput
    none?: artworkCollectionsWhereInput
  }

  export type ArtworksAddressesListRelationFilter = {
    every?: artworksAddressesWhereInput
    some?: artworksAddressesWhereInput
    none?: artworksAddressesWhereInput
  }

  export type ArtworksColorsListRelationFilter = {
    every?: artworksColorsWhereInput
    some?: artworksColorsWhereInput
    none?: artworksColorsWhereInput
  }

  export type ArtworksMaterialsListRelationFilter = {
    every?: artworksMaterialsWhereInput
    some?: artworksMaterialsWhereInput
    none?: artworksMaterialsWhereInput
  }

  export type ArtworksMovementsListRelationFilter = {
    every?: artworksMovementsWhereInput
    some?: artworksMovementsWhereInput
    none?: artworksMovementsWhereInput
  }

  export type ArtworksTagsListRelationFilter = {
    every?: artworksTagsWhereInput
    some?: artworksTagsWhereInput
    none?: artworksTagsWhereInput
  }

  export type artworkCollectionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type artworksAddressesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type artworksColorsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type artworksMaterialsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type artworksMovementsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type artworksTagsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type artworksCountOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    minWorkingHours?: SortOrder
    maxWorkingHours?: SortOrder
    minPrice?: SortOrder
    maxPrice?: SortOrder
    minHeight?: SortOrder
    maxHeight?: SortOrder
    minWidth?: SortOrder
    maxWidth?: SortOrder
    createdDate?: SortOrder
    deletedDate?: SortOrder
    isDeleted?: SortOrder
  }

  export type artworksAvgOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    minWorkingHours?: SortOrder
    maxWorkingHours?: SortOrder
    minPrice?: SortOrder
    maxPrice?: SortOrder
    minHeight?: SortOrder
    maxHeight?: SortOrder
    minWidth?: SortOrder
    maxWidth?: SortOrder
  }

  export type artworksMaxOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    minWorkingHours?: SortOrder
    maxWorkingHours?: SortOrder
    minPrice?: SortOrder
    maxPrice?: SortOrder
    minHeight?: SortOrder
    maxHeight?: SortOrder
    minWidth?: SortOrder
    maxWidth?: SortOrder
    createdDate?: SortOrder
    deletedDate?: SortOrder
    isDeleted?: SortOrder
  }

  export type artworksMinOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    minWorkingHours?: SortOrder
    maxWorkingHours?: SortOrder
    minPrice?: SortOrder
    maxPrice?: SortOrder
    minHeight?: SortOrder
    maxHeight?: SortOrder
    minWidth?: SortOrder
    maxWidth?: SortOrder
    createdDate?: SortOrder
    deletedDate?: SortOrder
    isDeleted?: SortOrder
  }

  export type artworksSumOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    minWorkingHours?: SortOrder
    maxWorkingHours?: SortOrder
    minPrice?: SortOrder
    maxPrice?: SortOrder
    minHeight?: SortOrder
    maxHeight?: SortOrder
    minWidth?: SortOrder
    maxWidth?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type ArtworksRelationFilter = {
    is?: artworksWhereInput
    isNot?: artworksWhereInput
  }

  export type CommentsRelationFilter = {
    is?: commentsWhereInput | null
    isNot?: commentsWhereInput | null
  }

  export type commentsCountOrderByAggregateInput = {
    id?: SortOrder
    commentatorId?: SortOrder
    comment?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    commentId?: SortOrder
    createdDate?: SortOrder
  }

  export type commentsAvgOrderByAggregateInput = {
    id?: SortOrder
    commentatorId?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    commentId?: SortOrder
  }

  export type commentsMaxOrderByAggregateInput = {
    id?: SortOrder
    commentatorId?: SortOrder
    comment?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    commentId?: SortOrder
    createdDate?: SortOrder
  }

  export type commentsMinOrderByAggregateInput = {
    id?: SortOrder
    commentatorId?: SortOrder
    comment?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    commentId?: SortOrder
    createdDate?: SortOrder
  }

  export type commentsSumOrderByAggregateInput = {
    id?: SortOrder
    commentatorId?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    commentId?: SortOrder
  }

  export type favoritesArtworksCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    createdDate?: SortOrder
  }

  export type favoritesArtworksAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
  }

  export type favoritesArtworksMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    createdDate?: SortOrder
  }

  export type favoritesArtworksMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    createdDate?: SortOrder
  }

  export type favoritesArtworksSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
  }

  export type followersCountOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    userId?: SortOrder
    createdDate?: SortOrder
  }

  export type followersAvgOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    userId?: SortOrder
  }

  export type followersMaxOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    userId?: SortOrder
    createdDate?: SortOrder
  }

  export type followersMinOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    userId?: SortOrder
    createdDate?: SortOrder
  }

  export type followersSumOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    userId?: SortOrder
  }

  export type collectionsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    createdDate?: SortOrder
  }

  export type collectionsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type collectionsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    createdDate?: SortOrder
  }

  export type collectionsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    createdDate?: SortOrder
  }

  export type collectionsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type commentsLikesCountOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    userId?: SortOrder
    positive?: SortOrder
  }

  export type commentsLikesAvgOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    userId?: SortOrder
  }

  export type commentsLikesMaxOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    userId?: SortOrder
    positive?: SortOrder
  }

  export type commentsLikesMinOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    userId?: SortOrder
    positive?: SortOrder
  }

  export type commentsLikesSumOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    userId?: SortOrder
  }

  export type artworksAddressesCountOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    address?: SortOrder
  }

  export type artworksAddressesAvgOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
  }

  export type artworksAddressesMaxOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    address?: SortOrder
  }

  export type artworksAddressesMinOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    address?: SortOrder
  }

  export type artworksAddressesSumOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
  }

  export type artworksCollaboratorsCountOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    artworkId?: SortOrder
  }

  export type artworksCollaboratorsAvgOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    artworkId?: SortOrder
  }

  export type artworksCollaboratorsMaxOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    artworkId?: SortOrder
  }

  export type artworksCollaboratorsMinOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    artworkId?: SortOrder
  }

  export type artworksCollaboratorsSumOrderByAggregateInput = {
    id?: SortOrder
    artistId?: SortOrder
    artworkId?: SortOrder
  }

  export type artworksColorsCountOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    color?: SortOrder
  }

  export type artworksColorsAvgOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
  }

  export type artworksColorsMaxOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    color?: SortOrder
  }

  export type artworksColorsMinOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    color?: SortOrder
  }

  export type artworksColorsSumOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
  }

  export type artworksMaterialsCountOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    material?: SortOrder
  }

  export type artworksMaterialsAvgOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
  }

  export type artworksMaterialsMaxOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    material?: SortOrder
  }

  export type artworksMaterialsMinOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    material?: SortOrder
  }

  export type artworksMaterialsSumOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
  }

  export type artworksMovementsCountOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    movement?: SortOrder
  }

  export type artworksMovementsAvgOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
  }

  export type artworksMovementsMaxOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    movement?: SortOrder
  }

  export type artworksMovementsMinOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    movement?: SortOrder
  }

  export type artworksMovementsSumOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
  }

  export type artworksTagsCountOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    tag?: SortOrder
  }

  export type artworksTagsAvgOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
  }

  export type artworksTagsMaxOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    tag?: SortOrder
  }

  export type artworksTagsMinOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
    tag?: SortOrder
  }

  export type artworksTagsSumOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
  }

  export type notificationsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    typeId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    link?: SortOrder
    createdDate?: SortOrder
    viewed?: SortOrder
  }

  export type notificationsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    typeId?: SortOrder
  }

  export type notificationsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    typeId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    link?: SortOrder
    createdDate?: SortOrder
    viewed?: SortOrder
  }

  export type notificationsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    typeId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    link?: SortOrder
    createdDate?: SortOrder
    viewed?: SortOrder
  }

  export type notificationsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    typeId?: SortOrder
  }

  export type usersRatingsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    qualifierId?: SortOrder
    rating?: SortOrder
  }

  export type usersRatingsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    qualifierId?: SortOrder
    rating?: SortOrder
  }

  export type usersRatingsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    qualifierId?: SortOrder
    rating?: SortOrder
  }

  export type usersRatingsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    qualifierId?: SortOrder
    rating?: SortOrder
  }

  export type usersRatingsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    qualifierId?: SortOrder
    rating?: SortOrder
  }

  export type CollectionsRelationFilter = {
    is?: collectionsWhereInput
    isNot?: collectionsWhereInput
  }

  export type artworkCollectionsCountOrderByAggregateInput = {
    id?: SortOrder
    collectionId?: SortOrder
    artworkId?: SortOrder
  }

  export type artworkCollectionsAvgOrderByAggregateInput = {
    id?: SortOrder
    collectionId?: SortOrder
    artworkId?: SortOrder
  }

  export type artworkCollectionsMaxOrderByAggregateInput = {
    id?: SortOrder
    collectionId?: SortOrder
    artworkId?: SortOrder
  }

  export type artworkCollectionsMinOrderByAggregateInput = {
    id?: SortOrder
    collectionId?: SortOrder
    artworkId?: SortOrder
  }

  export type artworkCollectionsSumOrderByAggregateInput = {
    id?: SortOrder
    collectionId?: SortOrder
    artworkId?: SortOrder
  }

  export type reportsCountOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    commentId?: SortOrder
    createdDate?: SortOrder
  }

  export type reportsAvgOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    commentId?: SortOrder
  }

  export type reportsMaxOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    commentId?: SortOrder
    createdDate?: SortOrder
  }

  export type reportsMinOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    commentId?: SortOrder
    createdDate?: SortOrder
  }

  export type reportsSumOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    userId?: SortOrder
    artworkId?: SortOrder
    commentId?: SortOrder
  }

  export type artworksCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<artworksCreateWithoutUsersInput>, Enumerable<artworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<artworksCreateOrConnectWithoutUsersInput>
    createMany?: artworksCreateManyUsersInputEnvelope
    connect?: Enumerable<artworksWhereUniqueInput>
  }

  export type artworksCollaboratorsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<artworksCollaboratorsCreateWithoutUsersInput>, Enumerable<artworksCollaboratorsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<artworksCollaboratorsCreateOrConnectWithoutUsersInput>
    createMany?: artworksCollaboratorsCreateManyUsersInputEnvelope
    connect?: Enumerable<artworksCollaboratorsWhereUniqueInput>
  }

  export type collectionsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<collectionsCreateWithoutUsersInput>, Enumerable<collectionsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<collectionsCreateOrConnectWithoutUsersInput>
    createMany?: collectionsCreateManyUsersInputEnvelope
    connect?: Enumerable<collectionsWhereUniqueInput>
  }

  export type commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput = {
    create?: XOR<Enumerable<commentsCreateWithoutUsers_comments_commentatorIdTousersInput>, Enumerable<commentsUncheckedCreateWithoutUsers_comments_commentatorIdTousersInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutUsers_comments_commentatorIdTousersInput>
    createMany?: commentsCreateManyUsers_comments_commentatorIdTousersInputEnvelope
    connect?: Enumerable<commentsWhereUniqueInput>
  }

  export type commentsCreateNestedManyWithoutUsers_commentsTousersInput = {
    create?: XOR<Enumerable<commentsCreateWithoutUsers_commentsTousersInput>, Enumerable<commentsUncheckedCreateWithoutUsers_commentsTousersInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutUsers_commentsTousersInput>
    createMany?: commentsCreateManyUsers_commentsTousersInputEnvelope
    connect?: Enumerable<commentsWhereUniqueInput>
  }

  export type commentsLikesCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<commentsLikesCreateWithoutUsersInput>, Enumerable<commentsLikesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<commentsLikesCreateOrConnectWithoutUsersInput>
    createMany?: commentsLikesCreateManyUsersInputEnvelope
    connect?: Enumerable<commentsLikesWhereUniqueInput>
  }

  export type favoritesArtworksCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutUsersInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutUsersInput>
    createMany?: favoritesArtworksCreateManyUsersInputEnvelope
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
  }

  export type followersCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsersInput>, Enumerable<followersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsersInput>
    createMany?: followersCreateManyUsersInputEnvelope
    connect?: Enumerable<followersWhereUniqueInput>
  }

  export type followersCreateNestedManyWithoutUsers_followers_userIdTousersInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsers_followers_userIdTousersInput>, Enumerable<followersUncheckedCreateWithoutUsers_followers_userIdTousersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsers_followers_userIdTousersInput>
    createMany?: followersCreateManyUsers_followers_userIdTousersInputEnvelope
    connect?: Enumerable<followersWhereUniqueInput>
  }

  export type notificationsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<notificationsCreateWithoutUsersInput>, Enumerable<notificationsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<notificationsCreateOrConnectWithoutUsersInput>
    createMany?: notificationsCreateManyUsersInputEnvelope
    connect?: Enumerable<notificationsWhereUniqueInput>
  }

  export type reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput = {
    create?: XOR<Enumerable<reportsCreateWithoutUsers_reports_reporterIdTousersInput>, Enumerable<reportsUncheckedCreateWithoutUsers_reports_reporterIdTousersInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutUsers_reports_reporterIdTousersInput>
    createMany?: reportsCreateManyUsers_reports_reporterIdTousersInputEnvelope
    connect?: Enumerable<reportsWhereUniqueInput>
  }

  export type reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput = {
    create?: XOR<Enumerable<reportsCreateWithoutUsers_reports_userIdTousersInput>, Enumerable<reportsUncheckedCreateWithoutUsers_reports_userIdTousersInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutUsers_reports_userIdTousersInput>
    createMany?: reportsCreateManyUsers_reports_userIdTousersInputEnvelope
    connect?: Enumerable<reportsWhereUniqueInput>
  }

  export type usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput = {
    create?: XOR<Enumerable<usersRatingsCreateWithoutUsers_usersTousersRatings_userIdInput>, Enumerable<usersRatingsUncheckedCreateWithoutUsers_usersTousersRatings_userIdInput>>
    connectOrCreate?: Enumerable<usersRatingsCreateOrConnectWithoutUsers_usersTousersRatings_userIdInput>
    createMany?: usersRatingsCreateManyUsers_usersTousersRatings_userIdInputEnvelope
    connect?: Enumerable<usersRatingsWhereUniqueInput>
  }

  export type usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput = {
    create?: XOR<Enumerable<usersRatingsCreateWithoutUsers_usersTousersRatings_qualifierIdInput>, Enumerable<usersRatingsUncheckedCreateWithoutUsers_usersTousersRatings_qualifierIdInput>>
    connectOrCreate?: Enumerable<usersRatingsCreateOrConnectWithoutUsers_usersTousersRatings_qualifierIdInput>
    createMany?: usersRatingsCreateManyUsers_usersTousersRatings_qualifierIdInputEnvelope
    connect?: Enumerable<usersRatingsWhereUniqueInput>
  }

  export type artworksUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<artworksCreateWithoutUsersInput>, Enumerable<artworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<artworksCreateOrConnectWithoutUsersInput>
    createMany?: artworksCreateManyUsersInputEnvelope
    connect?: Enumerable<artworksWhereUniqueInput>
  }

  export type artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<artworksCollaboratorsCreateWithoutUsersInput>, Enumerable<artworksCollaboratorsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<artworksCollaboratorsCreateOrConnectWithoutUsersInput>
    createMany?: artworksCollaboratorsCreateManyUsersInputEnvelope
    connect?: Enumerable<artworksCollaboratorsWhereUniqueInput>
  }

  export type collectionsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<collectionsCreateWithoutUsersInput>, Enumerable<collectionsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<collectionsCreateOrConnectWithoutUsersInput>
    createMany?: collectionsCreateManyUsersInputEnvelope
    connect?: Enumerable<collectionsWhereUniqueInput>
  }

  export type commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput = {
    create?: XOR<Enumerable<commentsCreateWithoutUsers_comments_commentatorIdTousersInput>, Enumerable<commentsUncheckedCreateWithoutUsers_comments_commentatorIdTousersInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutUsers_comments_commentatorIdTousersInput>
    createMany?: commentsCreateManyUsers_comments_commentatorIdTousersInputEnvelope
    connect?: Enumerable<commentsWhereUniqueInput>
  }

  export type commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput = {
    create?: XOR<Enumerable<commentsCreateWithoutUsers_commentsTousersInput>, Enumerable<commentsUncheckedCreateWithoutUsers_commentsTousersInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutUsers_commentsTousersInput>
    createMany?: commentsCreateManyUsers_commentsTousersInputEnvelope
    connect?: Enumerable<commentsWhereUniqueInput>
  }

  export type commentsLikesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<commentsLikesCreateWithoutUsersInput>, Enumerable<commentsLikesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<commentsLikesCreateOrConnectWithoutUsersInput>
    createMany?: commentsLikesCreateManyUsersInputEnvelope
    connect?: Enumerable<commentsLikesWhereUniqueInput>
  }

  export type favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutUsersInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutUsersInput>
    createMany?: favoritesArtworksCreateManyUsersInputEnvelope
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
  }

  export type followersUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsersInput>, Enumerable<followersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsersInput>
    createMany?: followersCreateManyUsersInputEnvelope
    connect?: Enumerable<followersWhereUniqueInput>
  }

  export type followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsers_followers_userIdTousersInput>, Enumerable<followersUncheckedCreateWithoutUsers_followers_userIdTousersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsers_followers_userIdTousersInput>
    createMany?: followersCreateManyUsers_followers_userIdTousersInputEnvelope
    connect?: Enumerable<followersWhereUniqueInput>
  }

  export type notificationsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<notificationsCreateWithoutUsersInput>, Enumerable<notificationsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<notificationsCreateOrConnectWithoutUsersInput>
    createMany?: notificationsCreateManyUsersInputEnvelope
    connect?: Enumerable<notificationsWhereUniqueInput>
  }

  export type reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput = {
    create?: XOR<Enumerable<reportsCreateWithoutUsers_reports_reporterIdTousersInput>, Enumerable<reportsUncheckedCreateWithoutUsers_reports_reporterIdTousersInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutUsers_reports_reporterIdTousersInput>
    createMany?: reportsCreateManyUsers_reports_reporterIdTousersInputEnvelope
    connect?: Enumerable<reportsWhereUniqueInput>
  }

  export type reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput = {
    create?: XOR<Enumerable<reportsCreateWithoutUsers_reports_userIdTousersInput>, Enumerable<reportsUncheckedCreateWithoutUsers_reports_userIdTousersInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutUsers_reports_userIdTousersInput>
    createMany?: reportsCreateManyUsers_reports_userIdTousersInputEnvelope
    connect?: Enumerable<reportsWhereUniqueInput>
  }

  export type usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput = {
    create?: XOR<Enumerable<usersRatingsCreateWithoutUsers_usersTousersRatings_userIdInput>, Enumerable<usersRatingsUncheckedCreateWithoutUsers_usersTousersRatings_userIdInput>>
    connectOrCreate?: Enumerable<usersRatingsCreateOrConnectWithoutUsers_usersTousersRatings_userIdInput>
    createMany?: usersRatingsCreateManyUsers_usersTousersRatings_userIdInputEnvelope
    connect?: Enumerable<usersRatingsWhereUniqueInput>
  }

  export type usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput = {
    create?: XOR<Enumerable<usersRatingsCreateWithoutUsers_usersTousersRatings_qualifierIdInput>, Enumerable<usersRatingsUncheckedCreateWithoutUsers_usersTousersRatings_qualifierIdInput>>
    connectOrCreate?: Enumerable<usersRatingsCreateOrConnectWithoutUsers_usersTousersRatings_qualifierIdInput>
    createMany?: usersRatingsCreateManyUsers_usersTousersRatings_qualifierIdInputEnvelope
    connect?: Enumerable<usersRatingsWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type artworksUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<artworksCreateWithoutUsersInput>, Enumerable<artworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<artworksCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<artworksUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: artworksCreateManyUsersInputEnvelope
    set?: Enumerable<artworksWhereUniqueInput>
    disconnect?: Enumerable<artworksWhereUniqueInput>
    delete?: Enumerable<artworksWhereUniqueInput>
    connect?: Enumerable<artworksWhereUniqueInput>
    update?: Enumerable<artworksUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<artworksUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<artworksScalarWhereInput>
  }

  export type artworksCollaboratorsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<artworksCollaboratorsCreateWithoutUsersInput>, Enumerable<artworksCollaboratorsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<artworksCollaboratorsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<artworksCollaboratorsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: artworksCollaboratorsCreateManyUsersInputEnvelope
    set?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    disconnect?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    delete?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    connect?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    update?: Enumerable<artworksCollaboratorsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<artworksCollaboratorsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<artworksCollaboratorsScalarWhereInput>
  }

  export type collectionsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<collectionsCreateWithoutUsersInput>, Enumerable<collectionsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<collectionsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<collectionsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: collectionsCreateManyUsersInputEnvelope
    set?: Enumerable<collectionsWhereUniqueInput>
    disconnect?: Enumerable<collectionsWhereUniqueInput>
    delete?: Enumerable<collectionsWhereUniqueInput>
    connect?: Enumerable<collectionsWhereUniqueInput>
    update?: Enumerable<collectionsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<collectionsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<collectionsScalarWhereInput>
  }

  export type commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput = {
    create?: XOR<Enumerable<commentsCreateWithoutUsers_comments_commentatorIdTousersInput>, Enumerable<commentsUncheckedCreateWithoutUsers_comments_commentatorIdTousersInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutUsers_comments_commentatorIdTousersInput>
    upsert?: Enumerable<commentsUpsertWithWhereUniqueWithoutUsers_comments_commentatorIdTousersInput>
    createMany?: commentsCreateManyUsers_comments_commentatorIdTousersInputEnvelope
    set?: Enumerable<commentsWhereUniqueInput>
    disconnect?: Enumerable<commentsWhereUniqueInput>
    delete?: Enumerable<commentsWhereUniqueInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    update?: Enumerable<commentsUpdateWithWhereUniqueWithoutUsers_comments_commentatorIdTousersInput>
    updateMany?: Enumerable<commentsUpdateManyWithWhereWithoutUsers_comments_commentatorIdTousersInput>
    deleteMany?: Enumerable<commentsScalarWhereInput>
  }

  export type commentsUpdateManyWithoutUsers_commentsTousersNestedInput = {
    create?: XOR<Enumerable<commentsCreateWithoutUsers_commentsTousersInput>, Enumerable<commentsUncheckedCreateWithoutUsers_commentsTousersInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutUsers_commentsTousersInput>
    upsert?: Enumerable<commentsUpsertWithWhereUniqueWithoutUsers_commentsTousersInput>
    createMany?: commentsCreateManyUsers_commentsTousersInputEnvelope
    set?: Enumerable<commentsWhereUniqueInput>
    disconnect?: Enumerable<commentsWhereUniqueInput>
    delete?: Enumerable<commentsWhereUniqueInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    update?: Enumerable<commentsUpdateWithWhereUniqueWithoutUsers_commentsTousersInput>
    updateMany?: Enumerable<commentsUpdateManyWithWhereWithoutUsers_commentsTousersInput>
    deleteMany?: Enumerable<commentsScalarWhereInput>
  }

  export type commentsLikesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<commentsLikesCreateWithoutUsersInput>, Enumerable<commentsLikesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<commentsLikesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<commentsLikesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: commentsLikesCreateManyUsersInputEnvelope
    set?: Enumerable<commentsLikesWhereUniqueInput>
    disconnect?: Enumerable<commentsLikesWhereUniqueInput>
    delete?: Enumerable<commentsLikesWhereUniqueInput>
    connect?: Enumerable<commentsLikesWhereUniqueInput>
    update?: Enumerable<commentsLikesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<commentsLikesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<commentsLikesScalarWhereInput>
  }

  export type favoritesArtworksUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutUsersInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<favoritesArtworksUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: favoritesArtworksCreateManyUsersInputEnvelope
    set?: Enumerable<favoritesArtworksWhereUniqueInput>
    disconnect?: Enumerable<favoritesArtworksWhereUniqueInput>
    delete?: Enumerable<favoritesArtworksWhereUniqueInput>
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
    update?: Enumerable<favoritesArtworksUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<favoritesArtworksUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<favoritesArtworksScalarWhereInput>
  }

  export type followersUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsersInput>, Enumerable<followersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<followersUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: followersCreateManyUsersInputEnvelope
    set?: Enumerable<followersWhereUniqueInput>
    disconnect?: Enumerable<followersWhereUniqueInput>
    delete?: Enumerable<followersWhereUniqueInput>
    connect?: Enumerable<followersWhereUniqueInput>
    update?: Enumerable<followersUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<followersUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<followersScalarWhereInput>
  }

  export type followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsers_followers_userIdTousersInput>, Enumerable<followersUncheckedCreateWithoutUsers_followers_userIdTousersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsers_followers_userIdTousersInput>
    upsert?: Enumerable<followersUpsertWithWhereUniqueWithoutUsers_followers_userIdTousersInput>
    createMany?: followersCreateManyUsers_followers_userIdTousersInputEnvelope
    set?: Enumerable<followersWhereUniqueInput>
    disconnect?: Enumerable<followersWhereUniqueInput>
    delete?: Enumerable<followersWhereUniqueInput>
    connect?: Enumerable<followersWhereUniqueInput>
    update?: Enumerable<followersUpdateWithWhereUniqueWithoutUsers_followers_userIdTousersInput>
    updateMany?: Enumerable<followersUpdateManyWithWhereWithoutUsers_followers_userIdTousersInput>
    deleteMany?: Enumerable<followersScalarWhereInput>
  }

  export type notificationsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<notificationsCreateWithoutUsersInput>, Enumerable<notificationsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<notificationsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<notificationsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: notificationsCreateManyUsersInputEnvelope
    set?: Enumerable<notificationsWhereUniqueInput>
    disconnect?: Enumerable<notificationsWhereUniqueInput>
    delete?: Enumerable<notificationsWhereUniqueInput>
    connect?: Enumerable<notificationsWhereUniqueInput>
    update?: Enumerable<notificationsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<notificationsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<notificationsScalarWhereInput>
  }

  export type reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput = {
    create?: XOR<Enumerable<reportsCreateWithoutUsers_reports_reporterIdTousersInput>, Enumerable<reportsUncheckedCreateWithoutUsers_reports_reporterIdTousersInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutUsers_reports_reporterIdTousersInput>
    upsert?: Enumerable<reportsUpsertWithWhereUniqueWithoutUsers_reports_reporterIdTousersInput>
    createMany?: reportsCreateManyUsers_reports_reporterIdTousersInputEnvelope
    set?: Enumerable<reportsWhereUniqueInput>
    disconnect?: Enumerable<reportsWhereUniqueInput>
    delete?: Enumerable<reportsWhereUniqueInput>
    connect?: Enumerable<reportsWhereUniqueInput>
    update?: Enumerable<reportsUpdateWithWhereUniqueWithoutUsers_reports_reporterIdTousersInput>
    updateMany?: Enumerable<reportsUpdateManyWithWhereWithoutUsers_reports_reporterIdTousersInput>
    deleteMany?: Enumerable<reportsScalarWhereInput>
  }

  export type reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput = {
    create?: XOR<Enumerable<reportsCreateWithoutUsers_reports_userIdTousersInput>, Enumerable<reportsUncheckedCreateWithoutUsers_reports_userIdTousersInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutUsers_reports_userIdTousersInput>
    upsert?: Enumerable<reportsUpsertWithWhereUniqueWithoutUsers_reports_userIdTousersInput>
    createMany?: reportsCreateManyUsers_reports_userIdTousersInputEnvelope
    set?: Enumerable<reportsWhereUniqueInput>
    disconnect?: Enumerable<reportsWhereUniqueInput>
    delete?: Enumerable<reportsWhereUniqueInput>
    connect?: Enumerable<reportsWhereUniqueInput>
    update?: Enumerable<reportsUpdateWithWhereUniqueWithoutUsers_reports_userIdTousersInput>
    updateMany?: Enumerable<reportsUpdateManyWithWhereWithoutUsers_reports_userIdTousersInput>
    deleteMany?: Enumerable<reportsScalarWhereInput>
  }

  export type usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput = {
    create?: XOR<Enumerable<usersRatingsCreateWithoutUsers_usersTousersRatings_userIdInput>, Enumerable<usersRatingsUncheckedCreateWithoutUsers_usersTousersRatings_userIdInput>>
    connectOrCreate?: Enumerable<usersRatingsCreateOrConnectWithoutUsers_usersTousersRatings_userIdInput>
    upsert?: Enumerable<usersRatingsUpsertWithWhereUniqueWithoutUsers_usersTousersRatings_userIdInput>
    createMany?: usersRatingsCreateManyUsers_usersTousersRatings_userIdInputEnvelope
    set?: Enumerable<usersRatingsWhereUniqueInput>
    disconnect?: Enumerable<usersRatingsWhereUniqueInput>
    delete?: Enumerable<usersRatingsWhereUniqueInput>
    connect?: Enumerable<usersRatingsWhereUniqueInput>
    update?: Enumerable<usersRatingsUpdateWithWhereUniqueWithoutUsers_usersTousersRatings_userIdInput>
    updateMany?: Enumerable<usersRatingsUpdateManyWithWhereWithoutUsers_usersTousersRatings_userIdInput>
    deleteMany?: Enumerable<usersRatingsScalarWhereInput>
  }

  export type usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput = {
    create?: XOR<Enumerable<usersRatingsCreateWithoutUsers_usersTousersRatings_qualifierIdInput>, Enumerable<usersRatingsUncheckedCreateWithoutUsers_usersTousersRatings_qualifierIdInput>>
    connectOrCreate?: Enumerable<usersRatingsCreateOrConnectWithoutUsers_usersTousersRatings_qualifierIdInput>
    upsert?: Enumerable<usersRatingsUpsertWithWhereUniqueWithoutUsers_usersTousersRatings_qualifierIdInput>
    createMany?: usersRatingsCreateManyUsers_usersTousersRatings_qualifierIdInputEnvelope
    set?: Enumerable<usersRatingsWhereUniqueInput>
    disconnect?: Enumerable<usersRatingsWhereUniqueInput>
    delete?: Enumerable<usersRatingsWhereUniqueInput>
    connect?: Enumerable<usersRatingsWhereUniqueInput>
    update?: Enumerable<usersRatingsUpdateWithWhereUniqueWithoutUsers_usersTousersRatings_qualifierIdInput>
    updateMany?: Enumerable<usersRatingsUpdateManyWithWhereWithoutUsers_usersTousersRatings_qualifierIdInput>
    deleteMany?: Enumerable<usersRatingsScalarWhereInput>
  }

  export type artworksUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<artworksCreateWithoutUsersInput>, Enumerable<artworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<artworksCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<artworksUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: artworksCreateManyUsersInputEnvelope
    set?: Enumerable<artworksWhereUniqueInput>
    disconnect?: Enumerable<artworksWhereUniqueInput>
    delete?: Enumerable<artworksWhereUniqueInput>
    connect?: Enumerable<artworksWhereUniqueInput>
    update?: Enumerable<artworksUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<artworksUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<artworksScalarWhereInput>
  }

  export type artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<artworksCollaboratorsCreateWithoutUsersInput>, Enumerable<artworksCollaboratorsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<artworksCollaboratorsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<artworksCollaboratorsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: artworksCollaboratorsCreateManyUsersInputEnvelope
    set?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    disconnect?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    delete?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    connect?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    update?: Enumerable<artworksCollaboratorsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<artworksCollaboratorsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<artworksCollaboratorsScalarWhereInput>
  }

  export type collectionsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<collectionsCreateWithoutUsersInput>, Enumerable<collectionsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<collectionsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<collectionsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: collectionsCreateManyUsersInputEnvelope
    set?: Enumerable<collectionsWhereUniqueInput>
    disconnect?: Enumerable<collectionsWhereUniqueInput>
    delete?: Enumerable<collectionsWhereUniqueInput>
    connect?: Enumerable<collectionsWhereUniqueInput>
    update?: Enumerable<collectionsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<collectionsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<collectionsScalarWhereInput>
  }

  export type commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput = {
    create?: XOR<Enumerable<commentsCreateWithoutUsers_comments_commentatorIdTousersInput>, Enumerable<commentsUncheckedCreateWithoutUsers_comments_commentatorIdTousersInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutUsers_comments_commentatorIdTousersInput>
    upsert?: Enumerable<commentsUpsertWithWhereUniqueWithoutUsers_comments_commentatorIdTousersInput>
    createMany?: commentsCreateManyUsers_comments_commentatorIdTousersInputEnvelope
    set?: Enumerable<commentsWhereUniqueInput>
    disconnect?: Enumerable<commentsWhereUniqueInput>
    delete?: Enumerable<commentsWhereUniqueInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    update?: Enumerable<commentsUpdateWithWhereUniqueWithoutUsers_comments_commentatorIdTousersInput>
    updateMany?: Enumerable<commentsUpdateManyWithWhereWithoutUsers_comments_commentatorIdTousersInput>
    deleteMany?: Enumerable<commentsScalarWhereInput>
  }

  export type commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput = {
    create?: XOR<Enumerable<commentsCreateWithoutUsers_commentsTousersInput>, Enumerable<commentsUncheckedCreateWithoutUsers_commentsTousersInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutUsers_commentsTousersInput>
    upsert?: Enumerable<commentsUpsertWithWhereUniqueWithoutUsers_commentsTousersInput>
    createMany?: commentsCreateManyUsers_commentsTousersInputEnvelope
    set?: Enumerable<commentsWhereUniqueInput>
    disconnect?: Enumerable<commentsWhereUniqueInput>
    delete?: Enumerable<commentsWhereUniqueInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    update?: Enumerable<commentsUpdateWithWhereUniqueWithoutUsers_commentsTousersInput>
    updateMany?: Enumerable<commentsUpdateManyWithWhereWithoutUsers_commentsTousersInput>
    deleteMany?: Enumerable<commentsScalarWhereInput>
  }

  export type commentsLikesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<commentsLikesCreateWithoutUsersInput>, Enumerable<commentsLikesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<commentsLikesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<commentsLikesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: commentsLikesCreateManyUsersInputEnvelope
    set?: Enumerable<commentsLikesWhereUniqueInput>
    disconnect?: Enumerable<commentsLikesWhereUniqueInput>
    delete?: Enumerable<commentsLikesWhereUniqueInput>
    connect?: Enumerable<commentsLikesWhereUniqueInput>
    update?: Enumerable<commentsLikesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<commentsLikesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<commentsLikesScalarWhereInput>
  }

  export type favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutUsersInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<favoritesArtworksUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: favoritesArtworksCreateManyUsersInputEnvelope
    set?: Enumerable<favoritesArtworksWhereUniqueInput>
    disconnect?: Enumerable<favoritesArtworksWhereUniqueInput>
    delete?: Enumerable<favoritesArtworksWhereUniqueInput>
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
    update?: Enumerable<favoritesArtworksUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<favoritesArtworksUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<favoritesArtworksScalarWhereInput>
  }

  export type followersUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsersInput>, Enumerable<followersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<followersUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: followersCreateManyUsersInputEnvelope
    set?: Enumerable<followersWhereUniqueInput>
    disconnect?: Enumerable<followersWhereUniqueInput>
    delete?: Enumerable<followersWhereUniqueInput>
    connect?: Enumerable<followersWhereUniqueInput>
    update?: Enumerable<followersUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<followersUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<followersScalarWhereInput>
  }

  export type followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput = {
    create?: XOR<Enumerable<followersCreateWithoutUsers_followers_userIdTousersInput>, Enumerable<followersUncheckedCreateWithoutUsers_followers_userIdTousersInput>>
    connectOrCreate?: Enumerable<followersCreateOrConnectWithoutUsers_followers_userIdTousersInput>
    upsert?: Enumerable<followersUpsertWithWhereUniqueWithoutUsers_followers_userIdTousersInput>
    createMany?: followersCreateManyUsers_followers_userIdTousersInputEnvelope
    set?: Enumerable<followersWhereUniqueInput>
    disconnect?: Enumerable<followersWhereUniqueInput>
    delete?: Enumerable<followersWhereUniqueInput>
    connect?: Enumerable<followersWhereUniqueInput>
    update?: Enumerable<followersUpdateWithWhereUniqueWithoutUsers_followers_userIdTousersInput>
    updateMany?: Enumerable<followersUpdateManyWithWhereWithoutUsers_followers_userIdTousersInput>
    deleteMany?: Enumerable<followersScalarWhereInput>
  }

  export type notificationsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<notificationsCreateWithoutUsersInput>, Enumerable<notificationsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<notificationsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<notificationsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: notificationsCreateManyUsersInputEnvelope
    set?: Enumerable<notificationsWhereUniqueInput>
    disconnect?: Enumerable<notificationsWhereUniqueInput>
    delete?: Enumerable<notificationsWhereUniqueInput>
    connect?: Enumerable<notificationsWhereUniqueInput>
    update?: Enumerable<notificationsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<notificationsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<notificationsScalarWhereInput>
  }

  export type reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput = {
    create?: XOR<Enumerable<reportsCreateWithoutUsers_reports_reporterIdTousersInput>, Enumerable<reportsUncheckedCreateWithoutUsers_reports_reporterIdTousersInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutUsers_reports_reporterIdTousersInput>
    upsert?: Enumerable<reportsUpsertWithWhereUniqueWithoutUsers_reports_reporterIdTousersInput>
    createMany?: reportsCreateManyUsers_reports_reporterIdTousersInputEnvelope
    set?: Enumerable<reportsWhereUniqueInput>
    disconnect?: Enumerable<reportsWhereUniqueInput>
    delete?: Enumerable<reportsWhereUniqueInput>
    connect?: Enumerable<reportsWhereUniqueInput>
    update?: Enumerable<reportsUpdateWithWhereUniqueWithoutUsers_reports_reporterIdTousersInput>
    updateMany?: Enumerable<reportsUpdateManyWithWhereWithoutUsers_reports_reporterIdTousersInput>
    deleteMany?: Enumerable<reportsScalarWhereInput>
  }

  export type reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput = {
    create?: XOR<Enumerable<reportsCreateWithoutUsers_reports_userIdTousersInput>, Enumerable<reportsUncheckedCreateWithoutUsers_reports_userIdTousersInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutUsers_reports_userIdTousersInput>
    upsert?: Enumerable<reportsUpsertWithWhereUniqueWithoutUsers_reports_userIdTousersInput>
    createMany?: reportsCreateManyUsers_reports_userIdTousersInputEnvelope
    set?: Enumerable<reportsWhereUniqueInput>
    disconnect?: Enumerable<reportsWhereUniqueInput>
    delete?: Enumerable<reportsWhereUniqueInput>
    connect?: Enumerable<reportsWhereUniqueInput>
    update?: Enumerable<reportsUpdateWithWhereUniqueWithoutUsers_reports_userIdTousersInput>
    updateMany?: Enumerable<reportsUpdateManyWithWhereWithoutUsers_reports_userIdTousersInput>
    deleteMany?: Enumerable<reportsScalarWhereInput>
  }

  export type usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput = {
    create?: XOR<Enumerable<usersRatingsCreateWithoutUsers_usersTousersRatings_userIdInput>, Enumerable<usersRatingsUncheckedCreateWithoutUsers_usersTousersRatings_userIdInput>>
    connectOrCreate?: Enumerable<usersRatingsCreateOrConnectWithoutUsers_usersTousersRatings_userIdInput>
    upsert?: Enumerable<usersRatingsUpsertWithWhereUniqueWithoutUsers_usersTousersRatings_userIdInput>
    createMany?: usersRatingsCreateManyUsers_usersTousersRatings_userIdInputEnvelope
    set?: Enumerable<usersRatingsWhereUniqueInput>
    disconnect?: Enumerable<usersRatingsWhereUniqueInput>
    delete?: Enumerable<usersRatingsWhereUniqueInput>
    connect?: Enumerable<usersRatingsWhereUniqueInput>
    update?: Enumerable<usersRatingsUpdateWithWhereUniqueWithoutUsers_usersTousersRatings_userIdInput>
    updateMany?: Enumerable<usersRatingsUpdateManyWithWhereWithoutUsers_usersTousersRatings_userIdInput>
    deleteMany?: Enumerable<usersRatingsScalarWhereInput>
  }

  export type usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput = {
    create?: XOR<Enumerable<usersRatingsCreateWithoutUsers_usersTousersRatings_qualifierIdInput>, Enumerable<usersRatingsUncheckedCreateWithoutUsers_usersTousersRatings_qualifierIdInput>>
    connectOrCreate?: Enumerable<usersRatingsCreateOrConnectWithoutUsers_usersTousersRatings_qualifierIdInput>
    upsert?: Enumerable<usersRatingsUpsertWithWhereUniqueWithoutUsers_usersTousersRatings_qualifierIdInput>
    createMany?: usersRatingsCreateManyUsers_usersTousersRatings_qualifierIdInputEnvelope
    set?: Enumerable<usersRatingsWhereUniqueInput>
    disconnect?: Enumerable<usersRatingsWhereUniqueInput>
    delete?: Enumerable<usersRatingsWhereUniqueInput>
    connect?: Enumerable<usersRatingsWhereUniqueInput>
    update?: Enumerable<usersRatingsUpdateWithWhereUniqueWithoutUsers_usersTousersRatings_qualifierIdInput>
    updateMany?: Enumerable<usersRatingsUpdateManyWithWhereWithoutUsers_usersTousersRatings_qualifierIdInput>
    deleteMany?: Enumerable<usersRatingsScalarWhereInput>
  }

  export type usersCreateNestedOneWithoutArtworksInput = {
    create?: XOR<usersCreateWithoutArtworksInput, usersUncheckedCreateWithoutArtworksInput>
    connectOrCreate?: usersCreateOrConnectWithoutArtworksInput
    connect?: usersWhereUniqueInput
  }

  export type artworkCollectionsCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<artworkCollectionsCreateWithoutArtworksInput>, Enumerable<artworkCollectionsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworkCollectionsCreateOrConnectWithoutArtworksInput>
    createMany?: artworkCollectionsCreateManyArtworksInputEnvelope
    connect?: Enumerable<artworkCollectionsWhereUniqueInput>
  }

  export type artworksAddressesCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<artworksAddressesCreateWithoutArtworksInput>, Enumerable<artworksAddressesUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksAddressesCreateOrConnectWithoutArtworksInput>
    createMany?: artworksAddressesCreateManyArtworksInputEnvelope
    connect?: Enumerable<artworksAddressesWhereUniqueInput>
  }

  export type artworksCollaboratorsCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<artworksCollaboratorsCreateWithoutArtworksInput>, Enumerable<artworksCollaboratorsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksCollaboratorsCreateOrConnectWithoutArtworksInput>
    createMany?: artworksCollaboratorsCreateManyArtworksInputEnvelope
    connect?: Enumerable<artworksCollaboratorsWhereUniqueInput>
  }

  export type artworksColorsCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<artworksColorsCreateWithoutArtworksInput>, Enumerable<artworksColorsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksColorsCreateOrConnectWithoutArtworksInput>
    createMany?: artworksColorsCreateManyArtworksInputEnvelope
    connect?: Enumerable<artworksColorsWhereUniqueInput>
  }

  export type artworksMaterialsCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<artworksMaterialsCreateWithoutArtworksInput>, Enumerable<artworksMaterialsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksMaterialsCreateOrConnectWithoutArtworksInput>
    createMany?: artworksMaterialsCreateManyArtworksInputEnvelope
    connect?: Enumerable<artworksMaterialsWhereUniqueInput>
  }

  export type artworksMovementsCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<artworksMovementsCreateWithoutArtworksInput>, Enumerable<artworksMovementsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksMovementsCreateOrConnectWithoutArtworksInput>
    createMany?: artworksMovementsCreateManyArtworksInputEnvelope
    connect?: Enumerable<artworksMovementsWhereUniqueInput>
  }

  export type artworksTagsCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<artworksTagsCreateWithoutArtworksInput>, Enumerable<artworksTagsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksTagsCreateOrConnectWithoutArtworksInput>
    createMany?: artworksTagsCreateManyArtworksInputEnvelope
    connect?: Enumerable<artworksTagsWhereUniqueInput>
  }

  export type commentsCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<commentsCreateWithoutArtworksInput>, Enumerable<commentsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutArtworksInput>
    createMany?: commentsCreateManyArtworksInputEnvelope
    connect?: Enumerable<commentsWhereUniqueInput>
  }

  export type favoritesArtworksCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutArtworksInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutArtworksInput>
    createMany?: favoritesArtworksCreateManyArtworksInputEnvelope
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
  }

  export type reportsCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<reportsCreateWithoutArtworksInput>, Enumerable<reportsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutArtworksInput>
    createMany?: reportsCreateManyArtworksInputEnvelope
    connect?: Enumerable<reportsWhereUniqueInput>
  }

  export type artworkCollectionsUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<artworkCollectionsCreateWithoutArtworksInput>, Enumerable<artworkCollectionsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworkCollectionsCreateOrConnectWithoutArtworksInput>
    createMany?: artworkCollectionsCreateManyArtworksInputEnvelope
    connect?: Enumerable<artworkCollectionsWhereUniqueInput>
  }

  export type artworksAddressesUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<artworksAddressesCreateWithoutArtworksInput>, Enumerable<artworksAddressesUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksAddressesCreateOrConnectWithoutArtworksInput>
    createMany?: artworksAddressesCreateManyArtworksInputEnvelope
    connect?: Enumerable<artworksAddressesWhereUniqueInput>
  }

  export type artworksCollaboratorsUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<artworksCollaboratorsCreateWithoutArtworksInput>, Enumerable<artworksCollaboratorsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksCollaboratorsCreateOrConnectWithoutArtworksInput>
    createMany?: artworksCollaboratorsCreateManyArtworksInputEnvelope
    connect?: Enumerable<artworksCollaboratorsWhereUniqueInput>
  }

  export type artworksColorsUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<artworksColorsCreateWithoutArtworksInput>, Enumerable<artworksColorsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksColorsCreateOrConnectWithoutArtworksInput>
    createMany?: artworksColorsCreateManyArtworksInputEnvelope
    connect?: Enumerable<artworksColorsWhereUniqueInput>
  }

  export type artworksMaterialsUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<artworksMaterialsCreateWithoutArtworksInput>, Enumerable<artworksMaterialsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksMaterialsCreateOrConnectWithoutArtworksInput>
    createMany?: artworksMaterialsCreateManyArtworksInputEnvelope
    connect?: Enumerable<artworksMaterialsWhereUniqueInput>
  }

  export type artworksMovementsUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<artworksMovementsCreateWithoutArtworksInput>, Enumerable<artworksMovementsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksMovementsCreateOrConnectWithoutArtworksInput>
    createMany?: artworksMovementsCreateManyArtworksInputEnvelope
    connect?: Enumerable<artworksMovementsWhereUniqueInput>
  }

  export type artworksTagsUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<artworksTagsCreateWithoutArtworksInput>, Enumerable<artworksTagsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksTagsCreateOrConnectWithoutArtworksInput>
    createMany?: artworksTagsCreateManyArtworksInputEnvelope
    connect?: Enumerable<artworksTagsWhereUniqueInput>
  }

  export type commentsUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<commentsCreateWithoutArtworksInput>, Enumerable<commentsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutArtworksInput>
    createMany?: commentsCreateManyArtworksInputEnvelope
    connect?: Enumerable<commentsWhereUniqueInput>
  }

  export type favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutArtworksInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutArtworksInput>
    createMany?: favoritesArtworksCreateManyArtworksInputEnvelope
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
  }

  export type reportsUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<Enumerable<reportsCreateWithoutArtworksInput>, Enumerable<reportsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutArtworksInput>
    createMany?: reportsCreateManyArtworksInputEnvelope
    connect?: Enumerable<reportsWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usersUpdateOneRequiredWithoutArtworksNestedInput = {
    create?: XOR<usersCreateWithoutArtworksInput, usersUncheckedCreateWithoutArtworksInput>
    connectOrCreate?: usersCreateOrConnectWithoutArtworksInput
    upsert?: usersUpsertWithoutArtworksInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutArtworksInput, usersUncheckedUpdateWithoutArtworksInput>
  }

  export type artworkCollectionsUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<artworkCollectionsCreateWithoutArtworksInput>, Enumerable<artworkCollectionsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworkCollectionsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<artworkCollectionsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: artworkCollectionsCreateManyArtworksInputEnvelope
    set?: Enumerable<artworkCollectionsWhereUniqueInput>
    disconnect?: Enumerable<artworkCollectionsWhereUniqueInput>
    delete?: Enumerable<artworkCollectionsWhereUniqueInput>
    connect?: Enumerable<artworkCollectionsWhereUniqueInput>
    update?: Enumerable<artworkCollectionsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<artworkCollectionsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<artworkCollectionsScalarWhereInput>
  }

  export type artworksAddressesUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<artworksAddressesCreateWithoutArtworksInput>, Enumerable<artworksAddressesUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksAddressesCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<artworksAddressesUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: artworksAddressesCreateManyArtworksInputEnvelope
    set?: Enumerable<artworksAddressesWhereUniqueInput>
    disconnect?: Enumerable<artworksAddressesWhereUniqueInput>
    delete?: Enumerable<artworksAddressesWhereUniqueInput>
    connect?: Enumerable<artworksAddressesWhereUniqueInput>
    update?: Enumerable<artworksAddressesUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<artworksAddressesUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<artworksAddressesScalarWhereInput>
  }

  export type artworksCollaboratorsUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<artworksCollaboratorsCreateWithoutArtworksInput>, Enumerable<artworksCollaboratorsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksCollaboratorsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<artworksCollaboratorsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: artworksCollaboratorsCreateManyArtworksInputEnvelope
    set?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    disconnect?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    delete?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    connect?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    update?: Enumerable<artworksCollaboratorsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<artworksCollaboratorsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<artworksCollaboratorsScalarWhereInput>
  }

  export type artworksColorsUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<artworksColorsCreateWithoutArtworksInput>, Enumerable<artworksColorsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksColorsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<artworksColorsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: artworksColorsCreateManyArtworksInputEnvelope
    set?: Enumerable<artworksColorsWhereUniqueInput>
    disconnect?: Enumerable<artworksColorsWhereUniqueInput>
    delete?: Enumerable<artworksColorsWhereUniqueInput>
    connect?: Enumerable<artworksColorsWhereUniqueInput>
    update?: Enumerable<artworksColorsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<artworksColorsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<artworksColorsScalarWhereInput>
  }

  export type artworksMaterialsUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<artworksMaterialsCreateWithoutArtworksInput>, Enumerable<artworksMaterialsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksMaterialsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<artworksMaterialsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: artworksMaterialsCreateManyArtworksInputEnvelope
    set?: Enumerable<artworksMaterialsWhereUniqueInput>
    disconnect?: Enumerable<artworksMaterialsWhereUniqueInput>
    delete?: Enumerable<artworksMaterialsWhereUniqueInput>
    connect?: Enumerable<artworksMaterialsWhereUniqueInput>
    update?: Enumerable<artworksMaterialsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<artworksMaterialsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<artworksMaterialsScalarWhereInput>
  }

  export type artworksMovementsUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<artworksMovementsCreateWithoutArtworksInput>, Enumerable<artworksMovementsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksMovementsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<artworksMovementsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: artworksMovementsCreateManyArtworksInputEnvelope
    set?: Enumerable<artworksMovementsWhereUniqueInput>
    disconnect?: Enumerable<artworksMovementsWhereUniqueInput>
    delete?: Enumerable<artworksMovementsWhereUniqueInput>
    connect?: Enumerable<artworksMovementsWhereUniqueInput>
    update?: Enumerable<artworksMovementsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<artworksMovementsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<artworksMovementsScalarWhereInput>
  }

  export type artworksTagsUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<artworksTagsCreateWithoutArtworksInput>, Enumerable<artworksTagsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksTagsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<artworksTagsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: artworksTagsCreateManyArtworksInputEnvelope
    set?: Enumerable<artworksTagsWhereUniqueInput>
    disconnect?: Enumerable<artworksTagsWhereUniqueInput>
    delete?: Enumerable<artworksTagsWhereUniqueInput>
    connect?: Enumerable<artworksTagsWhereUniqueInput>
    update?: Enumerable<artworksTagsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<artworksTagsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<artworksTagsScalarWhereInput>
  }

  export type commentsUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<commentsCreateWithoutArtworksInput>, Enumerable<commentsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<commentsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: commentsCreateManyArtworksInputEnvelope
    set?: Enumerable<commentsWhereUniqueInput>
    disconnect?: Enumerable<commentsWhereUniqueInput>
    delete?: Enumerable<commentsWhereUniqueInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    update?: Enumerable<commentsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<commentsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<commentsScalarWhereInput>
  }

  export type favoritesArtworksUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutArtworksInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<favoritesArtworksUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: favoritesArtworksCreateManyArtworksInputEnvelope
    set?: Enumerable<favoritesArtworksWhereUniqueInput>
    disconnect?: Enumerable<favoritesArtworksWhereUniqueInput>
    delete?: Enumerable<favoritesArtworksWhereUniqueInput>
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
    update?: Enumerable<favoritesArtworksUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<favoritesArtworksUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<favoritesArtworksScalarWhereInput>
  }

  export type reportsUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<reportsCreateWithoutArtworksInput>, Enumerable<reportsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<reportsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: reportsCreateManyArtworksInputEnvelope
    set?: Enumerable<reportsWhereUniqueInput>
    disconnect?: Enumerable<reportsWhereUniqueInput>
    delete?: Enumerable<reportsWhereUniqueInput>
    connect?: Enumerable<reportsWhereUniqueInput>
    update?: Enumerable<reportsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<reportsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<reportsScalarWhereInput>
  }

  export type artworkCollectionsUncheckedUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<artworkCollectionsCreateWithoutArtworksInput>, Enumerable<artworkCollectionsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworkCollectionsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<artworkCollectionsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: artworkCollectionsCreateManyArtworksInputEnvelope
    set?: Enumerable<artworkCollectionsWhereUniqueInput>
    disconnect?: Enumerable<artworkCollectionsWhereUniqueInput>
    delete?: Enumerable<artworkCollectionsWhereUniqueInput>
    connect?: Enumerable<artworkCollectionsWhereUniqueInput>
    update?: Enumerable<artworkCollectionsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<artworkCollectionsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<artworkCollectionsScalarWhereInput>
  }

  export type artworksAddressesUncheckedUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<artworksAddressesCreateWithoutArtworksInput>, Enumerable<artworksAddressesUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksAddressesCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<artworksAddressesUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: artworksAddressesCreateManyArtworksInputEnvelope
    set?: Enumerable<artworksAddressesWhereUniqueInput>
    disconnect?: Enumerable<artworksAddressesWhereUniqueInput>
    delete?: Enumerable<artworksAddressesWhereUniqueInput>
    connect?: Enumerable<artworksAddressesWhereUniqueInput>
    update?: Enumerable<artworksAddressesUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<artworksAddressesUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<artworksAddressesScalarWhereInput>
  }

  export type artworksCollaboratorsUncheckedUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<artworksCollaboratorsCreateWithoutArtworksInput>, Enumerable<artworksCollaboratorsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksCollaboratorsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<artworksCollaboratorsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: artworksCollaboratorsCreateManyArtworksInputEnvelope
    set?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    disconnect?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    delete?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    connect?: Enumerable<artworksCollaboratorsWhereUniqueInput>
    update?: Enumerable<artworksCollaboratorsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<artworksCollaboratorsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<artworksCollaboratorsScalarWhereInput>
  }

  export type artworksColorsUncheckedUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<artworksColorsCreateWithoutArtworksInput>, Enumerable<artworksColorsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksColorsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<artworksColorsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: artworksColorsCreateManyArtworksInputEnvelope
    set?: Enumerable<artworksColorsWhereUniqueInput>
    disconnect?: Enumerable<artworksColorsWhereUniqueInput>
    delete?: Enumerable<artworksColorsWhereUniqueInput>
    connect?: Enumerable<artworksColorsWhereUniqueInput>
    update?: Enumerable<artworksColorsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<artworksColorsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<artworksColorsScalarWhereInput>
  }

  export type artworksMaterialsUncheckedUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<artworksMaterialsCreateWithoutArtworksInput>, Enumerable<artworksMaterialsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksMaterialsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<artworksMaterialsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: artworksMaterialsCreateManyArtworksInputEnvelope
    set?: Enumerable<artworksMaterialsWhereUniqueInput>
    disconnect?: Enumerable<artworksMaterialsWhereUniqueInput>
    delete?: Enumerable<artworksMaterialsWhereUniqueInput>
    connect?: Enumerable<artworksMaterialsWhereUniqueInput>
    update?: Enumerable<artworksMaterialsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<artworksMaterialsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<artworksMaterialsScalarWhereInput>
  }

  export type artworksMovementsUncheckedUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<artworksMovementsCreateWithoutArtworksInput>, Enumerable<artworksMovementsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksMovementsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<artworksMovementsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: artworksMovementsCreateManyArtworksInputEnvelope
    set?: Enumerable<artworksMovementsWhereUniqueInput>
    disconnect?: Enumerable<artworksMovementsWhereUniqueInput>
    delete?: Enumerable<artworksMovementsWhereUniqueInput>
    connect?: Enumerable<artworksMovementsWhereUniqueInput>
    update?: Enumerable<artworksMovementsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<artworksMovementsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<artworksMovementsScalarWhereInput>
  }

  export type artworksTagsUncheckedUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<artworksTagsCreateWithoutArtworksInput>, Enumerable<artworksTagsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<artworksTagsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<artworksTagsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: artworksTagsCreateManyArtworksInputEnvelope
    set?: Enumerable<artworksTagsWhereUniqueInput>
    disconnect?: Enumerable<artworksTagsWhereUniqueInput>
    delete?: Enumerable<artworksTagsWhereUniqueInput>
    connect?: Enumerable<artworksTagsWhereUniqueInput>
    update?: Enumerable<artworksTagsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<artworksTagsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<artworksTagsScalarWhereInput>
  }

  export type commentsUncheckedUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<commentsCreateWithoutArtworksInput>, Enumerable<commentsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<commentsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: commentsCreateManyArtworksInputEnvelope
    set?: Enumerable<commentsWhereUniqueInput>
    disconnect?: Enumerable<commentsWhereUniqueInput>
    delete?: Enumerable<commentsWhereUniqueInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    update?: Enumerable<commentsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<commentsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<commentsScalarWhereInput>
  }

  export type favoritesArtworksUncheckedUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<favoritesArtworksCreateWithoutArtworksInput>, Enumerable<favoritesArtworksUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<favoritesArtworksCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<favoritesArtworksUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: favoritesArtworksCreateManyArtworksInputEnvelope
    set?: Enumerable<favoritesArtworksWhereUniqueInput>
    disconnect?: Enumerable<favoritesArtworksWhereUniqueInput>
    delete?: Enumerable<favoritesArtworksWhereUniqueInput>
    connect?: Enumerable<favoritesArtworksWhereUniqueInput>
    update?: Enumerable<favoritesArtworksUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<favoritesArtworksUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<favoritesArtworksScalarWhereInput>
  }

  export type reportsUncheckedUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<Enumerable<reportsCreateWithoutArtworksInput>, Enumerable<reportsUncheckedCreateWithoutArtworksInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutArtworksInput>
    upsert?: Enumerable<reportsUpsertWithWhereUniqueWithoutArtworksInput>
    createMany?: reportsCreateManyArtworksInputEnvelope
    set?: Enumerable<reportsWhereUniqueInput>
    disconnect?: Enumerable<reportsWhereUniqueInput>
    delete?: Enumerable<reportsWhereUniqueInput>
    connect?: Enumerable<reportsWhereUniqueInput>
    update?: Enumerable<reportsUpdateWithWhereUniqueWithoutArtworksInput>
    updateMany?: Enumerable<reportsUpdateManyWithWhereWithoutArtworksInput>
    deleteMany?: Enumerable<reportsScalarWhereInput>
  }

  export type usersCreateNestedOneWithoutComments_comments_commentatorIdTousersInput = {
    create?: XOR<usersCreateWithoutComments_comments_commentatorIdTousersInput, usersUncheckedCreateWithoutComments_comments_commentatorIdTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutComments_comments_commentatorIdTousersInput
    connect?: usersWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutComments_commentsTousersInput = {
    create?: XOR<usersCreateWithoutComments_commentsTousersInput, usersUncheckedCreateWithoutComments_commentsTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutComments_commentsTousersInput
    connect?: usersWhereUniqueInput
  }

  export type artworksCreateNestedOneWithoutCommentsInput = {
    create?: XOR<artworksCreateWithoutCommentsInput, artworksUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutCommentsInput
    connect?: artworksWhereUniqueInput
  }

  export type commentsCreateNestedOneWithoutOther_commentsInput = {
    create?: XOR<commentsCreateWithoutOther_commentsInput, commentsUncheckedCreateWithoutOther_commentsInput>
    connectOrCreate?: commentsCreateOrConnectWithoutOther_commentsInput
    connect?: commentsWhereUniqueInput
  }

  export type commentsCreateNestedManyWithoutCommentsInput = {
    create?: XOR<Enumerable<commentsCreateWithoutCommentsInput>, Enumerable<commentsUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutCommentsInput>
    createMany?: commentsCreateManyCommentsInputEnvelope
    connect?: Enumerable<commentsWhereUniqueInput>
  }

  export type commentsLikesCreateNestedManyWithoutCommentsInput = {
    create?: XOR<Enumerable<commentsLikesCreateWithoutCommentsInput>, Enumerable<commentsLikesUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<commentsLikesCreateOrConnectWithoutCommentsInput>
    createMany?: commentsLikesCreateManyCommentsInputEnvelope
    connect?: Enumerable<commentsLikesWhereUniqueInput>
  }

  export type reportsCreateNestedManyWithoutCommentsInput = {
    create?: XOR<Enumerable<reportsCreateWithoutCommentsInput>, Enumerable<reportsUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutCommentsInput>
    createMany?: reportsCreateManyCommentsInputEnvelope
    connect?: Enumerable<reportsWhereUniqueInput>
  }

  export type commentsUncheckedCreateNestedManyWithoutCommentsInput = {
    create?: XOR<Enumerable<commentsCreateWithoutCommentsInput>, Enumerable<commentsUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutCommentsInput>
    createMany?: commentsCreateManyCommentsInputEnvelope
    connect?: Enumerable<commentsWhereUniqueInput>
  }

  export type commentsLikesUncheckedCreateNestedManyWithoutCommentsInput = {
    create?: XOR<Enumerable<commentsLikesCreateWithoutCommentsInput>, Enumerable<commentsLikesUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<commentsLikesCreateOrConnectWithoutCommentsInput>
    createMany?: commentsLikesCreateManyCommentsInputEnvelope
    connect?: Enumerable<commentsLikesWhereUniqueInput>
  }

  export type reportsUncheckedCreateNestedManyWithoutCommentsInput = {
    create?: XOR<Enumerable<reportsCreateWithoutCommentsInput>, Enumerable<reportsUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutCommentsInput>
    createMany?: reportsCreateManyCommentsInputEnvelope
    connect?: Enumerable<reportsWhereUniqueInput>
  }

  export type usersUpdateOneRequiredWithoutComments_comments_commentatorIdTousersNestedInput = {
    create?: XOR<usersCreateWithoutComments_comments_commentatorIdTousersInput, usersUncheckedCreateWithoutComments_comments_commentatorIdTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutComments_comments_commentatorIdTousersInput
    upsert?: usersUpsertWithoutComments_comments_commentatorIdTousersInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutComments_comments_commentatorIdTousersInput, usersUncheckedUpdateWithoutComments_comments_commentatorIdTousersInput>
  }

  export type usersUpdateOneWithoutComments_commentsTousersNestedInput = {
    create?: XOR<usersCreateWithoutComments_commentsTousersInput, usersUncheckedCreateWithoutComments_commentsTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutComments_commentsTousersInput
    upsert?: usersUpsertWithoutComments_commentsTousersInput
    disconnect?: boolean
    delete?: boolean
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutComments_commentsTousersInput, usersUncheckedUpdateWithoutComments_commentsTousersInput>
  }

  export type artworksUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<artworksCreateWithoutCommentsInput, artworksUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutCommentsInput
    upsert?: artworksUpsertWithoutCommentsInput
    disconnect?: boolean
    delete?: boolean
    connect?: artworksWhereUniqueInput
    update?: XOR<artworksUpdateWithoutCommentsInput, artworksUncheckedUpdateWithoutCommentsInput>
  }

  export type commentsUpdateOneWithoutOther_commentsNestedInput = {
    create?: XOR<commentsCreateWithoutOther_commentsInput, commentsUncheckedCreateWithoutOther_commentsInput>
    connectOrCreate?: commentsCreateOrConnectWithoutOther_commentsInput
    upsert?: commentsUpsertWithoutOther_commentsInput
    disconnect?: boolean
    delete?: boolean
    connect?: commentsWhereUniqueInput
    update?: XOR<commentsUpdateWithoutOther_commentsInput, commentsUncheckedUpdateWithoutOther_commentsInput>
  }

  export type commentsUpdateManyWithoutCommentsNestedInput = {
    create?: XOR<Enumerable<commentsCreateWithoutCommentsInput>, Enumerable<commentsUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutCommentsInput>
    upsert?: Enumerable<commentsUpsertWithWhereUniqueWithoutCommentsInput>
    createMany?: commentsCreateManyCommentsInputEnvelope
    set?: Enumerable<commentsWhereUniqueInput>
    disconnect?: Enumerable<commentsWhereUniqueInput>
    delete?: Enumerable<commentsWhereUniqueInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    update?: Enumerable<commentsUpdateWithWhereUniqueWithoutCommentsInput>
    updateMany?: Enumerable<commentsUpdateManyWithWhereWithoutCommentsInput>
    deleteMany?: Enumerable<commentsScalarWhereInput>
  }

  export type commentsLikesUpdateManyWithoutCommentsNestedInput = {
    create?: XOR<Enumerable<commentsLikesCreateWithoutCommentsInput>, Enumerable<commentsLikesUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<commentsLikesCreateOrConnectWithoutCommentsInput>
    upsert?: Enumerable<commentsLikesUpsertWithWhereUniqueWithoutCommentsInput>
    createMany?: commentsLikesCreateManyCommentsInputEnvelope
    set?: Enumerable<commentsLikesWhereUniqueInput>
    disconnect?: Enumerable<commentsLikesWhereUniqueInput>
    delete?: Enumerable<commentsLikesWhereUniqueInput>
    connect?: Enumerable<commentsLikesWhereUniqueInput>
    update?: Enumerable<commentsLikesUpdateWithWhereUniqueWithoutCommentsInput>
    updateMany?: Enumerable<commentsLikesUpdateManyWithWhereWithoutCommentsInput>
    deleteMany?: Enumerable<commentsLikesScalarWhereInput>
  }

  export type reportsUpdateManyWithoutCommentsNestedInput = {
    create?: XOR<Enumerable<reportsCreateWithoutCommentsInput>, Enumerable<reportsUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutCommentsInput>
    upsert?: Enumerable<reportsUpsertWithWhereUniqueWithoutCommentsInput>
    createMany?: reportsCreateManyCommentsInputEnvelope
    set?: Enumerable<reportsWhereUniqueInput>
    disconnect?: Enumerable<reportsWhereUniqueInput>
    delete?: Enumerable<reportsWhereUniqueInput>
    connect?: Enumerable<reportsWhereUniqueInput>
    update?: Enumerable<reportsUpdateWithWhereUniqueWithoutCommentsInput>
    updateMany?: Enumerable<reportsUpdateManyWithWhereWithoutCommentsInput>
    deleteMany?: Enumerable<reportsScalarWhereInput>
  }

  export type commentsUncheckedUpdateManyWithoutCommentsNestedInput = {
    create?: XOR<Enumerable<commentsCreateWithoutCommentsInput>, Enumerable<commentsUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutCommentsInput>
    upsert?: Enumerable<commentsUpsertWithWhereUniqueWithoutCommentsInput>
    createMany?: commentsCreateManyCommentsInputEnvelope
    set?: Enumerable<commentsWhereUniqueInput>
    disconnect?: Enumerable<commentsWhereUniqueInput>
    delete?: Enumerable<commentsWhereUniqueInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    update?: Enumerable<commentsUpdateWithWhereUniqueWithoutCommentsInput>
    updateMany?: Enumerable<commentsUpdateManyWithWhereWithoutCommentsInput>
    deleteMany?: Enumerable<commentsScalarWhereInput>
  }

  export type commentsLikesUncheckedUpdateManyWithoutCommentsNestedInput = {
    create?: XOR<Enumerable<commentsLikesCreateWithoutCommentsInput>, Enumerable<commentsLikesUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<commentsLikesCreateOrConnectWithoutCommentsInput>
    upsert?: Enumerable<commentsLikesUpsertWithWhereUniqueWithoutCommentsInput>
    createMany?: commentsLikesCreateManyCommentsInputEnvelope
    set?: Enumerable<commentsLikesWhereUniqueInput>
    disconnect?: Enumerable<commentsLikesWhereUniqueInput>
    delete?: Enumerable<commentsLikesWhereUniqueInput>
    connect?: Enumerable<commentsLikesWhereUniqueInput>
    update?: Enumerable<commentsLikesUpdateWithWhereUniqueWithoutCommentsInput>
    updateMany?: Enumerable<commentsLikesUpdateManyWithWhereWithoutCommentsInput>
    deleteMany?: Enumerable<commentsLikesScalarWhereInput>
  }

  export type reportsUncheckedUpdateManyWithoutCommentsNestedInput = {
    create?: XOR<Enumerable<reportsCreateWithoutCommentsInput>, Enumerable<reportsUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<reportsCreateOrConnectWithoutCommentsInput>
    upsert?: Enumerable<reportsUpsertWithWhereUniqueWithoutCommentsInput>
    createMany?: reportsCreateManyCommentsInputEnvelope
    set?: Enumerable<reportsWhereUniqueInput>
    disconnect?: Enumerable<reportsWhereUniqueInput>
    delete?: Enumerable<reportsWhereUniqueInput>
    connect?: Enumerable<reportsWhereUniqueInput>
    update?: Enumerable<reportsUpdateWithWhereUniqueWithoutCommentsInput>
    updateMany?: Enumerable<reportsUpdateManyWithWhereWithoutCommentsInput>
    deleteMany?: Enumerable<reportsScalarWhereInput>
  }

  export type usersCreateNestedOneWithoutFavoritesArtworksInput = {
    create?: XOR<usersCreateWithoutFavoritesArtworksInput, usersUncheckedCreateWithoutFavoritesArtworksInput>
    connectOrCreate?: usersCreateOrConnectWithoutFavoritesArtworksInput
    connect?: usersWhereUniqueInput
  }

  export type artworksCreateNestedOneWithoutFavoritesArtworksInput = {
    create?: XOR<artworksCreateWithoutFavoritesArtworksInput, artworksUncheckedCreateWithoutFavoritesArtworksInput>
    connectOrCreate?: artworksCreateOrConnectWithoutFavoritesArtworksInput
    connect?: artworksWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutFavoritesArtworksNestedInput = {
    create?: XOR<usersCreateWithoutFavoritesArtworksInput, usersUncheckedCreateWithoutFavoritesArtworksInput>
    connectOrCreate?: usersCreateOrConnectWithoutFavoritesArtworksInput
    upsert?: usersUpsertWithoutFavoritesArtworksInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutFavoritesArtworksInput, usersUncheckedUpdateWithoutFavoritesArtworksInput>
  }

  export type artworksUpdateOneRequiredWithoutFavoritesArtworksNestedInput = {
    create?: XOR<artworksCreateWithoutFavoritesArtworksInput, artworksUncheckedCreateWithoutFavoritesArtworksInput>
    connectOrCreate?: artworksCreateOrConnectWithoutFavoritesArtworksInput
    upsert?: artworksUpsertWithoutFavoritesArtworksInput
    connect?: artworksWhereUniqueInput
    update?: XOR<artworksUpdateWithoutFavoritesArtworksInput, artworksUncheckedUpdateWithoutFavoritesArtworksInput>
  }

  export type usersCreateNestedOneWithoutFollowersInput = {
    create?: XOR<usersCreateWithoutFollowersInput, usersUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: usersCreateOrConnectWithoutFollowersInput
    connect?: usersWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutFollowers_followers_userIdTousersInput = {
    create?: XOR<usersCreateWithoutFollowers_followers_userIdTousersInput, usersUncheckedCreateWithoutFollowers_followers_userIdTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutFollowers_followers_userIdTousersInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutFollowersNestedInput = {
    create?: XOR<usersCreateWithoutFollowersInput, usersUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: usersCreateOrConnectWithoutFollowersInput
    upsert?: usersUpsertWithoutFollowersInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutFollowersInput, usersUncheckedUpdateWithoutFollowersInput>
  }

  export type usersUpdateOneRequiredWithoutFollowers_followers_userIdTousersNestedInput = {
    create?: XOR<usersCreateWithoutFollowers_followers_userIdTousersInput, usersUncheckedCreateWithoutFollowers_followers_userIdTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutFollowers_followers_userIdTousersInput
    upsert?: usersUpsertWithoutFollowers_followers_userIdTousersInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutFollowers_followers_userIdTousersInput, usersUncheckedUpdateWithoutFollowers_followers_userIdTousersInput>
  }

  export type usersCreateNestedOneWithoutCollectionsInput = {
    create?: XOR<usersCreateWithoutCollectionsInput, usersUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCollectionsInput
    connect?: usersWhereUniqueInput
  }

  export type artworkCollectionsCreateNestedManyWithoutCollectionsInput = {
    create?: XOR<Enumerable<artworkCollectionsCreateWithoutCollectionsInput>, Enumerable<artworkCollectionsUncheckedCreateWithoutCollectionsInput>>
    connectOrCreate?: Enumerable<artworkCollectionsCreateOrConnectWithoutCollectionsInput>
    createMany?: artworkCollectionsCreateManyCollectionsInputEnvelope
    connect?: Enumerable<artworkCollectionsWhereUniqueInput>
  }

  export type artworkCollectionsUncheckedCreateNestedManyWithoutCollectionsInput = {
    create?: XOR<Enumerable<artworkCollectionsCreateWithoutCollectionsInput>, Enumerable<artworkCollectionsUncheckedCreateWithoutCollectionsInput>>
    connectOrCreate?: Enumerable<artworkCollectionsCreateOrConnectWithoutCollectionsInput>
    createMany?: artworkCollectionsCreateManyCollectionsInputEnvelope
    connect?: Enumerable<artworkCollectionsWhereUniqueInput>
  }

  export type usersUpdateOneRequiredWithoutCollectionsNestedInput = {
    create?: XOR<usersCreateWithoutCollectionsInput, usersUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCollectionsInput
    upsert?: usersUpsertWithoutCollectionsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutCollectionsInput, usersUncheckedUpdateWithoutCollectionsInput>
  }

  export type artworkCollectionsUpdateManyWithoutCollectionsNestedInput = {
    create?: XOR<Enumerable<artworkCollectionsCreateWithoutCollectionsInput>, Enumerable<artworkCollectionsUncheckedCreateWithoutCollectionsInput>>
    connectOrCreate?: Enumerable<artworkCollectionsCreateOrConnectWithoutCollectionsInput>
    upsert?: Enumerable<artworkCollectionsUpsertWithWhereUniqueWithoutCollectionsInput>
    createMany?: artworkCollectionsCreateManyCollectionsInputEnvelope
    set?: Enumerable<artworkCollectionsWhereUniqueInput>
    disconnect?: Enumerable<artworkCollectionsWhereUniqueInput>
    delete?: Enumerable<artworkCollectionsWhereUniqueInput>
    connect?: Enumerable<artworkCollectionsWhereUniqueInput>
    update?: Enumerable<artworkCollectionsUpdateWithWhereUniqueWithoutCollectionsInput>
    updateMany?: Enumerable<artworkCollectionsUpdateManyWithWhereWithoutCollectionsInput>
    deleteMany?: Enumerable<artworkCollectionsScalarWhereInput>
  }

  export type artworkCollectionsUncheckedUpdateManyWithoutCollectionsNestedInput = {
    create?: XOR<Enumerable<artworkCollectionsCreateWithoutCollectionsInput>, Enumerable<artworkCollectionsUncheckedCreateWithoutCollectionsInput>>
    connectOrCreate?: Enumerable<artworkCollectionsCreateOrConnectWithoutCollectionsInput>
    upsert?: Enumerable<artworkCollectionsUpsertWithWhereUniqueWithoutCollectionsInput>
    createMany?: artworkCollectionsCreateManyCollectionsInputEnvelope
    set?: Enumerable<artworkCollectionsWhereUniqueInput>
    disconnect?: Enumerable<artworkCollectionsWhereUniqueInput>
    delete?: Enumerable<artworkCollectionsWhereUniqueInput>
    connect?: Enumerable<artworkCollectionsWhereUniqueInput>
    update?: Enumerable<artworkCollectionsUpdateWithWhereUniqueWithoutCollectionsInput>
    updateMany?: Enumerable<artworkCollectionsUpdateManyWithWhereWithoutCollectionsInput>
    deleteMany?: Enumerable<artworkCollectionsScalarWhereInput>
  }

  export type commentsCreateNestedOneWithoutCommentsLikesInput = {
    create?: XOR<commentsCreateWithoutCommentsLikesInput, commentsUncheckedCreateWithoutCommentsLikesInput>
    connectOrCreate?: commentsCreateOrConnectWithoutCommentsLikesInput
    connect?: commentsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutCommentsLikesInput = {
    create?: XOR<usersCreateWithoutCommentsLikesInput, usersUncheckedCreateWithoutCommentsLikesInput>
    connectOrCreate?: usersCreateOrConnectWithoutCommentsLikesInput
    connect?: usersWhereUniqueInput
  }

  export type commentsUpdateOneRequiredWithoutCommentsLikesNestedInput = {
    create?: XOR<commentsCreateWithoutCommentsLikesInput, commentsUncheckedCreateWithoutCommentsLikesInput>
    connectOrCreate?: commentsCreateOrConnectWithoutCommentsLikesInput
    upsert?: commentsUpsertWithoutCommentsLikesInput
    connect?: commentsWhereUniqueInput
    update?: XOR<commentsUpdateWithoutCommentsLikesInput, commentsUncheckedUpdateWithoutCommentsLikesInput>
  }

  export type usersUpdateOneRequiredWithoutCommentsLikesNestedInput = {
    create?: XOR<usersCreateWithoutCommentsLikesInput, usersUncheckedCreateWithoutCommentsLikesInput>
    connectOrCreate?: usersCreateOrConnectWithoutCommentsLikesInput
    upsert?: usersUpsertWithoutCommentsLikesInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutCommentsLikesInput, usersUncheckedUpdateWithoutCommentsLikesInput>
  }

  export type artworksCreateNestedOneWithoutArtworksAddressesInput = {
    create?: XOR<artworksCreateWithoutArtworksAddressesInput, artworksUncheckedCreateWithoutArtworksAddressesInput>
    connectOrCreate?: artworksCreateOrConnectWithoutArtworksAddressesInput
    connect?: artworksWhereUniqueInput
  }

  export type artworksUpdateOneRequiredWithoutArtworksAddressesNestedInput = {
    create?: XOR<artworksCreateWithoutArtworksAddressesInput, artworksUncheckedCreateWithoutArtworksAddressesInput>
    connectOrCreate?: artworksCreateOrConnectWithoutArtworksAddressesInput
    upsert?: artworksUpsertWithoutArtworksAddressesInput
    connect?: artworksWhereUniqueInput
    update?: XOR<artworksUpdateWithoutArtworksAddressesInput, artworksUncheckedUpdateWithoutArtworksAddressesInput>
  }

  export type artworksCreateNestedOneWithoutArtworksCollaboratorsInput = {
    create?: XOR<artworksCreateWithoutArtworksCollaboratorsInput, artworksUncheckedCreateWithoutArtworksCollaboratorsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutArtworksCollaboratorsInput
    connect?: artworksWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutArtworksCollaboratorsInput = {
    create?: XOR<usersCreateWithoutArtworksCollaboratorsInput, usersUncheckedCreateWithoutArtworksCollaboratorsInput>
    connectOrCreate?: usersCreateOrConnectWithoutArtworksCollaboratorsInput
    connect?: usersWhereUniqueInput
  }

  export type artworksUpdateOneRequiredWithoutArtworksCollaboratorsNestedInput = {
    create?: XOR<artworksCreateWithoutArtworksCollaboratorsInput, artworksUncheckedCreateWithoutArtworksCollaboratorsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutArtworksCollaboratorsInput
    upsert?: artworksUpsertWithoutArtworksCollaboratorsInput
    connect?: artworksWhereUniqueInput
    update?: XOR<artworksUpdateWithoutArtworksCollaboratorsInput, artworksUncheckedUpdateWithoutArtworksCollaboratorsInput>
  }

  export type usersUpdateOneRequiredWithoutArtworksCollaboratorsNestedInput = {
    create?: XOR<usersCreateWithoutArtworksCollaboratorsInput, usersUncheckedCreateWithoutArtworksCollaboratorsInput>
    connectOrCreate?: usersCreateOrConnectWithoutArtworksCollaboratorsInput
    upsert?: usersUpsertWithoutArtworksCollaboratorsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutArtworksCollaboratorsInput, usersUncheckedUpdateWithoutArtworksCollaboratorsInput>
  }

  export type artworksCreateNestedOneWithoutArtworksColorsInput = {
    create?: XOR<artworksCreateWithoutArtworksColorsInput, artworksUncheckedCreateWithoutArtworksColorsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutArtworksColorsInput
    connect?: artworksWhereUniqueInput
  }

  export type artworksUpdateOneRequiredWithoutArtworksColorsNestedInput = {
    create?: XOR<artworksCreateWithoutArtworksColorsInput, artworksUncheckedCreateWithoutArtworksColorsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutArtworksColorsInput
    upsert?: artworksUpsertWithoutArtworksColorsInput
    connect?: artworksWhereUniqueInput
    update?: XOR<artworksUpdateWithoutArtworksColorsInput, artworksUncheckedUpdateWithoutArtworksColorsInput>
  }

  export type artworksCreateNestedOneWithoutArtworksMaterialsInput = {
    create?: XOR<artworksCreateWithoutArtworksMaterialsInput, artworksUncheckedCreateWithoutArtworksMaterialsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutArtworksMaterialsInput
    connect?: artworksWhereUniqueInput
  }

  export type artworksUpdateOneRequiredWithoutArtworksMaterialsNestedInput = {
    create?: XOR<artworksCreateWithoutArtworksMaterialsInput, artworksUncheckedCreateWithoutArtworksMaterialsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutArtworksMaterialsInput
    upsert?: artworksUpsertWithoutArtworksMaterialsInput
    connect?: artworksWhereUniqueInput
    update?: XOR<artworksUpdateWithoutArtworksMaterialsInput, artworksUncheckedUpdateWithoutArtworksMaterialsInput>
  }

  export type artworksCreateNestedOneWithoutArtworksMovementsInput = {
    create?: XOR<artworksCreateWithoutArtworksMovementsInput, artworksUncheckedCreateWithoutArtworksMovementsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutArtworksMovementsInput
    connect?: artworksWhereUniqueInput
  }

  export type artworksUpdateOneRequiredWithoutArtworksMovementsNestedInput = {
    create?: XOR<artworksCreateWithoutArtworksMovementsInput, artworksUncheckedCreateWithoutArtworksMovementsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutArtworksMovementsInput
    upsert?: artworksUpsertWithoutArtworksMovementsInput
    connect?: artworksWhereUniqueInput
    update?: XOR<artworksUpdateWithoutArtworksMovementsInput, artworksUncheckedUpdateWithoutArtworksMovementsInput>
  }

  export type artworksCreateNestedOneWithoutArtworksTagsInput = {
    create?: XOR<artworksCreateWithoutArtworksTagsInput, artworksUncheckedCreateWithoutArtworksTagsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutArtworksTagsInput
    connect?: artworksWhereUniqueInput
  }

  export type artworksUpdateOneRequiredWithoutArtworksTagsNestedInput = {
    create?: XOR<artworksCreateWithoutArtworksTagsInput, artworksUncheckedCreateWithoutArtworksTagsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutArtworksTagsInput
    upsert?: artworksUpsertWithoutArtworksTagsInput
    connect?: artworksWhereUniqueInput
    update?: XOR<artworksUpdateWithoutArtworksTagsInput, artworksUncheckedUpdateWithoutArtworksTagsInput>
  }

  export type usersCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<usersCreateWithoutNotificationsInput, usersUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: usersCreateOrConnectWithoutNotificationsInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<usersCreateWithoutNotificationsInput, usersUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: usersCreateOrConnectWithoutNotificationsInput
    upsert?: usersUpsertWithoutNotificationsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutNotificationsInput, usersUncheckedUpdateWithoutNotificationsInput>
  }

  export type usersCreateNestedOneWithoutUsersRatings_usersTousersRatings_userIdInput = {
    create?: XOR<usersCreateWithoutUsersRatings_usersTousersRatings_userIdInput, usersUncheckedCreateWithoutUsersRatings_usersTousersRatings_userIdInput>
    connectOrCreate?: usersCreateOrConnectWithoutUsersRatings_usersTousersRatings_userIdInput
    connect?: usersWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutUsersRatings_usersTousersRatings_qualifierIdInput = {
    create?: XOR<usersCreateWithoutUsersRatings_usersTousersRatings_qualifierIdInput, usersUncheckedCreateWithoutUsersRatings_usersTousersRatings_qualifierIdInput>
    connectOrCreate?: usersCreateOrConnectWithoutUsersRatings_usersTousersRatings_qualifierIdInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutUsersRatings_usersTousersRatings_userIdNestedInput = {
    create?: XOR<usersCreateWithoutUsersRatings_usersTousersRatings_userIdInput, usersUncheckedCreateWithoutUsersRatings_usersTousersRatings_userIdInput>
    connectOrCreate?: usersCreateOrConnectWithoutUsersRatings_usersTousersRatings_userIdInput
    upsert?: usersUpsertWithoutUsersRatings_usersTousersRatings_userIdInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutUsersRatings_usersTousersRatings_userIdInput, usersUncheckedUpdateWithoutUsersRatings_usersTousersRatings_userIdInput>
  }

  export type usersUpdateOneRequiredWithoutUsersRatings_usersTousersRatings_qualifierIdNestedInput = {
    create?: XOR<usersCreateWithoutUsersRatings_usersTousersRatings_qualifierIdInput, usersUncheckedCreateWithoutUsersRatings_usersTousersRatings_qualifierIdInput>
    connectOrCreate?: usersCreateOrConnectWithoutUsersRatings_usersTousersRatings_qualifierIdInput
    upsert?: usersUpsertWithoutUsersRatings_usersTousersRatings_qualifierIdInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutUsersRatings_usersTousersRatings_qualifierIdInput, usersUncheckedUpdateWithoutUsersRatings_usersTousersRatings_qualifierIdInput>
  }

  export type collectionsCreateNestedOneWithoutArtworkCollectionsInput = {
    create?: XOR<collectionsCreateWithoutArtworkCollectionsInput, collectionsUncheckedCreateWithoutArtworkCollectionsInput>
    connectOrCreate?: collectionsCreateOrConnectWithoutArtworkCollectionsInput
    connect?: collectionsWhereUniqueInput
  }

  export type artworksCreateNestedOneWithoutArtworkCollectionsInput = {
    create?: XOR<artworksCreateWithoutArtworkCollectionsInput, artworksUncheckedCreateWithoutArtworkCollectionsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutArtworkCollectionsInput
    connect?: artworksWhereUniqueInput
  }

  export type collectionsUpdateOneRequiredWithoutArtworkCollectionsNestedInput = {
    create?: XOR<collectionsCreateWithoutArtworkCollectionsInput, collectionsUncheckedCreateWithoutArtworkCollectionsInput>
    connectOrCreate?: collectionsCreateOrConnectWithoutArtworkCollectionsInput
    upsert?: collectionsUpsertWithoutArtworkCollectionsInput
    connect?: collectionsWhereUniqueInput
    update?: XOR<collectionsUpdateWithoutArtworkCollectionsInput, collectionsUncheckedUpdateWithoutArtworkCollectionsInput>
  }

  export type artworksUpdateOneRequiredWithoutArtworkCollectionsNestedInput = {
    create?: XOR<artworksCreateWithoutArtworkCollectionsInput, artworksUncheckedCreateWithoutArtworkCollectionsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutArtworkCollectionsInput
    upsert?: artworksUpsertWithoutArtworkCollectionsInput
    connect?: artworksWhereUniqueInput
    update?: XOR<artworksUpdateWithoutArtworkCollectionsInput, artworksUncheckedUpdateWithoutArtworkCollectionsInput>
  }

  export type usersCreateNestedOneWithoutReports_reports_reporterIdTousersInput = {
    create?: XOR<usersCreateWithoutReports_reports_reporterIdTousersInput, usersUncheckedCreateWithoutReports_reports_reporterIdTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutReports_reports_reporterIdTousersInput
    connect?: usersWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutReports_reports_userIdTousersInput = {
    create?: XOR<usersCreateWithoutReports_reports_userIdTousersInput, usersUncheckedCreateWithoutReports_reports_userIdTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutReports_reports_userIdTousersInput
    connect?: usersWhereUniqueInput
  }

  export type artworksCreateNestedOneWithoutReportsInput = {
    create?: XOR<artworksCreateWithoutReportsInput, artworksUncheckedCreateWithoutReportsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutReportsInput
    connect?: artworksWhereUniqueInput
  }

  export type commentsCreateNestedOneWithoutReportsInput = {
    create?: XOR<commentsCreateWithoutReportsInput, commentsUncheckedCreateWithoutReportsInput>
    connectOrCreate?: commentsCreateOrConnectWithoutReportsInput
    connect?: commentsWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutReports_reports_reporterIdTousersNestedInput = {
    create?: XOR<usersCreateWithoutReports_reports_reporterIdTousersInput, usersUncheckedCreateWithoutReports_reports_reporterIdTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutReports_reports_reporterIdTousersInput
    upsert?: usersUpsertWithoutReports_reports_reporterIdTousersInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutReports_reports_reporterIdTousersInput, usersUncheckedUpdateWithoutReports_reports_reporterIdTousersInput>
  }

  export type usersUpdateOneWithoutReports_reports_userIdTousersNestedInput = {
    create?: XOR<usersCreateWithoutReports_reports_userIdTousersInput, usersUncheckedCreateWithoutReports_reports_userIdTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutReports_reports_userIdTousersInput
    upsert?: usersUpsertWithoutReports_reports_userIdTousersInput
    disconnect?: boolean
    delete?: boolean
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutReports_reports_userIdTousersInput, usersUncheckedUpdateWithoutReports_reports_userIdTousersInput>
  }

  export type artworksUpdateOneWithoutReportsNestedInput = {
    create?: XOR<artworksCreateWithoutReportsInput, artworksUncheckedCreateWithoutReportsInput>
    connectOrCreate?: artworksCreateOrConnectWithoutReportsInput
    upsert?: artworksUpsertWithoutReportsInput
    disconnect?: boolean
    delete?: boolean
    connect?: artworksWhereUniqueInput
    update?: XOR<artworksUpdateWithoutReportsInput, artworksUncheckedUpdateWithoutReportsInput>
  }

  export type commentsUpdateOneWithoutReportsNestedInput = {
    create?: XOR<commentsCreateWithoutReportsInput, commentsUncheckedCreateWithoutReportsInput>
    connectOrCreate?: commentsCreateOrConnectWithoutReportsInput
    upsert?: commentsUpsertWithoutReportsInput
    disconnect?: boolean
    delete?: boolean
    connect?: commentsWhereUniqueInput
    update?: XOR<commentsUpdateWithoutReportsInput, commentsUncheckedUpdateWithoutReportsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type artworksCreateWithoutUsersInput = {
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworkCollections?: artworkCollectionsCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsCreateNestedManyWithoutArtworksInput
    comments?: commentsCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutArtworksInput
    reports?: reportsCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworkCollections?: artworkCollectionsUncheckedCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesUncheckedCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsUncheckedCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsUncheckedCreateNestedManyWithoutArtworksInput
    comments?: commentsUncheckedCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput
    reports?: reportsUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksCreateOrConnectWithoutUsersInput = {
    where: artworksWhereUniqueInput
    create: XOR<artworksCreateWithoutUsersInput, artworksUncheckedCreateWithoutUsersInput>
  }

  export type artworksCreateManyUsersInputEnvelope = {
    data: Enumerable<artworksCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type artworksCollaboratorsCreateWithoutUsersInput = {
    artworks: artworksCreateNestedOneWithoutArtworksCollaboratorsInput
  }

  export type artworksCollaboratorsUncheckedCreateWithoutUsersInput = {
    id?: number
    artworkId: number
  }

  export type artworksCollaboratorsCreateOrConnectWithoutUsersInput = {
    where: artworksCollaboratorsWhereUniqueInput
    create: XOR<artworksCollaboratorsCreateWithoutUsersInput, artworksCollaboratorsUncheckedCreateWithoutUsersInput>
  }

  export type artworksCollaboratorsCreateManyUsersInputEnvelope = {
    data: Enumerable<artworksCollaboratorsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type collectionsCreateWithoutUsersInput = {
    name: string
    imageUrl?: string | null
    createdDate?: Date | string | null
    artworkCollections?: artworkCollectionsCreateNestedManyWithoutCollectionsInput
  }

  export type collectionsUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    imageUrl?: string | null
    createdDate?: Date | string | null
    artworkCollections?: artworkCollectionsUncheckedCreateNestedManyWithoutCollectionsInput
  }

  export type collectionsCreateOrConnectWithoutUsersInput = {
    where: collectionsWhereUniqueInput
    create: XOR<collectionsCreateWithoutUsersInput, collectionsUncheckedCreateWithoutUsersInput>
  }

  export type collectionsCreateManyUsersInputEnvelope = {
    data: Enumerable<collectionsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type commentsCreateWithoutUsers_comments_commentatorIdTousersInput = {
    comment: string
    createdDate?: Date | string | null
    users_commentsTousers?: usersCreateNestedOneWithoutComments_commentsTousersInput
    artworks?: artworksCreateNestedOneWithoutCommentsInput
    comments?: commentsCreateNestedOneWithoutOther_commentsInput
    other_comments?: commentsCreateNestedManyWithoutCommentsInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutCommentsInput
    reports?: reportsCreateNestedManyWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutUsers_comments_commentatorIdTousersInput = {
    id?: number
    comment: string
    userId?: number | null
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
    other_comments?: commentsUncheckedCreateNestedManyWithoutCommentsInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutCommentsInput
    reports?: reportsUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type commentsCreateOrConnectWithoutUsers_comments_commentatorIdTousersInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutUsers_comments_commentatorIdTousersInput, commentsUncheckedCreateWithoutUsers_comments_commentatorIdTousersInput>
  }

  export type commentsCreateManyUsers_comments_commentatorIdTousersInputEnvelope = {
    data: Enumerable<commentsCreateManyUsers_comments_commentatorIdTousersInput>
    skipDuplicates?: boolean
  }

  export type commentsCreateWithoutUsers_commentsTousersInput = {
    comment: string
    createdDate?: Date | string | null
    users_comments_commentatorIdTousers: usersCreateNestedOneWithoutComments_comments_commentatorIdTousersInput
    artworks?: artworksCreateNestedOneWithoutCommentsInput
    comments?: commentsCreateNestedOneWithoutOther_commentsInput
    other_comments?: commentsCreateNestedManyWithoutCommentsInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutCommentsInput
    reports?: reportsCreateNestedManyWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutUsers_commentsTousersInput = {
    id?: number
    commentatorId: number
    comment: string
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
    other_comments?: commentsUncheckedCreateNestedManyWithoutCommentsInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutCommentsInput
    reports?: reportsUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type commentsCreateOrConnectWithoutUsers_commentsTousersInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutUsers_commentsTousersInput, commentsUncheckedCreateWithoutUsers_commentsTousersInput>
  }

  export type commentsCreateManyUsers_commentsTousersInputEnvelope = {
    data: Enumerable<commentsCreateManyUsers_commentsTousersInput>
    skipDuplicates?: boolean
  }

  export type commentsLikesCreateWithoutUsersInput = {
    positive?: boolean | null
    comments: commentsCreateNestedOneWithoutCommentsLikesInput
  }

  export type commentsLikesUncheckedCreateWithoutUsersInput = {
    id?: number
    commentId: number
    positive?: boolean | null
  }

  export type commentsLikesCreateOrConnectWithoutUsersInput = {
    where: commentsLikesWhereUniqueInput
    create: XOR<commentsLikesCreateWithoutUsersInput, commentsLikesUncheckedCreateWithoutUsersInput>
  }

  export type commentsLikesCreateManyUsersInputEnvelope = {
    data: Enumerable<commentsLikesCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type favoritesArtworksCreateWithoutUsersInput = {
    createdDate?: Date | string | null
    artworks: artworksCreateNestedOneWithoutFavoritesArtworksInput
  }

  export type favoritesArtworksUncheckedCreateWithoutUsersInput = {
    id?: number
    artworkId: number
    createdDate?: Date | string | null
  }

  export type favoritesArtworksCreateOrConnectWithoutUsersInput = {
    where: favoritesArtworksWhereUniqueInput
    create: XOR<favoritesArtworksCreateWithoutUsersInput, favoritesArtworksUncheckedCreateWithoutUsersInput>
  }

  export type favoritesArtworksCreateManyUsersInputEnvelope = {
    data: Enumerable<favoritesArtworksCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type followersCreateWithoutUsersInput = {
    createdDate?: Date | string | null
    users_followers_userIdTousers: usersCreateNestedOneWithoutFollowers_followers_userIdTousersInput
  }

  export type followersUncheckedCreateWithoutUsersInput = {
    id?: number
    userId: number
    createdDate?: Date | string | null
  }

  export type followersCreateOrConnectWithoutUsersInput = {
    where: followersWhereUniqueInput
    create: XOR<followersCreateWithoutUsersInput, followersUncheckedCreateWithoutUsersInput>
  }

  export type followersCreateManyUsersInputEnvelope = {
    data: Enumerable<followersCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type followersCreateWithoutUsers_followers_userIdTousersInput = {
    createdDate?: Date | string | null
    users: usersCreateNestedOneWithoutFollowersInput
  }

  export type followersUncheckedCreateWithoutUsers_followers_userIdTousersInput = {
    id?: number
    followerId: number
    createdDate?: Date | string | null
  }

  export type followersCreateOrConnectWithoutUsers_followers_userIdTousersInput = {
    where: followersWhereUniqueInput
    create: XOR<followersCreateWithoutUsers_followers_userIdTousersInput, followersUncheckedCreateWithoutUsers_followers_userIdTousersInput>
  }

  export type followersCreateManyUsers_followers_userIdTousersInputEnvelope = {
    data: Enumerable<followersCreateManyUsers_followers_userIdTousersInput>
    skipDuplicates?: boolean
  }

  export type notificationsCreateWithoutUsersInput = {
    typeId: number
    title?: string | null
    content?: string | null
    link?: string | null
    createdDate?: Date | string | null
    viewed?: boolean | null
  }

  export type notificationsUncheckedCreateWithoutUsersInput = {
    id?: number
    typeId: number
    title?: string | null
    content?: string | null
    link?: string | null
    createdDate?: Date | string | null
    viewed?: boolean | null
  }

  export type notificationsCreateOrConnectWithoutUsersInput = {
    where: notificationsWhereUniqueInput
    create: XOR<notificationsCreateWithoutUsersInput, notificationsUncheckedCreateWithoutUsersInput>
  }

  export type notificationsCreateManyUsersInputEnvelope = {
    data: Enumerable<notificationsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type reportsCreateWithoutUsers_reports_reporterIdTousersInput = {
    description: string
    createdDate?: Date | string | null
    users_reports_userIdTousers?: usersCreateNestedOneWithoutReports_reports_userIdTousersInput
    artworks?: artworksCreateNestedOneWithoutReportsInput
    comments?: commentsCreateNestedOneWithoutReportsInput
  }

  export type reportsUncheckedCreateWithoutUsers_reports_reporterIdTousersInput = {
    id?: number
    description: string
    userId?: number | null
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
  }

  export type reportsCreateOrConnectWithoutUsers_reports_reporterIdTousersInput = {
    where: reportsWhereUniqueInput
    create: XOR<reportsCreateWithoutUsers_reports_reporterIdTousersInput, reportsUncheckedCreateWithoutUsers_reports_reporterIdTousersInput>
  }

  export type reportsCreateManyUsers_reports_reporterIdTousersInputEnvelope = {
    data: Enumerable<reportsCreateManyUsers_reports_reporterIdTousersInput>
    skipDuplicates?: boolean
  }

  export type reportsCreateWithoutUsers_reports_userIdTousersInput = {
    description: string
    createdDate?: Date | string | null
    users_reports_reporterIdTousers: usersCreateNestedOneWithoutReports_reports_reporterIdTousersInput
    artworks?: artworksCreateNestedOneWithoutReportsInput
    comments?: commentsCreateNestedOneWithoutReportsInput
  }

  export type reportsUncheckedCreateWithoutUsers_reports_userIdTousersInput = {
    id?: number
    reporterId: number
    description: string
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
  }

  export type reportsCreateOrConnectWithoutUsers_reports_userIdTousersInput = {
    where: reportsWhereUniqueInput
    create: XOR<reportsCreateWithoutUsers_reports_userIdTousersInput, reportsUncheckedCreateWithoutUsers_reports_userIdTousersInput>
  }

  export type reportsCreateManyUsers_reports_userIdTousersInputEnvelope = {
    data: Enumerable<reportsCreateManyUsers_reports_userIdTousersInput>
    skipDuplicates?: boolean
  }

  export type usersRatingsCreateWithoutUsers_usersTousersRatings_userIdInput = {
    rating?: number | null
    users_usersTousersRatings_qualifierId: usersCreateNestedOneWithoutUsersRatings_usersTousersRatings_qualifierIdInput
  }

  export type usersRatingsUncheckedCreateWithoutUsers_usersTousersRatings_userIdInput = {
    id?: number
    qualifierId: number
    rating?: number | null
  }

  export type usersRatingsCreateOrConnectWithoutUsers_usersTousersRatings_userIdInput = {
    where: usersRatingsWhereUniqueInput
    create: XOR<usersRatingsCreateWithoutUsers_usersTousersRatings_userIdInput, usersRatingsUncheckedCreateWithoutUsers_usersTousersRatings_userIdInput>
  }

  export type usersRatingsCreateManyUsers_usersTousersRatings_userIdInputEnvelope = {
    data: Enumerable<usersRatingsCreateManyUsers_usersTousersRatings_userIdInput>
    skipDuplicates?: boolean
  }

  export type usersRatingsCreateWithoutUsers_usersTousersRatings_qualifierIdInput = {
    rating?: number | null
    users_usersTousersRatings_userId: usersCreateNestedOneWithoutUsersRatings_usersTousersRatings_userIdInput
  }

  export type usersRatingsUncheckedCreateWithoutUsers_usersTousersRatings_qualifierIdInput = {
    id?: number
    userId: number
    rating?: number | null
  }

  export type usersRatingsCreateOrConnectWithoutUsers_usersTousersRatings_qualifierIdInput = {
    where: usersRatingsWhereUniqueInput
    create: XOR<usersRatingsCreateWithoutUsers_usersTousersRatings_qualifierIdInput, usersRatingsUncheckedCreateWithoutUsers_usersTousersRatings_qualifierIdInput>
  }

  export type usersRatingsCreateManyUsers_usersTousersRatings_qualifierIdInputEnvelope = {
    data: Enumerable<usersRatingsCreateManyUsers_usersTousersRatings_qualifierIdInput>
    skipDuplicates?: boolean
  }

  export type artworksUpsertWithWhereUniqueWithoutUsersInput = {
    where: artworksWhereUniqueInput
    update: XOR<artworksUpdateWithoutUsersInput, artworksUncheckedUpdateWithoutUsersInput>
    create: XOR<artworksCreateWithoutUsersInput, artworksUncheckedCreateWithoutUsersInput>
  }

  export type artworksUpdateWithWhereUniqueWithoutUsersInput = {
    where: artworksWhereUniqueInput
    data: XOR<artworksUpdateWithoutUsersInput, artworksUncheckedUpdateWithoutUsersInput>
  }

  export type artworksUpdateManyWithWhereWithoutUsersInput = {
    where: artworksScalarWhereInput
    data: XOR<artworksUpdateManyMutationInput, artworksUncheckedUpdateManyWithoutArtworksInput>
  }

  export type artworksScalarWhereInput = {
    AND?: Enumerable<artworksScalarWhereInput>
    OR?: Enumerable<artworksScalarWhereInput>
    NOT?: Enumerable<artworksScalarWhereInput>
    id?: IntFilter | number
    artistId?: IntFilter | number
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    imageUrl?: StringNullableFilter | string | null
    minWorkingHours?: IntNullableFilter | number | null
    maxWorkingHours?: IntNullableFilter | number | null
    minPrice?: FloatNullableFilter | number | null
    maxPrice?: FloatNullableFilter | number | null
    minHeight?: FloatNullableFilter | number | null
    maxHeight?: FloatNullableFilter | number | null
    minWidth?: FloatNullableFilter | number | null
    maxWidth?: FloatNullableFilter | number | null
    createdDate?: DateTimeNullableFilter | Date | string | null
    deletedDate?: DateTimeNullableFilter | Date | string | null
    isDeleted?: BoolNullableFilter | boolean | null
  }

  export type artworksCollaboratorsUpsertWithWhereUniqueWithoutUsersInput = {
    where: artworksCollaboratorsWhereUniqueInput
    update: XOR<artworksCollaboratorsUpdateWithoutUsersInput, artworksCollaboratorsUncheckedUpdateWithoutUsersInput>
    create: XOR<artworksCollaboratorsCreateWithoutUsersInput, artworksCollaboratorsUncheckedCreateWithoutUsersInput>
  }

  export type artworksCollaboratorsUpdateWithWhereUniqueWithoutUsersInput = {
    where: artworksCollaboratorsWhereUniqueInput
    data: XOR<artworksCollaboratorsUpdateWithoutUsersInput, artworksCollaboratorsUncheckedUpdateWithoutUsersInput>
  }

  export type artworksCollaboratorsUpdateManyWithWhereWithoutUsersInput = {
    where: artworksCollaboratorsScalarWhereInput
    data: XOR<artworksCollaboratorsUpdateManyMutationInput, artworksCollaboratorsUncheckedUpdateManyWithoutArtworksCollaboratorsInput>
  }

  export type artworksCollaboratorsScalarWhereInput = {
    AND?: Enumerable<artworksCollaboratorsScalarWhereInput>
    OR?: Enumerable<artworksCollaboratorsScalarWhereInput>
    NOT?: Enumerable<artworksCollaboratorsScalarWhereInput>
    id?: IntFilter | number
    artistId?: IntFilter | number
    artworkId?: IntFilter | number
  }

  export type collectionsUpsertWithWhereUniqueWithoutUsersInput = {
    where: collectionsWhereUniqueInput
    update: XOR<collectionsUpdateWithoutUsersInput, collectionsUncheckedUpdateWithoutUsersInput>
    create: XOR<collectionsCreateWithoutUsersInput, collectionsUncheckedCreateWithoutUsersInput>
  }

  export type collectionsUpdateWithWhereUniqueWithoutUsersInput = {
    where: collectionsWhereUniqueInput
    data: XOR<collectionsUpdateWithoutUsersInput, collectionsUncheckedUpdateWithoutUsersInput>
  }

  export type collectionsUpdateManyWithWhereWithoutUsersInput = {
    where: collectionsScalarWhereInput
    data: XOR<collectionsUpdateManyMutationInput, collectionsUncheckedUpdateManyWithoutCollectionsInput>
  }

  export type collectionsScalarWhereInput = {
    AND?: Enumerable<collectionsScalarWhereInput>
    OR?: Enumerable<collectionsScalarWhereInput>
    NOT?: Enumerable<collectionsScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    name?: StringFilter | string
    imageUrl?: StringNullableFilter | string | null
    createdDate?: DateTimeNullableFilter | Date | string | null
  }

  export type commentsUpsertWithWhereUniqueWithoutUsers_comments_commentatorIdTousersInput = {
    where: commentsWhereUniqueInput
    update: XOR<commentsUpdateWithoutUsers_comments_commentatorIdTousersInput, commentsUncheckedUpdateWithoutUsers_comments_commentatorIdTousersInput>
    create: XOR<commentsCreateWithoutUsers_comments_commentatorIdTousersInput, commentsUncheckedCreateWithoutUsers_comments_commentatorIdTousersInput>
  }

  export type commentsUpdateWithWhereUniqueWithoutUsers_comments_commentatorIdTousersInput = {
    where: commentsWhereUniqueInput
    data: XOR<commentsUpdateWithoutUsers_comments_commentatorIdTousersInput, commentsUncheckedUpdateWithoutUsers_comments_commentatorIdTousersInput>
  }

  export type commentsUpdateManyWithWhereWithoutUsers_comments_commentatorIdTousersInput = {
    where: commentsScalarWhereInput
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyWithoutComments_comments_commentatorIdTousersInput>
  }

  export type commentsScalarWhereInput = {
    AND?: Enumerable<commentsScalarWhereInput>
    OR?: Enumerable<commentsScalarWhereInput>
    NOT?: Enumerable<commentsScalarWhereInput>
    id?: IntFilter | number
    commentatorId?: IntFilter | number
    comment?: StringFilter | string
    userId?: IntNullableFilter | number | null
    artworkId?: IntNullableFilter | number | null
    commentId?: IntNullableFilter | number | null
    createdDate?: DateTimeNullableFilter | Date | string | null
  }

  export type commentsUpsertWithWhereUniqueWithoutUsers_commentsTousersInput = {
    where: commentsWhereUniqueInput
    update: XOR<commentsUpdateWithoutUsers_commentsTousersInput, commentsUncheckedUpdateWithoutUsers_commentsTousersInput>
    create: XOR<commentsCreateWithoutUsers_commentsTousersInput, commentsUncheckedCreateWithoutUsers_commentsTousersInput>
  }

  export type commentsUpdateWithWhereUniqueWithoutUsers_commentsTousersInput = {
    where: commentsWhereUniqueInput
    data: XOR<commentsUpdateWithoutUsers_commentsTousersInput, commentsUncheckedUpdateWithoutUsers_commentsTousersInput>
  }

  export type commentsUpdateManyWithWhereWithoutUsers_commentsTousersInput = {
    where: commentsScalarWhereInput
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyWithoutComments_commentsTousersInput>
  }

  export type commentsLikesUpsertWithWhereUniqueWithoutUsersInput = {
    where: commentsLikesWhereUniqueInput
    update: XOR<commentsLikesUpdateWithoutUsersInput, commentsLikesUncheckedUpdateWithoutUsersInput>
    create: XOR<commentsLikesCreateWithoutUsersInput, commentsLikesUncheckedCreateWithoutUsersInput>
  }

  export type commentsLikesUpdateWithWhereUniqueWithoutUsersInput = {
    where: commentsLikesWhereUniqueInput
    data: XOR<commentsLikesUpdateWithoutUsersInput, commentsLikesUncheckedUpdateWithoutUsersInput>
  }

  export type commentsLikesUpdateManyWithWhereWithoutUsersInput = {
    where: commentsLikesScalarWhereInput
    data: XOR<commentsLikesUpdateManyMutationInput, commentsLikesUncheckedUpdateManyWithoutCommentsLikesInput>
  }

  export type commentsLikesScalarWhereInput = {
    AND?: Enumerable<commentsLikesScalarWhereInput>
    OR?: Enumerable<commentsLikesScalarWhereInput>
    NOT?: Enumerable<commentsLikesScalarWhereInput>
    id?: IntFilter | number
    commentId?: IntFilter | number
    userId?: IntFilter | number
    positive?: BoolNullableFilter | boolean | null
  }

  export type favoritesArtworksUpsertWithWhereUniqueWithoutUsersInput = {
    where: favoritesArtworksWhereUniqueInput
    update: XOR<favoritesArtworksUpdateWithoutUsersInput, favoritesArtworksUncheckedUpdateWithoutUsersInput>
    create: XOR<favoritesArtworksCreateWithoutUsersInput, favoritesArtworksUncheckedCreateWithoutUsersInput>
  }

  export type favoritesArtworksUpdateWithWhereUniqueWithoutUsersInput = {
    where: favoritesArtworksWhereUniqueInput
    data: XOR<favoritesArtworksUpdateWithoutUsersInput, favoritesArtworksUncheckedUpdateWithoutUsersInput>
  }

  export type favoritesArtworksUpdateManyWithWhereWithoutUsersInput = {
    where: favoritesArtworksScalarWhereInput
    data: XOR<favoritesArtworksUpdateManyMutationInput, favoritesArtworksUncheckedUpdateManyWithoutFavoritesArtworksInput>
  }

  export type favoritesArtworksScalarWhereInput = {
    AND?: Enumerable<favoritesArtworksScalarWhereInput>
    OR?: Enumerable<favoritesArtworksScalarWhereInput>
    NOT?: Enumerable<favoritesArtworksScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    artworkId?: IntFilter | number
    createdDate?: DateTimeNullableFilter | Date | string | null
  }

  export type followersUpsertWithWhereUniqueWithoutUsersInput = {
    where: followersWhereUniqueInput
    update: XOR<followersUpdateWithoutUsersInput, followersUncheckedUpdateWithoutUsersInput>
    create: XOR<followersCreateWithoutUsersInput, followersUncheckedCreateWithoutUsersInput>
  }

  export type followersUpdateWithWhereUniqueWithoutUsersInput = {
    where: followersWhereUniqueInput
    data: XOR<followersUpdateWithoutUsersInput, followersUncheckedUpdateWithoutUsersInput>
  }

  export type followersUpdateManyWithWhereWithoutUsersInput = {
    where: followersScalarWhereInput
    data: XOR<followersUpdateManyMutationInput, followersUncheckedUpdateManyWithoutFollowersInput>
  }

  export type followersScalarWhereInput = {
    AND?: Enumerable<followersScalarWhereInput>
    OR?: Enumerable<followersScalarWhereInput>
    NOT?: Enumerable<followersScalarWhereInput>
    id?: IntFilter | number
    followerId?: IntFilter | number
    userId?: IntFilter | number
    createdDate?: DateTimeNullableFilter | Date | string | null
  }

  export type followersUpsertWithWhereUniqueWithoutUsers_followers_userIdTousersInput = {
    where: followersWhereUniqueInput
    update: XOR<followersUpdateWithoutUsers_followers_userIdTousersInput, followersUncheckedUpdateWithoutUsers_followers_userIdTousersInput>
    create: XOR<followersCreateWithoutUsers_followers_userIdTousersInput, followersUncheckedCreateWithoutUsers_followers_userIdTousersInput>
  }

  export type followersUpdateWithWhereUniqueWithoutUsers_followers_userIdTousersInput = {
    where: followersWhereUniqueInput
    data: XOR<followersUpdateWithoutUsers_followers_userIdTousersInput, followersUncheckedUpdateWithoutUsers_followers_userIdTousersInput>
  }

  export type followersUpdateManyWithWhereWithoutUsers_followers_userIdTousersInput = {
    where: followersScalarWhereInput
    data: XOR<followersUpdateManyMutationInput, followersUncheckedUpdateManyWithoutFollowers_followers_userIdTousersInput>
  }

  export type notificationsUpsertWithWhereUniqueWithoutUsersInput = {
    where: notificationsWhereUniqueInput
    update: XOR<notificationsUpdateWithoutUsersInput, notificationsUncheckedUpdateWithoutUsersInput>
    create: XOR<notificationsCreateWithoutUsersInput, notificationsUncheckedCreateWithoutUsersInput>
  }

  export type notificationsUpdateWithWhereUniqueWithoutUsersInput = {
    where: notificationsWhereUniqueInput
    data: XOR<notificationsUpdateWithoutUsersInput, notificationsUncheckedUpdateWithoutUsersInput>
  }

  export type notificationsUpdateManyWithWhereWithoutUsersInput = {
    where: notificationsScalarWhereInput
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyWithoutNotificationsInput>
  }

  export type notificationsScalarWhereInput = {
    AND?: Enumerable<notificationsScalarWhereInput>
    OR?: Enumerable<notificationsScalarWhereInput>
    NOT?: Enumerable<notificationsScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    typeId?: IntFilter | number
    title?: StringNullableFilter | string | null
    content?: StringNullableFilter | string | null
    link?: StringNullableFilter | string | null
    createdDate?: DateTimeNullableFilter | Date | string | null
    viewed?: BoolNullableFilter | boolean | null
  }

  export type reportsUpsertWithWhereUniqueWithoutUsers_reports_reporterIdTousersInput = {
    where: reportsWhereUniqueInput
    update: XOR<reportsUpdateWithoutUsers_reports_reporterIdTousersInput, reportsUncheckedUpdateWithoutUsers_reports_reporterIdTousersInput>
    create: XOR<reportsCreateWithoutUsers_reports_reporterIdTousersInput, reportsUncheckedCreateWithoutUsers_reports_reporterIdTousersInput>
  }

  export type reportsUpdateWithWhereUniqueWithoutUsers_reports_reporterIdTousersInput = {
    where: reportsWhereUniqueInput
    data: XOR<reportsUpdateWithoutUsers_reports_reporterIdTousersInput, reportsUncheckedUpdateWithoutUsers_reports_reporterIdTousersInput>
  }

  export type reportsUpdateManyWithWhereWithoutUsers_reports_reporterIdTousersInput = {
    where: reportsScalarWhereInput
    data: XOR<reportsUpdateManyMutationInput, reportsUncheckedUpdateManyWithoutReports_reports_reporterIdTousersInput>
  }

  export type reportsScalarWhereInput = {
    AND?: Enumerable<reportsScalarWhereInput>
    OR?: Enumerable<reportsScalarWhereInput>
    NOT?: Enumerable<reportsScalarWhereInput>
    id?: IntFilter | number
    reporterId?: IntFilter | number
    description?: StringFilter | string
    userId?: IntNullableFilter | number | null
    artworkId?: IntNullableFilter | number | null
    commentId?: IntNullableFilter | number | null
    createdDate?: DateTimeNullableFilter | Date | string | null
  }

  export type reportsUpsertWithWhereUniqueWithoutUsers_reports_userIdTousersInput = {
    where: reportsWhereUniqueInput
    update: XOR<reportsUpdateWithoutUsers_reports_userIdTousersInput, reportsUncheckedUpdateWithoutUsers_reports_userIdTousersInput>
    create: XOR<reportsCreateWithoutUsers_reports_userIdTousersInput, reportsUncheckedCreateWithoutUsers_reports_userIdTousersInput>
  }

  export type reportsUpdateWithWhereUniqueWithoutUsers_reports_userIdTousersInput = {
    where: reportsWhereUniqueInput
    data: XOR<reportsUpdateWithoutUsers_reports_userIdTousersInput, reportsUncheckedUpdateWithoutUsers_reports_userIdTousersInput>
  }

  export type reportsUpdateManyWithWhereWithoutUsers_reports_userIdTousersInput = {
    where: reportsScalarWhereInput
    data: XOR<reportsUpdateManyMutationInput, reportsUncheckedUpdateManyWithoutReports_reports_userIdTousersInput>
  }

  export type usersRatingsUpsertWithWhereUniqueWithoutUsers_usersTousersRatings_userIdInput = {
    where: usersRatingsWhereUniqueInput
    update: XOR<usersRatingsUpdateWithoutUsers_usersTousersRatings_userIdInput, usersRatingsUncheckedUpdateWithoutUsers_usersTousersRatings_userIdInput>
    create: XOR<usersRatingsCreateWithoutUsers_usersTousersRatings_userIdInput, usersRatingsUncheckedCreateWithoutUsers_usersTousersRatings_userIdInput>
  }

  export type usersRatingsUpdateWithWhereUniqueWithoutUsers_usersTousersRatings_userIdInput = {
    where: usersRatingsWhereUniqueInput
    data: XOR<usersRatingsUpdateWithoutUsers_usersTousersRatings_userIdInput, usersRatingsUncheckedUpdateWithoutUsers_usersTousersRatings_userIdInput>
  }

  export type usersRatingsUpdateManyWithWhereWithoutUsers_usersTousersRatings_userIdInput = {
    where: usersRatingsScalarWhereInput
    data: XOR<usersRatingsUpdateManyMutationInput, usersRatingsUncheckedUpdateManyWithoutUsersRatings_usersTousersRatings_userIdInput>
  }

  export type usersRatingsScalarWhereInput = {
    AND?: Enumerable<usersRatingsScalarWhereInput>
    OR?: Enumerable<usersRatingsScalarWhereInput>
    NOT?: Enumerable<usersRatingsScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    qualifierId?: IntFilter | number
    rating?: IntNullableFilter | number | null
  }

  export type usersRatingsUpsertWithWhereUniqueWithoutUsers_usersTousersRatings_qualifierIdInput = {
    where: usersRatingsWhereUniqueInput
    update: XOR<usersRatingsUpdateWithoutUsers_usersTousersRatings_qualifierIdInput, usersRatingsUncheckedUpdateWithoutUsers_usersTousersRatings_qualifierIdInput>
    create: XOR<usersRatingsCreateWithoutUsers_usersTousersRatings_qualifierIdInput, usersRatingsUncheckedCreateWithoutUsers_usersTousersRatings_qualifierIdInput>
  }

  export type usersRatingsUpdateWithWhereUniqueWithoutUsers_usersTousersRatings_qualifierIdInput = {
    where: usersRatingsWhereUniqueInput
    data: XOR<usersRatingsUpdateWithoutUsers_usersTousersRatings_qualifierIdInput, usersRatingsUncheckedUpdateWithoutUsers_usersTousersRatings_qualifierIdInput>
  }

  export type usersRatingsUpdateManyWithWhereWithoutUsers_usersTousersRatings_qualifierIdInput = {
    where: usersRatingsScalarWhereInput
    data: XOR<usersRatingsUpdateManyMutationInput, usersRatingsUncheckedUpdateManyWithoutUsersRatings_usersTousersRatings_qualifierIdInput>
  }

  export type usersCreateWithoutArtworksInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutUsersInput
    collections?: collectionsCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers?: followersCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUncheckedCreateWithoutArtworksInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput
    collections?: collectionsUncheckedCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers?: followersUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersCreateOrConnectWithoutArtworksInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutArtworksInput, usersUncheckedCreateWithoutArtworksInput>
  }

  export type artworkCollectionsCreateWithoutArtworksInput = {
    collections: collectionsCreateNestedOneWithoutArtworkCollectionsInput
  }

  export type artworkCollectionsUncheckedCreateWithoutArtworksInput = {
    id?: number
    collectionId: number
  }

  export type artworkCollectionsCreateOrConnectWithoutArtworksInput = {
    where: artworkCollectionsWhereUniqueInput
    create: XOR<artworkCollectionsCreateWithoutArtworksInput, artworkCollectionsUncheckedCreateWithoutArtworksInput>
  }

  export type artworkCollectionsCreateManyArtworksInputEnvelope = {
    data: Enumerable<artworkCollectionsCreateManyArtworksInput>
    skipDuplicates?: boolean
  }

  export type artworksAddressesCreateWithoutArtworksInput = {
    address?: string | null
  }

  export type artworksAddressesUncheckedCreateWithoutArtworksInput = {
    id?: number
    address?: string | null
  }

  export type artworksAddressesCreateOrConnectWithoutArtworksInput = {
    where: artworksAddressesWhereUniqueInput
    create: XOR<artworksAddressesCreateWithoutArtworksInput, artworksAddressesUncheckedCreateWithoutArtworksInput>
  }

  export type artworksAddressesCreateManyArtworksInputEnvelope = {
    data: Enumerable<artworksAddressesCreateManyArtworksInput>
    skipDuplicates?: boolean
  }

  export type artworksCollaboratorsCreateWithoutArtworksInput = {
    users: usersCreateNestedOneWithoutArtworksCollaboratorsInput
  }

  export type artworksCollaboratorsUncheckedCreateWithoutArtworksInput = {
    id?: number
    artistId: number
  }

  export type artworksCollaboratorsCreateOrConnectWithoutArtworksInput = {
    where: artworksCollaboratorsWhereUniqueInput
    create: XOR<artworksCollaboratorsCreateWithoutArtworksInput, artworksCollaboratorsUncheckedCreateWithoutArtworksInput>
  }

  export type artworksCollaboratorsCreateManyArtworksInputEnvelope = {
    data: Enumerable<artworksCollaboratorsCreateManyArtworksInput>
    skipDuplicates?: boolean
  }

  export type artworksColorsCreateWithoutArtworksInput = {
    color: string
  }

  export type artworksColorsUncheckedCreateWithoutArtworksInput = {
    id?: number
    color: string
  }

  export type artworksColorsCreateOrConnectWithoutArtworksInput = {
    where: artworksColorsWhereUniqueInput
    create: XOR<artworksColorsCreateWithoutArtworksInput, artworksColorsUncheckedCreateWithoutArtworksInput>
  }

  export type artworksColorsCreateManyArtworksInputEnvelope = {
    data: Enumerable<artworksColorsCreateManyArtworksInput>
    skipDuplicates?: boolean
  }

  export type artworksMaterialsCreateWithoutArtworksInput = {
    material: string
  }

  export type artworksMaterialsUncheckedCreateWithoutArtworksInput = {
    id?: number
    material: string
  }

  export type artworksMaterialsCreateOrConnectWithoutArtworksInput = {
    where: artworksMaterialsWhereUniqueInput
    create: XOR<artworksMaterialsCreateWithoutArtworksInput, artworksMaterialsUncheckedCreateWithoutArtworksInput>
  }

  export type artworksMaterialsCreateManyArtworksInputEnvelope = {
    data: Enumerable<artworksMaterialsCreateManyArtworksInput>
    skipDuplicates?: boolean
  }

  export type artworksMovementsCreateWithoutArtworksInput = {
    movement: string
  }

  export type artworksMovementsUncheckedCreateWithoutArtworksInput = {
    id?: number
    movement: string
  }

  export type artworksMovementsCreateOrConnectWithoutArtworksInput = {
    where: artworksMovementsWhereUniqueInput
    create: XOR<artworksMovementsCreateWithoutArtworksInput, artworksMovementsUncheckedCreateWithoutArtworksInput>
  }

  export type artworksMovementsCreateManyArtworksInputEnvelope = {
    data: Enumerable<artworksMovementsCreateManyArtworksInput>
    skipDuplicates?: boolean
  }

  export type artworksTagsCreateWithoutArtworksInput = {
    tag?: string | null
  }

  export type artworksTagsUncheckedCreateWithoutArtworksInput = {
    id?: number
    tag?: string | null
  }

  export type artworksTagsCreateOrConnectWithoutArtworksInput = {
    where: artworksTagsWhereUniqueInput
    create: XOR<artworksTagsCreateWithoutArtworksInput, artworksTagsUncheckedCreateWithoutArtworksInput>
  }

  export type artworksTagsCreateManyArtworksInputEnvelope = {
    data: Enumerable<artworksTagsCreateManyArtworksInput>
    skipDuplicates?: boolean
  }

  export type commentsCreateWithoutArtworksInput = {
    comment: string
    createdDate?: Date | string | null
    users_comments_commentatorIdTousers: usersCreateNestedOneWithoutComments_comments_commentatorIdTousersInput
    users_commentsTousers?: usersCreateNestedOneWithoutComments_commentsTousersInput
    comments?: commentsCreateNestedOneWithoutOther_commentsInput
    other_comments?: commentsCreateNestedManyWithoutCommentsInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutCommentsInput
    reports?: reportsCreateNestedManyWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutArtworksInput = {
    id?: number
    commentatorId: number
    comment: string
    userId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
    other_comments?: commentsUncheckedCreateNestedManyWithoutCommentsInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutCommentsInput
    reports?: reportsUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type commentsCreateOrConnectWithoutArtworksInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutArtworksInput, commentsUncheckedCreateWithoutArtworksInput>
  }

  export type commentsCreateManyArtworksInputEnvelope = {
    data: Enumerable<commentsCreateManyArtworksInput>
    skipDuplicates?: boolean
  }

  export type favoritesArtworksCreateWithoutArtworksInput = {
    createdDate?: Date | string | null
    users: usersCreateNestedOneWithoutFavoritesArtworksInput
  }

  export type favoritesArtworksUncheckedCreateWithoutArtworksInput = {
    id?: number
    userId: number
    createdDate?: Date | string | null
  }

  export type favoritesArtworksCreateOrConnectWithoutArtworksInput = {
    where: favoritesArtworksWhereUniqueInput
    create: XOR<favoritesArtworksCreateWithoutArtworksInput, favoritesArtworksUncheckedCreateWithoutArtworksInput>
  }

  export type favoritesArtworksCreateManyArtworksInputEnvelope = {
    data: Enumerable<favoritesArtworksCreateManyArtworksInput>
    skipDuplicates?: boolean
  }

  export type reportsCreateWithoutArtworksInput = {
    description: string
    createdDate?: Date | string | null
    users_reports_reporterIdTousers: usersCreateNestedOneWithoutReports_reports_reporterIdTousersInput
    users_reports_userIdTousers?: usersCreateNestedOneWithoutReports_reports_userIdTousersInput
    comments?: commentsCreateNestedOneWithoutReportsInput
  }

  export type reportsUncheckedCreateWithoutArtworksInput = {
    id?: number
    reporterId: number
    description: string
    userId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
  }

  export type reportsCreateOrConnectWithoutArtworksInput = {
    where: reportsWhereUniqueInput
    create: XOR<reportsCreateWithoutArtworksInput, reportsUncheckedCreateWithoutArtworksInput>
  }

  export type reportsCreateManyArtworksInputEnvelope = {
    data: Enumerable<reportsCreateManyArtworksInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutArtworksInput = {
    update: XOR<usersUpdateWithoutArtworksInput, usersUncheckedUpdateWithoutArtworksInput>
    create: XOR<usersCreateWithoutArtworksInput, usersUncheckedCreateWithoutArtworksInput>
  }

  export type usersUpdateWithoutArtworksInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutUsersNestedInput
    collections?: collectionsUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersNestedInput
    followers?: followersUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput
    collections?: collectionsUncheckedUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput
    followers?: followersUncheckedUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type artworkCollectionsUpsertWithWhereUniqueWithoutArtworksInput = {
    where: artworkCollectionsWhereUniqueInput
    update: XOR<artworkCollectionsUpdateWithoutArtworksInput, artworkCollectionsUncheckedUpdateWithoutArtworksInput>
    create: XOR<artworkCollectionsCreateWithoutArtworksInput, artworkCollectionsUncheckedCreateWithoutArtworksInput>
  }

  export type artworkCollectionsUpdateWithWhereUniqueWithoutArtworksInput = {
    where: artworkCollectionsWhereUniqueInput
    data: XOR<artworkCollectionsUpdateWithoutArtworksInput, artworkCollectionsUncheckedUpdateWithoutArtworksInput>
  }

  export type artworkCollectionsUpdateManyWithWhereWithoutArtworksInput = {
    where: artworkCollectionsScalarWhereInput
    data: XOR<artworkCollectionsUpdateManyMutationInput, artworkCollectionsUncheckedUpdateManyWithoutArtworkCollectionsInput>
  }

  export type artworkCollectionsScalarWhereInput = {
    AND?: Enumerable<artworkCollectionsScalarWhereInput>
    OR?: Enumerable<artworkCollectionsScalarWhereInput>
    NOT?: Enumerable<artworkCollectionsScalarWhereInput>
    id?: IntFilter | number
    collectionId?: IntFilter | number
    artworkId?: IntFilter | number
  }

  export type artworksAddressesUpsertWithWhereUniqueWithoutArtworksInput = {
    where: artworksAddressesWhereUniqueInput
    update: XOR<artworksAddressesUpdateWithoutArtworksInput, artworksAddressesUncheckedUpdateWithoutArtworksInput>
    create: XOR<artworksAddressesCreateWithoutArtworksInput, artworksAddressesUncheckedCreateWithoutArtworksInput>
  }

  export type artworksAddressesUpdateWithWhereUniqueWithoutArtworksInput = {
    where: artworksAddressesWhereUniqueInput
    data: XOR<artworksAddressesUpdateWithoutArtworksInput, artworksAddressesUncheckedUpdateWithoutArtworksInput>
  }

  export type artworksAddressesUpdateManyWithWhereWithoutArtworksInput = {
    where: artworksAddressesScalarWhereInput
    data: XOR<artworksAddressesUpdateManyMutationInput, artworksAddressesUncheckedUpdateManyWithoutArtworksAddressesInput>
  }

  export type artworksAddressesScalarWhereInput = {
    AND?: Enumerable<artworksAddressesScalarWhereInput>
    OR?: Enumerable<artworksAddressesScalarWhereInput>
    NOT?: Enumerable<artworksAddressesScalarWhereInput>
    id?: IntFilter | number
    artworkId?: IntFilter | number
    address?: StringNullableFilter | string | null
  }

  export type artworksCollaboratorsUpsertWithWhereUniqueWithoutArtworksInput = {
    where: artworksCollaboratorsWhereUniqueInput
    update: XOR<artworksCollaboratorsUpdateWithoutArtworksInput, artworksCollaboratorsUncheckedUpdateWithoutArtworksInput>
    create: XOR<artworksCollaboratorsCreateWithoutArtworksInput, artworksCollaboratorsUncheckedCreateWithoutArtworksInput>
  }

  export type artworksCollaboratorsUpdateWithWhereUniqueWithoutArtworksInput = {
    where: artworksCollaboratorsWhereUniqueInput
    data: XOR<artworksCollaboratorsUpdateWithoutArtworksInput, artworksCollaboratorsUncheckedUpdateWithoutArtworksInput>
  }

  export type artworksCollaboratorsUpdateManyWithWhereWithoutArtworksInput = {
    where: artworksCollaboratorsScalarWhereInput
    data: XOR<artworksCollaboratorsUpdateManyMutationInput, artworksCollaboratorsUncheckedUpdateManyWithoutArtworksCollaboratorsInput>
  }

  export type artworksColorsUpsertWithWhereUniqueWithoutArtworksInput = {
    where: artworksColorsWhereUniqueInput
    update: XOR<artworksColorsUpdateWithoutArtworksInput, artworksColorsUncheckedUpdateWithoutArtworksInput>
    create: XOR<artworksColorsCreateWithoutArtworksInput, artworksColorsUncheckedCreateWithoutArtworksInput>
  }

  export type artworksColorsUpdateWithWhereUniqueWithoutArtworksInput = {
    where: artworksColorsWhereUniqueInput
    data: XOR<artworksColorsUpdateWithoutArtworksInput, artworksColorsUncheckedUpdateWithoutArtworksInput>
  }

  export type artworksColorsUpdateManyWithWhereWithoutArtworksInput = {
    where: artworksColorsScalarWhereInput
    data: XOR<artworksColorsUpdateManyMutationInput, artworksColorsUncheckedUpdateManyWithoutArtworksColorsInput>
  }

  export type artworksColorsScalarWhereInput = {
    AND?: Enumerable<artworksColorsScalarWhereInput>
    OR?: Enumerable<artworksColorsScalarWhereInput>
    NOT?: Enumerable<artworksColorsScalarWhereInput>
    id?: IntFilter | number
    artworkId?: IntFilter | number
    color?: StringFilter | string
  }

  export type artworksMaterialsUpsertWithWhereUniqueWithoutArtworksInput = {
    where: artworksMaterialsWhereUniqueInput
    update: XOR<artworksMaterialsUpdateWithoutArtworksInput, artworksMaterialsUncheckedUpdateWithoutArtworksInput>
    create: XOR<artworksMaterialsCreateWithoutArtworksInput, artworksMaterialsUncheckedCreateWithoutArtworksInput>
  }

  export type artworksMaterialsUpdateWithWhereUniqueWithoutArtworksInput = {
    where: artworksMaterialsWhereUniqueInput
    data: XOR<artworksMaterialsUpdateWithoutArtworksInput, artworksMaterialsUncheckedUpdateWithoutArtworksInput>
  }

  export type artworksMaterialsUpdateManyWithWhereWithoutArtworksInput = {
    where: artworksMaterialsScalarWhereInput
    data: XOR<artworksMaterialsUpdateManyMutationInput, artworksMaterialsUncheckedUpdateManyWithoutArtworksMaterialsInput>
  }

  export type artworksMaterialsScalarWhereInput = {
    AND?: Enumerable<artworksMaterialsScalarWhereInput>
    OR?: Enumerable<artworksMaterialsScalarWhereInput>
    NOT?: Enumerable<artworksMaterialsScalarWhereInput>
    id?: IntFilter | number
    artworkId?: IntFilter | number
    material?: StringFilter | string
  }

  export type artworksMovementsUpsertWithWhereUniqueWithoutArtworksInput = {
    where: artworksMovementsWhereUniqueInput
    update: XOR<artworksMovementsUpdateWithoutArtworksInput, artworksMovementsUncheckedUpdateWithoutArtworksInput>
    create: XOR<artworksMovementsCreateWithoutArtworksInput, artworksMovementsUncheckedCreateWithoutArtworksInput>
  }

  export type artworksMovementsUpdateWithWhereUniqueWithoutArtworksInput = {
    where: artworksMovementsWhereUniqueInput
    data: XOR<artworksMovementsUpdateWithoutArtworksInput, artworksMovementsUncheckedUpdateWithoutArtworksInput>
  }

  export type artworksMovementsUpdateManyWithWhereWithoutArtworksInput = {
    where: artworksMovementsScalarWhereInput
    data: XOR<artworksMovementsUpdateManyMutationInput, artworksMovementsUncheckedUpdateManyWithoutArtworksMovementsInput>
  }

  export type artworksMovementsScalarWhereInput = {
    AND?: Enumerable<artworksMovementsScalarWhereInput>
    OR?: Enumerable<artworksMovementsScalarWhereInput>
    NOT?: Enumerable<artworksMovementsScalarWhereInput>
    id?: IntFilter | number
    artworkId?: IntFilter | number
    movement?: StringFilter | string
  }

  export type artworksTagsUpsertWithWhereUniqueWithoutArtworksInput = {
    where: artworksTagsWhereUniqueInput
    update: XOR<artworksTagsUpdateWithoutArtworksInput, artworksTagsUncheckedUpdateWithoutArtworksInput>
    create: XOR<artworksTagsCreateWithoutArtworksInput, artworksTagsUncheckedCreateWithoutArtworksInput>
  }

  export type artworksTagsUpdateWithWhereUniqueWithoutArtworksInput = {
    where: artworksTagsWhereUniqueInput
    data: XOR<artworksTagsUpdateWithoutArtworksInput, artworksTagsUncheckedUpdateWithoutArtworksInput>
  }

  export type artworksTagsUpdateManyWithWhereWithoutArtworksInput = {
    where: artworksTagsScalarWhereInput
    data: XOR<artworksTagsUpdateManyMutationInput, artworksTagsUncheckedUpdateManyWithoutArtworksTagsInput>
  }

  export type artworksTagsScalarWhereInput = {
    AND?: Enumerable<artworksTagsScalarWhereInput>
    OR?: Enumerable<artworksTagsScalarWhereInput>
    NOT?: Enumerable<artworksTagsScalarWhereInput>
    id?: IntFilter | number
    artworkId?: IntFilter | number
    tag?: StringNullableFilter | string | null
  }

  export type commentsUpsertWithWhereUniqueWithoutArtworksInput = {
    where: commentsWhereUniqueInput
    update: XOR<commentsUpdateWithoutArtworksInput, commentsUncheckedUpdateWithoutArtworksInput>
    create: XOR<commentsCreateWithoutArtworksInput, commentsUncheckedCreateWithoutArtworksInput>
  }

  export type commentsUpdateWithWhereUniqueWithoutArtworksInput = {
    where: commentsWhereUniqueInput
    data: XOR<commentsUpdateWithoutArtworksInput, commentsUncheckedUpdateWithoutArtworksInput>
  }

  export type commentsUpdateManyWithWhereWithoutArtworksInput = {
    where: commentsScalarWhereInput
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyWithoutCommentsInput>
  }

  export type favoritesArtworksUpsertWithWhereUniqueWithoutArtworksInput = {
    where: favoritesArtworksWhereUniqueInput
    update: XOR<favoritesArtworksUpdateWithoutArtworksInput, favoritesArtworksUncheckedUpdateWithoutArtworksInput>
    create: XOR<favoritesArtworksCreateWithoutArtworksInput, favoritesArtworksUncheckedCreateWithoutArtworksInput>
  }

  export type favoritesArtworksUpdateWithWhereUniqueWithoutArtworksInput = {
    where: favoritesArtworksWhereUniqueInput
    data: XOR<favoritesArtworksUpdateWithoutArtworksInput, favoritesArtworksUncheckedUpdateWithoutArtworksInput>
  }

  export type favoritesArtworksUpdateManyWithWhereWithoutArtworksInput = {
    where: favoritesArtworksScalarWhereInput
    data: XOR<favoritesArtworksUpdateManyMutationInput, favoritesArtworksUncheckedUpdateManyWithoutFavoritesArtworksInput>
  }

  export type reportsUpsertWithWhereUniqueWithoutArtworksInput = {
    where: reportsWhereUniqueInput
    update: XOR<reportsUpdateWithoutArtworksInput, reportsUncheckedUpdateWithoutArtworksInput>
    create: XOR<reportsCreateWithoutArtworksInput, reportsUncheckedCreateWithoutArtworksInput>
  }

  export type reportsUpdateWithWhereUniqueWithoutArtworksInput = {
    where: reportsWhereUniqueInput
    data: XOR<reportsUpdateWithoutArtworksInput, reportsUncheckedUpdateWithoutArtworksInput>
  }

  export type reportsUpdateManyWithWhereWithoutArtworksInput = {
    where: reportsScalarWhereInput
    data: XOR<reportsUpdateManyMutationInput, reportsUncheckedUpdateManyWithoutReportsInput>
  }

  export type usersCreateWithoutComments_comments_commentatorIdTousersInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutUsersInput
    collections?: collectionsCreateNestedManyWithoutUsersInput
    comments_commentsTousers?: commentsCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers?: followersCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUncheckedCreateWithoutComments_comments_commentatorIdTousersInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput
    collections?: collectionsUncheckedCreateNestedManyWithoutUsersInput
    comments_commentsTousers?: commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers?: followersUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersCreateOrConnectWithoutComments_comments_commentatorIdTousersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutComments_comments_commentatorIdTousersInput, usersUncheckedCreateWithoutComments_comments_commentatorIdTousersInput>
  }

  export type usersCreateWithoutComments_commentsTousersInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutUsersInput
    collections?: collectionsCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers?: followersCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUncheckedCreateWithoutComments_commentsTousersInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput
    collections?: collectionsUncheckedCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers?: followersUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersCreateOrConnectWithoutComments_commentsTousersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutComments_commentsTousersInput, usersUncheckedCreateWithoutComments_commentsTousersInput>
  }

  export type artworksCreateWithoutCommentsInput = {
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    users: usersCreateNestedOneWithoutArtworksInput
    artworkCollections?: artworkCollectionsCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutArtworksInput
    reports?: reportsCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateWithoutCommentsInput = {
    id?: number
    artistId: number
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworkCollections?: artworkCollectionsUncheckedCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesUncheckedCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsUncheckedCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsUncheckedCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput
    reports?: reportsUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksCreateOrConnectWithoutCommentsInput = {
    where: artworksWhereUniqueInput
    create: XOR<artworksCreateWithoutCommentsInput, artworksUncheckedCreateWithoutCommentsInput>
  }

  export type commentsCreateWithoutOther_commentsInput = {
    comment: string
    createdDate?: Date | string | null
    users_comments_commentatorIdTousers: usersCreateNestedOneWithoutComments_comments_commentatorIdTousersInput
    users_commentsTousers?: usersCreateNestedOneWithoutComments_commentsTousersInput
    artworks?: artworksCreateNestedOneWithoutCommentsInput
    comments?: commentsCreateNestedOneWithoutOther_commentsInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutCommentsInput
    reports?: reportsCreateNestedManyWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutOther_commentsInput = {
    id?: number
    commentatorId: number
    comment: string
    userId?: number | null
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutCommentsInput
    reports?: reportsUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type commentsCreateOrConnectWithoutOther_commentsInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutOther_commentsInput, commentsUncheckedCreateWithoutOther_commentsInput>
  }

  export type commentsCreateWithoutCommentsInput = {
    comment: string
    createdDate?: Date | string | null
    users_comments_commentatorIdTousers: usersCreateNestedOneWithoutComments_comments_commentatorIdTousersInput
    users_commentsTousers?: usersCreateNestedOneWithoutComments_commentsTousersInput
    artworks?: artworksCreateNestedOneWithoutCommentsInput
    other_comments?: commentsCreateNestedManyWithoutCommentsInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutCommentsInput
    reports?: reportsCreateNestedManyWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutCommentsInput = {
    id?: number
    commentatorId: number
    comment: string
    userId?: number | null
    artworkId?: number | null
    createdDate?: Date | string | null
    other_comments?: commentsUncheckedCreateNestedManyWithoutCommentsInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutCommentsInput
    reports?: reportsUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type commentsCreateOrConnectWithoutCommentsInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutCommentsInput, commentsUncheckedCreateWithoutCommentsInput>
  }

  export type commentsCreateManyCommentsInputEnvelope = {
    data: Enumerable<commentsCreateManyCommentsInput>
    skipDuplicates?: boolean
  }

  export type commentsLikesCreateWithoutCommentsInput = {
    positive?: boolean | null
    users: usersCreateNestedOneWithoutCommentsLikesInput
  }

  export type commentsLikesUncheckedCreateWithoutCommentsInput = {
    id?: number
    userId: number
    positive?: boolean | null
  }

  export type commentsLikesCreateOrConnectWithoutCommentsInput = {
    where: commentsLikesWhereUniqueInput
    create: XOR<commentsLikesCreateWithoutCommentsInput, commentsLikesUncheckedCreateWithoutCommentsInput>
  }

  export type commentsLikesCreateManyCommentsInputEnvelope = {
    data: Enumerable<commentsLikesCreateManyCommentsInput>
    skipDuplicates?: boolean
  }

  export type reportsCreateWithoutCommentsInput = {
    description: string
    createdDate?: Date | string | null
    users_reports_reporterIdTousers: usersCreateNestedOneWithoutReports_reports_reporterIdTousersInput
    users_reports_userIdTousers?: usersCreateNestedOneWithoutReports_reports_userIdTousersInput
    artworks?: artworksCreateNestedOneWithoutReportsInput
  }

  export type reportsUncheckedCreateWithoutCommentsInput = {
    id?: number
    reporterId: number
    description: string
    userId?: number | null
    artworkId?: number | null
    createdDate?: Date | string | null
  }

  export type reportsCreateOrConnectWithoutCommentsInput = {
    where: reportsWhereUniqueInput
    create: XOR<reportsCreateWithoutCommentsInput, reportsUncheckedCreateWithoutCommentsInput>
  }

  export type reportsCreateManyCommentsInputEnvelope = {
    data: Enumerable<reportsCreateManyCommentsInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutComments_comments_commentatorIdTousersInput = {
    update: XOR<usersUpdateWithoutComments_comments_commentatorIdTousersInput, usersUncheckedUpdateWithoutComments_comments_commentatorIdTousersInput>
    create: XOR<usersCreateWithoutComments_comments_commentatorIdTousersInput, usersUncheckedCreateWithoutComments_comments_commentatorIdTousersInput>
  }

  export type usersUpdateWithoutComments_comments_commentatorIdTousersInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutUsersNestedInput
    collections?: collectionsUpdateManyWithoutUsersNestedInput
    comments_commentsTousers?: commentsUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersNestedInput
    followers?: followersUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUncheckedUpdateWithoutComments_comments_commentatorIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput
    collections?: collectionsUncheckedUpdateManyWithoutUsersNestedInput
    comments_commentsTousers?: commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput
    followers?: followersUncheckedUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUpsertWithoutComments_commentsTousersInput = {
    update: XOR<usersUpdateWithoutComments_commentsTousersInput, usersUncheckedUpdateWithoutComments_commentsTousersInput>
    create: XOR<usersCreateWithoutComments_commentsTousersInput, usersUncheckedCreateWithoutComments_commentsTousersInput>
  }

  export type usersUpdateWithoutComments_commentsTousersInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutUsersNestedInput
    collections?: collectionsUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersNestedInput
    followers?: followersUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUncheckedUpdateWithoutComments_commentsTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput
    collections?: collectionsUncheckedUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput
    followers?: followersUncheckedUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type artworksUpsertWithoutCommentsInput = {
    update: XOR<artworksUpdateWithoutCommentsInput, artworksUncheckedUpdateWithoutCommentsInput>
    create: XOR<artworksCreateWithoutCommentsInput, artworksUncheckedCreateWithoutCommentsInput>
  }

  export type artworksUpdateWithoutCommentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: usersUpdateOneRequiredWithoutArtworksNestedInput
    artworkCollections?: artworkCollectionsUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutArtworksNestedInput
    reports?: reportsUpdateManyWithoutArtworksNestedInput
  }

  export type artworksUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworkCollections?: artworkCollectionsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUncheckedUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUncheckedUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutArtworksNestedInput
    reports?: reportsUncheckedUpdateManyWithoutArtworksNestedInput
  }

  export type commentsUpsertWithoutOther_commentsInput = {
    update: XOR<commentsUpdateWithoutOther_commentsInput, commentsUncheckedUpdateWithoutOther_commentsInput>
    create: XOR<commentsCreateWithoutOther_commentsInput, commentsUncheckedCreateWithoutOther_commentsInput>
  }

  export type commentsUpdateWithoutOther_commentsInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_comments_commentatorIdTousers?: usersUpdateOneRequiredWithoutComments_comments_commentatorIdTousersNestedInput
    users_commentsTousers?: usersUpdateOneWithoutComments_commentsTousersNestedInput
    artworks?: artworksUpdateOneWithoutCommentsNestedInput
    comments?: commentsUpdateOneWithoutOther_commentsNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutCommentsNestedInput
    reports?: reportsUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateWithoutOther_commentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentatorId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutCommentsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUpsertWithWhereUniqueWithoutCommentsInput = {
    where: commentsWhereUniqueInput
    update: XOR<commentsUpdateWithoutCommentsInput, commentsUncheckedUpdateWithoutCommentsInput>
    create: XOR<commentsCreateWithoutCommentsInput, commentsUncheckedCreateWithoutCommentsInput>
  }

  export type commentsUpdateWithWhereUniqueWithoutCommentsInput = {
    where: commentsWhereUniqueInput
    data: XOR<commentsUpdateWithoutCommentsInput, commentsUncheckedUpdateWithoutCommentsInput>
  }

  export type commentsUpdateManyWithWhereWithoutCommentsInput = {
    where: commentsScalarWhereInput
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyWithoutOther_commentsInput>
  }

  export type commentsLikesUpsertWithWhereUniqueWithoutCommentsInput = {
    where: commentsLikesWhereUniqueInput
    update: XOR<commentsLikesUpdateWithoutCommentsInput, commentsLikesUncheckedUpdateWithoutCommentsInput>
    create: XOR<commentsLikesCreateWithoutCommentsInput, commentsLikesUncheckedCreateWithoutCommentsInput>
  }

  export type commentsLikesUpdateWithWhereUniqueWithoutCommentsInput = {
    where: commentsLikesWhereUniqueInput
    data: XOR<commentsLikesUpdateWithoutCommentsInput, commentsLikesUncheckedUpdateWithoutCommentsInput>
  }

  export type commentsLikesUpdateManyWithWhereWithoutCommentsInput = {
    where: commentsLikesScalarWhereInput
    data: XOR<commentsLikesUpdateManyMutationInput, commentsLikesUncheckedUpdateManyWithoutCommentsLikesInput>
  }

  export type reportsUpsertWithWhereUniqueWithoutCommentsInput = {
    where: reportsWhereUniqueInput
    update: XOR<reportsUpdateWithoutCommentsInput, reportsUncheckedUpdateWithoutCommentsInput>
    create: XOR<reportsCreateWithoutCommentsInput, reportsUncheckedCreateWithoutCommentsInput>
  }

  export type reportsUpdateWithWhereUniqueWithoutCommentsInput = {
    where: reportsWhereUniqueInput
    data: XOR<reportsUpdateWithoutCommentsInput, reportsUncheckedUpdateWithoutCommentsInput>
  }

  export type reportsUpdateManyWithWhereWithoutCommentsInput = {
    where: reportsScalarWhereInput
    data: XOR<reportsUpdateManyMutationInput, reportsUncheckedUpdateManyWithoutReportsInput>
  }

  export type usersCreateWithoutFavoritesArtworksInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutUsersInput
    collections?: collectionsCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutUsersInput
    followers?: followersCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUncheckedCreateWithoutFavoritesArtworksInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput
    collections?: collectionsUncheckedCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutUsersInput
    followers?: followersUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersCreateOrConnectWithoutFavoritesArtworksInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutFavoritesArtworksInput, usersUncheckedCreateWithoutFavoritesArtworksInput>
  }

  export type artworksCreateWithoutFavoritesArtworksInput = {
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    users: usersCreateNestedOneWithoutArtworksInput
    artworkCollections?: artworkCollectionsCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsCreateNestedManyWithoutArtworksInput
    comments?: commentsCreateNestedManyWithoutArtworksInput
    reports?: reportsCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateWithoutFavoritesArtworksInput = {
    id?: number
    artistId: number
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworkCollections?: artworkCollectionsUncheckedCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesUncheckedCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsUncheckedCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsUncheckedCreateNestedManyWithoutArtworksInput
    comments?: commentsUncheckedCreateNestedManyWithoutArtworksInput
    reports?: reportsUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksCreateOrConnectWithoutFavoritesArtworksInput = {
    where: artworksWhereUniqueInput
    create: XOR<artworksCreateWithoutFavoritesArtworksInput, artworksUncheckedCreateWithoutFavoritesArtworksInput>
  }

  export type usersUpsertWithoutFavoritesArtworksInput = {
    update: XOR<usersUpdateWithoutFavoritesArtworksInput, usersUncheckedUpdateWithoutFavoritesArtworksInput>
    create: XOR<usersCreateWithoutFavoritesArtworksInput, usersUncheckedCreateWithoutFavoritesArtworksInput>
  }

  export type usersUpdateWithoutFavoritesArtworksInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutUsersNestedInput
    collections?: collectionsUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutUsersNestedInput
    followers?: followersUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUncheckedUpdateWithoutFavoritesArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput
    collections?: collectionsUncheckedUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutUsersNestedInput
    followers?: followersUncheckedUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type artworksUpsertWithoutFavoritesArtworksInput = {
    update: XOR<artworksUpdateWithoutFavoritesArtworksInput, artworksUncheckedUpdateWithoutFavoritesArtworksInput>
    create: XOR<artworksCreateWithoutFavoritesArtworksInput, artworksUncheckedCreateWithoutFavoritesArtworksInput>
  }

  export type artworksUpdateWithoutFavoritesArtworksInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: usersUpdateOneRequiredWithoutArtworksNestedInput
    artworkCollections?: artworkCollectionsUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUpdateManyWithoutArtworksNestedInput
    comments?: commentsUpdateManyWithoutArtworksNestedInput
    reports?: reportsUpdateManyWithoutArtworksNestedInput
  }

  export type artworksUncheckedUpdateWithoutFavoritesArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworkCollections?: artworkCollectionsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUncheckedUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUncheckedUpdateManyWithoutArtworksNestedInput
    comments?: commentsUncheckedUpdateManyWithoutArtworksNestedInput
    reports?: reportsUncheckedUpdateManyWithoutArtworksNestedInput
  }

  export type usersCreateWithoutFollowersInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutUsersInput
    collections?: collectionsCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUncheckedCreateWithoutFollowersInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput
    collections?: collectionsUncheckedCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersCreateOrConnectWithoutFollowersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutFollowersInput, usersUncheckedCreateWithoutFollowersInput>
  }

  export type usersCreateWithoutFollowers_followers_userIdTousersInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutUsersInput
    collections?: collectionsCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers?: followersCreateNestedManyWithoutUsersInput
    notifications?: notificationsCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUncheckedCreateWithoutFollowers_followers_userIdTousersInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput
    collections?: collectionsUncheckedCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers?: followersUncheckedCreateNestedManyWithoutUsersInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersCreateOrConnectWithoutFollowers_followers_userIdTousersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutFollowers_followers_userIdTousersInput, usersUncheckedCreateWithoutFollowers_followers_userIdTousersInput>
  }

  export type usersUpsertWithoutFollowersInput = {
    update: XOR<usersUpdateWithoutFollowersInput, usersUncheckedUpdateWithoutFollowersInput>
    create: XOR<usersCreateWithoutFollowersInput, usersUncheckedCreateWithoutFollowersInput>
  }

  export type usersUpdateWithoutFollowersInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutUsersNestedInput
    collections?: collectionsUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUncheckedUpdateWithoutFollowersInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput
    collections?: collectionsUncheckedUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUpsertWithoutFollowers_followers_userIdTousersInput = {
    update: XOR<usersUpdateWithoutFollowers_followers_userIdTousersInput, usersUncheckedUpdateWithoutFollowers_followers_userIdTousersInput>
    create: XOR<usersCreateWithoutFollowers_followers_userIdTousersInput, usersUncheckedCreateWithoutFollowers_followers_userIdTousersInput>
  }

  export type usersUpdateWithoutFollowers_followers_userIdTousersInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutUsersNestedInput
    collections?: collectionsUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersNestedInput
    followers?: followersUpdateManyWithoutUsersNestedInput
    notifications?: notificationsUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUncheckedUpdateWithoutFollowers_followers_userIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput
    collections?: collectionsUncheckedUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput
    followers?: followersUncheckedUpdateManyWithoutUsersNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersCreateWithoutCollectionsInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers?: followersCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUncheckedCreateWithoutCollectionsInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers?: followersUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersCreateOrConnectWithoutCollectionsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCollectionsInput, usersUncheckedCreateWithoutCollectionsInput>
  }

  export type artworkCollectionsCreateWithoutCollectionsInput = {
    artworks: artworksCreateNestedOneWithoutArtworkCollectionsInput
  }

  export type artworkCollectionsUncheckedCreateWithoutCollectionsInput = {
    id?: number
    artworkId: number
  }

  export type artworkCollectionsCreateOrConnectWithoutCollectionsInput = {
    where: artworkCollectionsWhereUniqueInput
    create: XOR<artworkCollectionsCreateWithoutCollectionsInput, artworkCollectionsUncheckedCreateWithoutCollectionsInput>
  }

  export type artworkCollectionsCreateManyCollectionsInputEnvelope = {
    data: Enumerable<artworkCollectionsCreateManyCollectionsInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutCollectionsInput = {
    update: XOR<usersUpdateWithoutCollectionsInput, usersUncheckedUpdateWithoutCollectionsInput>
    create: XOR<usersCreateWithoutCollectionsInput, usersUncheckedCreateWithoutCollectionsInput>
  }

  export type usersUpdateWithoutCollectionsInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersNestedInput
    followers?: followersUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUncheckedUpdateWithoutCollectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput
    followers?: followersUncheckedUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type artworkCollectionsUpsertWithWhereUniqueWithoutCollectionsInput = {
    where: artworkCollectionsWhereUniqueInput
    update: XOR<artworkCollectionsUpdateWithoutCollectionsInput, artworkCollectionsUncheckedUpdateWithoutCollectionsInput>
    create: XOR<artworkCollectionsCreateWithoutCollectionsInput, artworkCollectionsUncheckedCreateWithoutCollectionsInput>
  }

  export type artworkCollectionsUpdateWithWhereUniqueWithoutCollectionsInput = {
    where: artworkCollectionsWhereUniqueInput
    data: XOR<artworkCollectionsUpdateWithoutCollectionsInput, artworkCollectionsUncheckedUpdateWithoutCollectionsInput>
  }

  export type artworkCollectionsUpdateManyWithWhereWithoutCollectionsInput = {
    where: artworkCollectionsScalarWhereInput
    data: XOR<artworkCollectionsUpdateManyMutationInput, artworkCollectionsUncheckedUpdateManyWithoutArtworkCollectionsInput>
  }

  export type commentsCreateWithoutCommentsLikesInput = {
    comment: string
    createdDate?: Date | string | null
    users_comments_commentatorIdTousers: usersCreateNestedOneWithoutComments_comments_commentatorIdTousersInput
    users_commentsTousers?: usersCreateNestedOneWithoutComments_commentsTousersInput
    artworks?: artworksCreateNestedOneWithoutCommentsInput
    comments?: commentsCreateNestedOneWithoutOther_commentsInput
    other_comments?: commentsCreateNestedManyWithoutCommentsInput
    reports?: reportsCreateNestedManyWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutCommentsLikesInput = {
    id?: number
    commentatorId: number
    comment: string
    userId?: number | null
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
    other_comments?: commentsUncheckedCreateNestedManyWithoutCommentsInput
    reports?: reportsUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type commentsCreateOrConnectWithoutCommentsLikesInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutCommentsLikesInput, commentsUncheckedCreateWithoutCommentsLikesInput>
  }

  export type usersCreateWithoutCommentsLikesInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutUsersInput
    collections?: collectionsCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsCreateNestedManyWithoutUsers_commentsTousersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers?: followersCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUncheckedCreateWithoutCommentsLikesInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput
    collections?: collectionsUncheckedCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers?: followersUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersCreateOrConnectWithoutCommentsLikesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCommentsLikesInput, usersUncheckedCreateWithoutCommentsLikesInput>
  }

  export type commentsUpsertWithoutCommentsLikesInput = {
    update: XOR<commentsUpdateWithoutCommentsLikesInput, commentsUncheckedUpdateWithoutCommentsLikesInput>
    create: XOR<commentsCreateWithoutCommentsLikesInput, commentsUncheckedCreateWithoutCommentsLikesInput>
  }

  export type commentsUpdateWithoutCommentsLikesInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_comments_commentatorIdTousers?: usersUpdateOneRequiredWithoutComments_comments_commentatorIdTousersNestedInput
    users_commentsTousers?: usersUpdateOneWithoutComments_commentsTousersNestedInput
    artworks?: artworksUpdateOneWithoutCommentsNestedInput
    comments?: commentsUpdateOneWithoutOther_commentsNestedInput
    other_comments?: commentsUpdateManyWithoutCommentsNestedInput
    reports?: reportsUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateWithoutCommentsLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentatorId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    other_comments?: commentsUncheckedUpdateManyWithoutCommentsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type usersUpsertWithoutCommentsLikesInput = {
    update: XOR<usersUpdateWithoutCommentsLikesInput, usersUncheckedUpdateWithoutCommentsLikesInput>
    create: XOR<usersCreateWithoutCommentsLikesInput, usersUncheckedCreateWithoutCommentsLikesInput>
  }

  export type usersUpdateWithoutCommentsLikesInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutUsersNestedInput
    collections?: collectionsUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUpdateManyWithoutUsers_commentsTousersNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersNestedInput
    followers?: followersUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUncheckedUpdateWithoutCommentsLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput
    collections?: collectionsUncheckedUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput
    followers?: followersUncheckedUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type artworksCreateWithoutArtworksAddressesInput = {
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    users: usersCreateNestedOneWithoutArtworksInput
    artworkCollections?: artworkCollectionsCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsCreateNestedManyWithoutArtworksInput
    comments?: commentsCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutArtworksInput
    reports?: reportsCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateWithoutArtworksAddressesInput = {
    id?: number
    artistId: number
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworkCollections?: artworkCollectionsUncheckedCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsUncheckedCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsUncheckedCreateNestedManyWithoutArtworksInput
    comments?: commentsUncheckedCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput
    reports?: reportsUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksCreateOrConnectWithoutArtworksAddressesInput = {
    where: artworksWhereUniqueInput
    create: XOR<artworksCreateWithoutArtworksAddressesInput, artworksUncheckedCreateWithoutArtworksAddressesInput>
  }

  export type artworksUpsertWithoutArtworksAddressesInput = {
    update: XOR<artworksUpdateWithoutArtworksAddressesInput, artworksUncheckedUpdateWithoutArtworksAddressesInput>
    create: XOR<artworksCreateWithoutArtworksAddressesInput, artworksUncheckedCreateWithoutArtworksAddressesInput>
  }

  export type artworksUpdateWithoutArtworksAddressesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: usersUpdateOneRequiredWithoutArtworksNestedInput
    artworkCollections?: artworkCollectionsUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUpdateManyWithoutArtworksNestedInput
    comments?: commentsUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutArtworksNestedInput
    reports?: reportsUpdateManyWithoutArtworksNestedInput
  }

  export type artworksUncheckedUpdateWithoutArtworksAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworkCollections?: artworkCollectionsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUncheckedUpdateManyWithoutArtworksNestedInput
    comments?: commentsUncheckedUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutArtworksNestedInput
    reports?: reportsUncheckedUpdateManyWithoutArtworksNestedInput
  }

  export type artworksCreateWithoutArtworksCollaboratorsInput = {
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    users: usersCreateNestedOneWithoutArtworksInput
    artworkCollections?: artworkCollectionsCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsCreateNestedManyWithoutArtworksInput
    comments?: commentsCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutArtworksInput
    reports?: reportsCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateWithoutArtworksCollaboratorsInput = {
    id?: number
    artistId: number
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworkCollections?: artworkCollectionsUncheckedCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesUncheckedCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsUncheckedCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsUncheckedCreateNestedManyWithoutArtworksInput
    comments?: commentsUncheckedCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput
    reports?: reportsUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksCreateOrConnectWithoutArtworksCollaboratorsInput = {
    where: artworksWhereUniqueInput
    create: XOR<artworksCreateWithoutArtworksCollaboratorsInput, artworksUncheckedCreateWithoutArtworksCollaboratorsInput>
  }

  export type usersCreateWithoutArtworksCollaboratorsInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    collections?: collectionsCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers?: followersCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUncheckedCreateWithoutArtworksCollaboratorsInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    collections?: collectionsUncheckedCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers?: followersUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersCreateOrConnectWithoutArtworksCollaboratorsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutArtworksCollaboratorsInput, usersUncheckedCreateWithoutArtworksCollaboratorsInput>
  }

  export type artworksUpsertWithoutArtworksCollaboratorsInput = {
    update: XOR<artworksUpdateWithoutArtworksCollaboratorsInput, artworksUncheckedUpdateWithoutArtworksCollaboratorsInput>
    create: XOR<artworksCreateWithoutArtworksCollaboratorsInput, artworksUncheckedCreateWithoutArtworksCollaboratorsInput>
  }

  export type artworksUpdateWithoutArtworksCollaboratorsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: usersUpdateOneRequiredWithoutArtworksNestedInput
    artworkCollections?: artworkCollectionsUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUpdateManyWithoutArtworksNestedInput
    comments?: commentsUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutArtworksNestedInput
    reports?: reportsUpdateManyWithoutArtworksNestedInput
  }

  export type artworksUncheckedUpdateWithoutArtworksCollaboratorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworkCollections?: artworkCollectionsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUncheckedUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUncheckedUpdateManyWithoutArtworksNestedInput
    comments?: commentsUncheckedUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutArtworksNestedInput
    reports?: reportsUncheckedUpdateManyWithoutArtworksNestedInput
  }

  export type usersUpsertWithoutArtworksCollaboratorsInput = {
    update: XOR<usersUpdateWithoutArtworksCollaboratorsInput, usersUncheckedUpdateWithoutArtworksCollaboratorsInput>
    create: XOR<usersCreateWithoutArtworksCollaboratorsInput, usersUncheckedCreateWithoutArtworksCollaboratorsInput>
  }

  export type usersUpdateWithoutArtworksCollaboratorsInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUpdateManyWithoutUsersNestedInput
    collections?: collectionsUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersNestedInput
    followers?: followersUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUncheckedUpdateWithoutArtworksCollaboratorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersNestedInput
    collections?: collectionsUncheckedUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput
    followers?: followersUncheckedUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type artworksCreateWithoutArtworksColorsInput = {
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    users: usersCreateNestedOneWithoutArtworksInput
    artworkCollections?: artworkCollectionsCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsCreateNestedManyWithoutArtworksInput
    comments?: commentsCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutArtworksInput
    reports?: reportsCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateWithoutArtworksColorsInput = {
    id?: number
    artistId: number
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworkCollections?: artworkCollectionsUncheckedCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesUncheckedCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsUncheckedCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsUncheckedCreateNestedManyWithoutArtworksInput
    comments?: commentsUncheckedCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput
    reports?: reportsUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksCreateOrConnectWithoutArtworksColorsInput = {
    where: artworksWhereUniqueInput
    create: XOR<artworksCreateWithoutArtworksColorsInput, artworksUncheckedCreateWithoutArtworksColorsInput>
  }

  export type artworksUpsertWithoutArtworksColorsInput = {
    update: XOR<artworksUpdateWithoutArtworksColorsInput, artworksUncheckedUpdateWithoutArtworksColorsInput>
    create: XOR<artworksCreateWithoutArtworksColorsInput, artworksUncheckedCreateWithoutArtworksColorsInput>
  }

  export type artworksUpdateWithoutArtworksColorsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: usersUpdateOneRequiredWithoutArtworksNestedInput
    artworkCollections?: artworkCollectionsUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUpdateManyWithoutArtworksNestedInput
    comments?: commentsUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutArtworksNestedInput
    reports?: reportsUpdateManyWithoutArtworksNestedInput
  }

  export type artworksUncheckedUpdateWithoutArtworksColorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworkCollections?: artworkCollectionsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUncheckedUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUncheckedUpdateManyWithoutArtworksNestedInput
    comments?: commentsUncheckedUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutArtworksNestedInput
    reports?: reportsUncheckedUpdateManyWithoutArtworksNestedInput
  }

  export type artworksCreateWithoutArtworksMaterialsInput = {
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    users: usersCreateNestedOneWithoutArtworksInput
    artworkCollections?: artworkCollectionsCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsCreateNestedManyWithoutArtworksInput
    comments?: commentsCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutArtworksInput
    reports?: reportsCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateWithoutArtworksMaterialsInput = {
    id?: number
    artistId: number
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworkCollections?: artworkCollectionsUncheckedCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesUncheckedCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsUncheckedCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsUncheckedCreateNestedManyWithoutArtworksInput
    comments?: commentsUncheckedCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput
    reports?: reportsUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksCreateOrConnectWithoutArtworksMaterialsInput = {
    where: artworksWhereUniqueInput
    create: XOR<artworksCreateWithoutArtworksMaterialsInput, artworksUncheckedCreateWithoutArtworksMaterialsInput>
  }

  export type artworksUpsertWithoutArtworksMaterialsInput = {
    update: XOR<artworksUpdateWithoutArtworksMaterialsInput, artworksUncheckedUpdateWithoutArtworksMaterialsInput>
    create: XOR<artworksCreateWithoutArtworksMaterialsInput, artworksUncheckedCreateWithoutArtworksMaterialsInput>
  }

  export type artworksUpdateWithoutArtworksMaterialsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: usersUpdateOneRequiredWithoutArtworksNestedInput
    artworkCollections?: artworkCollectionsUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUpdateManyWithoutArtworksNestedInput
    comments?: commentsUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutArtworksNestedInput
    reports?: reportsUpdateManyWithoutArtworksNestedInput
  }

  export type artworksUncheckedUpdateWithoutArtworksMaterialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworkCollections?: artworkCollectionsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUncheckedUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUncheckedUpdateManyWithoutArtworksNestedInput
    comments?: commentsUncheckedUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutArtworksNestedInput
    reports?: reportsUncheckedUpdateManyWithoutArtworksNestedInput
  }

  export type artworksCreateWithoutArtworksMovementsInput = {
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    users: usersCreateNestedOneWithoutArtworksInput
    artworkCollections?: artworkCollectionsCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsCreateNestedManyWithoutArtworksInput
    comments?: commentsCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutArtworksInput
    reports?: reportsCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateWithoutArtworksMovementsInput = {
    id?: number
    artistId: number
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworkCollections?: artworkCollectionsUncheckedCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesUncheckedCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsUncheckedCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsUncheckedCreateNestedManyWithoutArtworksInput
    comments?: commentsUncheckedCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput
    reports?: reportsUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksCreateOrConnectWithoutArtworksMovementsInput = {
    where: artworksWhereUniqueInput
    create: XOR<artworksCreateWithoutArtworksMovementsInput, artworksUncheckedCreateWithoutArtworksMovementsInput>
  }

  export type artworksUpsertWithoutArtworksMovementsInput = {
    update: XOR<artworksUpdateWithoutArtworksMovementsInput, artworksUncheckedUpdateWithoutArtworksMovementsInput>
    create: XOR<artworksCreateWithoutArtworksMovementsInput, artworksUncheckedCreateWithoutArtworksMovementsInput>
  }

  export type artworksUpdateWithoutArtworksMovementsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: usersUpdateOneRequiredWithoutArtworksNestedInput
    artworkCollections?: artworkCollectionsUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUpdateManyWithoutArtworksNestedInput
    comments?: commentsUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutArtworksNestedInput
    reports?: reportsUpdateManyWithoutArtworksNestedInput
  }

  export type artworksUncheckedUpdateWithoutArtworksMovementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworkCollections?: artworkCollectionsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUncheckedUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUncheckedUpdateManyWithoutArtworksNestedInput
    comments?: commentsUncheckedUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutArtworksNestedInput
    reports?: reportsUncheckedUpdateManyWithoutArtworksNestedInput
  }

  export type artworksCreateWithoutArtworksTagsInput = {
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    users: usersCreateNestedOneWithoutArtworksInput
    artworkCollections?: artworkCollectionsCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsCreateNestedManyWithoutArtworksInput
    comments?: commentsCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutArtworksInput
    reports?: reportsCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateWithoutArtworksTagsInput = {
    id?: number
    artistId: number
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworkCollections?: artworkCollectionsUncheckedCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesUncheckedCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsUncheckedCreateNestedManyWithoutArtworksInput
    comments?: commentsUncheckedCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput
    reports?: reportsUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksCreateOrConnectWithoutArtworksTagsInput = {
    where: artworksWhereUniqueInput
    create: XOR<artworksCreateWithoutArtworksTagsInput, artworksUncheckedCreateWithoutArtworksTagsInput>
  }

  export type artworksUpsertWithoutArtworksTagsInput = {
    update: XOR<artworksUpdateWithoutArtworksTagsInput, artworksUncheckedUpdateWithoutArtworksTagsInput>
    create: XOR<artworksCreateWithoutArtworksTagsInput, artworksUncheckedCreateWithoutArtworksTagsInput>
  }

  export type artworksUpdateWithoutArtworksTagsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: usersUpdateOneRequiredWithoutArtworksNestedInput
    artworkCollections?: artworkCollectionsUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUpdateManyWithoutArtworksNestedInput
    comments?: commentsUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutArtworksNestedInput
    reports?: reportsUpdateManyWithoutArtworksNestedInput
  }

  export type artworksUncheckedUpdateWithoutArtworksTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworkCollections?: artworkCollectionsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUncheckedUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUncheckedUpdateManyWithoutArtworksNestedInput
    comments?: commentsUncheckedUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutArtworksNestedInput
    reports?: reportsUncheckedUpdateManyWithoutArtworksNestedInput
  }

  export type usersCreateWithoutNotificationsInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutUsersInput
    collections?: collectionsCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers?: followersCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
    reports_reports_reporterIdTousers?: reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUncheckedCreateWithoutNotificationsInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput
    collections?: collectionsUncheckedCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers?: followersUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
    reports_reports_reporterIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersCreateOrConnectWithoutNotificationsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutNotificationsInput, usersUncheckedCreateWithoutNotificationsInput>
  }

  export type usersUpsertWithoutNotificationsInput = {
    update: XOR<usersUpdateWithoutNotificationsInput, usersUncheckedUpdateWithoutNotificationsInput>
    create: XOR<usersCreateWithoutNotificationsInput, usersUncheckedCreateWithoutNotificationsInput>
  }

  export type usersUpdateWithoutNotificationsInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutUsersNestedInput
    collections?: collectionsUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersNestedInput
    followers?: followersUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    reports_reports_reporterIdTousers?: reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput
    collections?: collectionsUncheckedUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput
    followers?: followersUncheckedUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    reports_reports_reporterIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersCreateWithoutUsersRatings_usersTousersRatings_userIdInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutUsersInput
    collections?: collectionsCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers?: followersCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUncheckedCreateWithoutUsersRatings_usersTousersRatings_userIdInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput
    collections?: collectionsUncheckedCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers?: followersUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersCreateOrConnectWithoutUsersRatings_usersTousersRatings_userIdInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUsersRatings_usersTousersRatings_userIdInput, usersUncheckedCreateWithoutUsersRatings_usersTousersRatings_userIdInput>
  }

  export type usersCreateWithoutUsersRatings_usersTousersRatings_qualifierIdInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutUsersInput
    collections?: collectionsCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers?: followersCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
  }

  export type usersUncheckedCreateWithoutUsersRatings_usersTousersRatings_qualifierIdInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput
    collections?: collectionsUncheckedCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers?: followersUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    reports_reports_userIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
  }

  export type usersCreateOrConnectWithoutUsersRatings_usersTousersRatings_qualifierIdInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUsersRatings_usersTousersRatings_qualifierIdInput, usersUncheckedCreateWithoutUsersRatings_usersTousersRatings_qualifierIdInput>
  }

  export type usersUpsertWithoutUsersRatings_usersTousersRatings_userIdInput = {
    update: XOR<usersUpdateWithoutUsersRatings_usersTousersRatings_userIdInput, usersUncheckedUpdateWithoutUsersRatings_usersTousersRatings_userIdInput>
    create: XOR<usersCreateWithoutUsersRatings_usersTousersRatings_userIdInput, usersUncheckedCreateWithoutUsersRatings_usersTousersRatings_userIdInput>
  }

  export type usersUpdateWithoutUsersRatings_usersTousersRatings_userIdInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutUsersNestedInput
    collections?: collectionsUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersNestedInput
    followers?: followersUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUncheckedUpdateWithoutUsersRatings_usersTousersRatings_userIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput
    collections?: collectionsUncheckedUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput
    followers?: followersUncheckedUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUpsertWithoutUsersRatings_usersTousersRatings_qualifierIdInput = {
    update: XOR<usersUpdateWithoutUsersRatings_usersTousersRatings_qualifierIdInput, usersUncheckedUpdateWithoutUsersRatings_usersTousersRatings_qualifierIdInput>
    create: XOR<usersCreateWithoutUsersRatings_usersTousersRatings_qualifierIdInput, usersUncheckedCreateWithoutUsersRatings_usersTousersRatings_qualifierIdInput>
  }

  export type usersUpdateWithoutUsersRatings_usersTousersRatings_qualifierIdInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutUsersNestedInput
    collections?: collectionsUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersNestedInput
    followers?: followersUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
  }

  export type usersUncheckedUpdateWithoutUsersRatings_usersTousersRatings_qualifierIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput
    collections?: collectionsUncheckedUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput
    followers?: followersUncheckedUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    reports_reports_userIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
  }

  export type collectionsCreateWithoutArtworkCollectionsInput = {
    name: string
    imageUrl?: string | null
    createdDate?: Date | string | null
    users: usersCreateNestedOneWithoutCollectionsInput
  }

  export type collectionsUncheckedCreateWithoutArtworkCollectionsInput = {
    id?: number
    userId: number
    name: string
    imageUrl?: string | null
    createdDate?: Date | string | null
  }

  export type collectionsCreateOrConnectWithoutArtworkCollectionsInput = {
    where: collectionsWhereUniqueInput
    create: XOR<collectionsCreateWithoutArtworkCollectionsInput, collectionsUncheckedCreateWithoutArtworkCollectionsInput>
  }

  export type artworksCreateWithoutArtworkCollectionsInput = {
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    users: usersCreateNestedOneWithoutArtworksInput
    artworksAddresses?: artworksAddressesCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsCreateNestedManyWithoutArtworksInput
    comments?: commentsCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutArtworksInput
    reports?: reportsCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateWithoutArtworkCollectionsInput = {
    id?: number
    artistId: number
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworksAddresses?: artworksAddressesUncheckedCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsUncheckedCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsUncheckedCreateNestedManyWithoutArtworksInput
    comments?: commentsUncheckedCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput
    reports?: reportsUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksCreateOrConnectWithoutArtworkCollectionsInput = {
    where: artworksWhereUniqueInput
    create: XOR<artworksCreateWithoutArtworkCollectionsInput, artworksUncheckedCreateWithoutArtworkCollectionsInput>
  }

  export type collectionsUpsertWithoutArtworkCollectionsInput = {
    update: XOR<collectionsUpdateWithoutArtworkCollectionsInput, collectionsUncheckedUpdateWithoutArtworkCollectionsInput>
    create: XOR<collectionsCreateWithoutArtworkCollectionsInput, collectionsUncheckedCreateWithoutArtworkCollectionsInput>
  }

  export type collectionsUpdateWithoutArtworkCollectionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutCollectionsNestedInput
  }

  export type collectionsUncheckedUpdateWithoutArtworkCollectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type artworksUpsertWithoutArtworkCollectionsInput = {
    update: XOR<artworksUpdateWithoutArtworkCollectionsInput, artworksUncheckedUpdateWithoutArtworkCollectionsInput>
    create: XOR<artworksCreateWithoutArtworkCollectionsInput, artworksUncheckedCreateWithoutArtworkCollectionsInput>
  }

  export type artworksUpdateWithoutArtworkCollectionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: usersUpdateOneRequiredWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUpdateManyWithoutArtworksNestedInput
    comments?: commentsUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutArtworksNestedInput
    reports?: reportsUpdateManyWithoutArtworksNestedInput
  }

  export type artworksUncheckedUpdateWithoutArtworkCollectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworksAddresses?: artworksAddressesUncheckedUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUncheckedUpdateManyWithoutArtworksNestedInput
    comments?: commentsUncheckedUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutArtworksNestedInput
    reports?: reportsUncheckedUpdateManyWithoutArtworksNestedInput
  }

  export type usersCreateWithoutReports_reports_reporterIdTousersInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutUsersInput
    collections?: collectionsCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers?: followersCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsCreateNestedManyWithoutUsersInput
    reports_reports_userIdTousers?: reportsCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUncheckedCreateWithoutReports_reports_reporterIdTousersInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput
    collections?: collectionsUncheckedCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers?: followersUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUsersInput
    reports_reports_userIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_userIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersCreateOrConnectWithoutReports_reports_reporterIdTousersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutReports_reports_reporterIdTousersInput, usersUncheckedCreateWithoutReports_reports_reporterIdTousersInput>
  }

  export type usersCreateWithoutReports_reports_userIdTousersInput = {
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutUsersInput
    collections?: collectionsCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutUsersInput
    followers?: followersCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersUncheckedCreateWithoutReports_reports_userIdTousersInput = {
    id?: number
    typeId?: number
    firstName: string
    lastName: string
    email: string
    pass: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    address?: string | null
    contact?: string | null
    photoUrl?: string | null
    googleUid?: string | null
    facebookUid?: string | null
    firebaseToken?: string | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworks?: artworksUncheckedCreateNestedManyWithoutUsersInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutUsersInput
    collections?: collectionsUncheckedCreateNestedManyWithoutUsersInput
    comments_comments_commentatorIdTousers?: commentsUncheckedCreateNestedManyWithoutUsers_comments_commentatorIdTousersInput
    comments_commentsTousers?: commentsUncheckedCreateNestedManyWithoutUsers_commentsTousersInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutUsersInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutUsersInput
    followers?: followersUncheckedCreateNestedManyWithoutUsersInput
    followers_followers_userIdTousers?: followersUncheckedCreateNestedManyWithoutUsers_followers_userIdTousersInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUsersInput
    reports_reports_reporterIdTousers?: reportsUncheckedCreateNestedManyWithoutUsers_reports_reporterIdTousersInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_userIdInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedCreateNestedManyWithoutUsers_usersTousersRatings_qualifierIdInput
  }

  export type usersCreateOrConnectWithoutReports_reports_userIdTousersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutReports_reports_userIdTousersInput, usersUncheckedCreateWithoutReports_reports_userIdTousersInput>
  }

  export type artworksCreateWithoutReportsInput = {
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    users: usersCreateNestedOneWithoutArtworksInput
    artworkCollections?: artworkCollectionsCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsCreateNestedManyWithoutArtworksInput
    comments?: commentsCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksCreateNestedManyWithoutArtworksInput
  }

  export type artworksUncheckedCreateWithoutReportsInput = {
    id?: number
    artistId: number
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
    artworkCollections?: artworkCollectionsUncheckedCreateNestedManyWithoutArtworksInput
    artworksAddresses?: artworksAddressesUncheckedCreateNestedManyWithoutArtworksInput
    artworksCollaborators?: artworksCollaboratorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksColors?: artworksColorsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMaterials?: artworksMaterialsUncheckedCreateNestedManyWithoutArtworksInput
    artworksMovements?: artworksMovementsUncheckedCreateNestedManyWithoutArtworksInput
    artworksTags?: artworksTagsUncheckedCreateNestedManyWithoutArtworksInput
    comments?: commentsUncheckedCreateNestedManyWithoutArtworksInput
    favoritesArtworks?: favoritesArtworksUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type artworksCreateOrConnectWithoutReportsInput = {
    where: artworksWhereUniqueInput
    create: XOR<artworksCreateWithoutReportsInput, artworksUncheckedCreateWithoutReportsInput>
  }

  export type commentsCreateWithoutReportsInput = {
    comment: string
    createdDate?: Date | string | null
    users_comments_commentatorIdTousers: usersCreateNestedOneWithoutComments_comments_commentatorIdTousersInput
    users_commentsTousers?: usersCreateNestedOneWithoutComments_commentsTousersInput
    artworks?: artworksCreateNestedOneWithoutCommentsInput
    comments?: commentsCreateNestedOneWithoutOther_commentsInput
    other_comments?: commentsCreateNestedManyWithoutCommentsInput
    commentsLikes?: commentsLikesCreateNestedManyWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutReportsInput = {
    id?: number
    commentatorId: number
    comment: string
    userId?: number | null
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
    other_comments?: commentsUncheckedCreateNestedManyWithoutCommentsInput
    commentsLikes?: commentsLikesUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type commentsCreateOrConnectWithoutReportsInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutReportsInput, commentsUncheckedCreateWithoutReportsInput>
  }

  export type usersUpsertWithoutReports_reports_reporterIdTousersInput = {
    update: XOR<usersUpdateWithoutReports_reports_reporterIdTousersInput, usersUncheckedUpdateWithoutReports_reports_reporterIdTousersInput>
    create: XOR<usersCreateWithoutReports_reports_reporterIdTousersInput, usersUncheckedCreateWithoutReports_reports_reporterIdTousersInput>
  }

  export type usersUpdateWithoutReports_reports_reporterIdTousersInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutUsersNestedInput
    collections?: collectionsUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersNestedInput
    followers?: followersUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUpdateManyWithoutUsersNestedInput
    reports_reports_userIdTousers?: reportsUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUncheckedUpdateWithoutReports_reports_reporterIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput
    collections?: collectionsUncheckedUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput
    followers?: followersUncheckedUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUsersNestedInput
    reports_reports_userIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_userIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUpsertWithoutReports_reports_userIdTousersInput = {
    update: XOR<usersUpdateWithoutReports_reports_userIdTousersInput, usersUncheckedUpdateWithoutReports_reports_userIdTousersInput>
    create: XOR<usersCreateWithoutReports_reports_userIdTousersInput, usersUncheckedCreateWithoutReports_reports_userIdTousersInput>
  }

  export type usersUpdateWithoutReports_reports_userIdTousersInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutUsersNestedInput
    collections?: collectionsUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutUsersNestedInput
    followers?: followersUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersUncheckedUpdateWithoutReports_reports_userIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googleUid?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUid?: NullableStringFieldUpdateOperationsInput | string | null
    firebaseToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworks?: artworksUncheckedUpdateManyWithoutUsersNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutUsersNestedInput
    collections?: collectionsUncheckedUpdateManyWithoutUsersNestedInput
    comments_comments_commentatorIdTousers?: commentsUncheckedUpdateManyWithoutUsers_comments_commentatorIdTousersNestedInput
    comments_commentsTousers?: commentsUncheckedUpdateManyWithoutUsers_commentsTousersNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutUsersNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutUsersNestedInput
    followers?: followersUncheckedUpdateManyWithoutUsersNestedInput
    followers_followers_userIdTousers?: followersUncheckedUpdateManyWithoutUsers_followers_userIdTousersNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUsersNestedInput
    reports_reports_reporterIdTousers?: reportsUncheckedUpdateManyWithoutUsers_reports_reporterIdTousersNestedInput
    usersRatings_usersTousersRatings_userId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_userIdNestedInput
    usersRatings_usersTousersRatings_qualifierId?: usersRatingsUncheckedUpdateManyWithoutUsers_usersTousersRatings_qualifierIdNestedInput
  }

  export type artworksUpsertWithoutReportsInput = {
    update: XOR<artworksUpdateWithoutReportsInput, artworksUncheckedUpdateWithoutReportsInput>
    create: XOR<artworksCreateWithoutReportsInput, artworksUncheckedCreateWithoutReportsInput>
  }

  export type artworksUpdateWithoutReportsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: usersUpdateOneRequiredWithoutArtworksNestedInput
    artworkCollections?: artworkCollectionsUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUpdateManyWithoutArtworksNestedInput
    comments?: commentsUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutArtworksNestedInput
  }

  export type artworksUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworkCollections?: artworkCollectionsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUncheckedUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUncheckedUpdateManyWithoutArtworksNestedInput
    comments?: commentsUncheckedUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutArtworksNestedInput
  }

  export type commentsUpsertWithoutReportsInput = {
    update: XOR<commentsUpdateWithoutReportsInput, commentsUncheckedUpdateWithoutReportsInput>
    create: XOR<commentsCreateWithoutReportsInput, commentsUncheckedCreateWithoutReportsInput>
  }

  export type commentsUpdateWithoutReportsInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_comments_commentatorIdTousers?: usersUpdateOneRequiredWithoutComments_comments_commentatorIdTousersNestedInput
    users_commentsTousers?: usersUpdateOneWithoutComments_commentsTousersNestedInput
    artworks?: artworksUpdateOneWithoutCommentsNestedInput
    comments?: commentsUpdateOneWithoutOther_commentsNestedInput
    other_comments?: commentsUpdateManyWithoutCommentsNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentatorId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    other_comments?: commentsUncheckedUpdateManyWithoutCommentsNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type artworksCreateManyUsersInput = {
    id?: number
    title: string
    description?: string | null
    imageUrl?: string | null
    minWorkingHours?: number | null
    maxWorkingHours?: number | null
    minPrice?: number | null
    maxPrice?: number | null
    minHeight?: number | null
    maxHeight?: number | null
    minWidth?: number | null
    maxWidth?: number | null
    createdDate?: Date | string | null
    deletedDate?: Date | string | null
    isDeleted?: boolean | null
  }

  export type artworksCollaboratorsCreateManyUsersInput = {
    id?: number
    artworkId: number
  }

  export type collectionsCreateManyUsersInput = {
    id?: number
    name: string
    imageUrl?: string | null
    createdDate?: Date | string | null
  }

  export type commentsCreateManyUsers_comments_commentatorIdTousersInput = {
    id?: number
    comment: string
    userId?: number | null
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
  }

  export type commentsCreateManyUsers_commentsTousersInput = {
    id?: number
    commentatorId: number
    comment: string
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
  }

  export type commentsLikesCreateManyUsersInput = {
    id?: number
    commentId: number
    positive?: boolean | null
  }

  export type favoritesArtworksCreateManyUsersInput = {
    id?: number
    artworkId: number
    createdDate?: Date | string | null
  }

  export type followersCreateManyUsersInput = {
    id?: number
    userId: number
    createdDate?: Date | string | null
  }

  export type followersCreateManyUsers_followers_userIdTousersInput = {
    id?: number
    followerId: number
    createdDate?: Date | string | null
  }

  export type notificationsCreateManyUsersInput = {
    id?: number
    typeId: number
    title?: string | null
    content?: string | null
    link?: string | null
    createdDate?: Date | string | null
    viewed?: boolean | null
  }

  export type reportsCreateManyUsers_reports_reporterIdTousersInput = {
    id?: number
    description: string
    userId?: number | null
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
  }

  export type reportsCreateManyUsers_reports_userIdTousersInput = {
    id?: number
    reporterId: number
    description: string
    artworkId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
  }

  export type usersRatingsCreateManyUsers_usersTousersRatings_userIdInput = {
    id?: number
    qualifierId: number
    rating?: number | null
  }

  export type usersRatingsCreateManyUsers_usersTousersRatings_qualifierIdInput = {
    id?: number
    userId: number
    rating?: number | null
  }

  export type artworksUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworkCollections?: artworkCollectionsUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUpdateManyWithoutArtworksNestedInput
    comments?: commentsUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUpdateManyWithoutArtworksNestedInput
    reports?: reportsUpdateManyWithoutArtworksNestedInput
  }

  export type artworksUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    artworkCollections?: artworkCollectionsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksAddresses?: artworksAddressesUncheckedUpdateManyWithoutArtworksNestedInput
    artworksCollaborators?: artworksCollaboratorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksColors?: artworksColorsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMaterials?: artworksMaterialsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksMovements?: artworksMovementsUncheckedUpdateManyWithoutArtworksNestedInput
    artworksTags?: artworksTagsUncheckedUpdateManyWithoutArtworksNestedInput
    comments?: commentsUncheckedUpdateManyWithoutArtworksNestedInput
    favoritesArtworks?: favoritesArtworksUncheckedUpdateManyWithoutArtworksNestedInput
    reports?: reportsUncheckedUpdateManyWithoutArtworksNestedInput
  }

  export type artworksUncheckedUpdateManyWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    minWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    maxWorkingHours?: NullableIntFieldUpdateOperationsInput | number | null
    minPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    minHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    maxHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    minWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    maxWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type artworksCollaboratorsUpdateWithoutUsersInput = {
    artworks?: artworksUpdateOneRequiredWithoutArtworksCollaboratorsNestedInput
  }

  export type artworksCollaboratorsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
  }

  export type artworksCollaboratorsUncheckedUpdateManyWithoutArtworksCollaboratorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
  }

  export type collectionsUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    artworkCollections?: artworkCollectionsUpdateManyWithoutCollectionsNestedInput
  }

  export type collectionsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    artworkCollections?: artworkCollectionsUncheckedUpdateManyWithoutCollectionsNestedInput
  }

  export type collectionsUncheckedUpdateManyWithoutCollectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentsUpdateWithoutUsers_comments_commentatorIdTousersInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_commentsTousers?: usersUpdateOneWithoutComments_commentsTousersNestedInput
    artworks?: artworksUpdateOneWithoutCommentsNestedInput
    comments?: commentsUpdateOneWithoutOther_commentsNestedInput
    other_comments?: commentsUpdateManyWithoutCommentsNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutCommentsNestedInput
    reports?: reportsUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateWithoutUsers_comments_commentatorIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    other_comments?: commentsUncheckedUpdateManyWithoutCommentsNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutCommentsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateManyWithoutComments_comments_commentatorIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentsUpdateWithoutUsers_commentsTousersInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_comments_commentatorIdTousers?: usersUpdateOneRequiredWithoutComments_comments_commentatorIdTousersNestedInput
    artworks?: artworksUpdateOneWithoutCommentsNestedInput
    comments?: commentsUpdateOneWithoutOther_commentsNestedInput
    other_comments?: commentsUpdateManyWithoutCommentsNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutCommentsNestedInput
    reports?: reportsUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateWithoutUsers_commentsTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentatorId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    other_comments?: commentsUncheckedUpdateManyWithoutCommentsNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutCommentsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateManyWithoutComments_commentsTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentatorId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentsLikesUpdateWithoutUsersInput = {
    positive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: commentsUpdateOneRequiredWithoutCommentsLikesNestedInput
  }

  export type commentsLikesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    positive?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type commentsLikesUncheckedUpdateManyWithoutCommentsLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    positive?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type favoritesArtworksUpdateWithoutUsersInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    artworks?: artworksUpdateOneRequiredWithoutFavoritesArtworksNestedInput
  }

  export type favoritesArtworksUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type favoritesArtworksUncheckedUpdateManyWithoutFavoritesArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followersUpdateWithoutUsersInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_followers_userIdTousers?: usersUpdateOneRequiredWithoutFollowers_followers_userIdTousersNestedInput
  }

  export type followersUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followersUncheckedUpdateManyWithoutFollowersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followersUpdateWithoutUsers_followers_userIdTousersInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type followersUncheckedUpdateWithoutUsers_followers_userIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    followerId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followersUncheckedUpdateManyWithoutFollowers_followers_userIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    followerId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type notificationsUpdateWithoutUsersInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewed?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type notificationsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewed?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type notificationsUncheckedUpdateManyWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewed?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type reportsUpdateWithoutUsers_reports_reporterIdTousersInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_reports_userIdTousers?: usersUpdateOneWithoutReports_reports_userIdTousersNestedInput
    artworks?: artworksUpdateOneWithoutReportsNestedInput
    comments?: commentsUpdateOneWithoutReportsNestedInput
  }

  export type reportsUncheckedUpdateWithoutUsers_reports_reporterIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsUncheckedUpdateManyWithoutReports_reports_reporterIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsUpdateWithoutUsers_reports_userIdTousersInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_reports_reporterIdTousers?: usersUpdateOneRequiredWithoutReports_reports_reporterIdTousersNestedInput
    artworks?: artworksUpdateOneWithoutReportsNestedInput
    comments?: commentsUpdateOneWithoutReportsNestedInput
  }

  export type reportsUncheckedUpdateWithoutUsers_reports_userIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsUncheckedUpdateManyWithoutReports_reports_userIdTousersInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersRatingsUpdateWithoutUsers_usersTousersRatings_userIdInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    users_usersTousersRatings_qualifierId?: usersUpdateOneRequiredWithoutUsersRatings_usersTousersRatings_qualifierIdNestedInput
  }

  export type usersRatingsUncheckedUpdateWithoutUsers_usersTousersRatings_userIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    qualifierId?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersRatingsUncheckedUpdateManyWithoutUsersRatings_usersTousersRatings_userIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    qualifierId?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersRatingsUpdateWithoutUsers_usersTousersRatings_qualifierIdInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    users_usersTousersRatings_userId?: usersUpdateOneRequiredWithoutUsersRatings_usersTousersRatings_userIdNestedInput
  }

  export type usersRatingsUncheckedUpdateWithoutUsers_usersTousersRatings_qualifierIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersRatingsUncheckedUpdateManyWithoutUsersRatings_usersTousersRatings_qualifierIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type artworkCollectionsCreateManyArtworksInput = {
    id?: number
    collectionId: number
  }

  export type artworksAddressesCreateManyArtworksInput = {
    id?: number
    address?: string | null
  }

  export type artworksCollaboratorsCreateManyArtworksInput = {
    id?: number
    artistId: number
  }

  export type artworksColorsCreateManyArtworksInput = {
    id?: number
    color: string
  }

  export type artworksMaterialsCreateManyArtworksInput = {
    id?: number
    material: string
  }

  export type artworksMovementsCreateManyArtworksInput = {
    id?: number
    movement: string
  }

  export type artworksTagsCreateManyArtworksInput = {
    id?: number
    tag?: string | null
  }

  export type commentsCreateManyArtworksInput = {
    id?: number
    commentatorId: number
    comment: string
    userId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
  }

  export type favoritesArtworksCreateManyArtworksInput = {
    id?: number
    userId: number
    createdDate?: Date | string | null
  }

  export type reportsCreateManyArtworksInput = {
    id?: number
    reporterId: number
    description: string
    userId?: number | null
    commentId?: number | null
    createdDate?: Date | string | null
  }

  export type artworkCollectionsUpdateWithoutArtworksInput = {
    collections?: collectionsUpdateOneRequiredWithoutArtworkCollectionsNestedInput
  }

  export type artworkCollectionsUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    collectionId?: IntFieldUpdateOperationsInput | number
  }

  export type artworkCollectionsUncheckedUpdateManyWithoutArtworkCollectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    collectionId?: IntFieldUpdateOperationsInput | number
  }

  export type artworksAddressesUpdateWithoutArtworksInput = {
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type artworksAddressesUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type artworksAddressesUncheckedUpdateManyWithoutArtworksAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type artworksCollaboratorsUpdateWithoutArtworksInput = {
    users?: usersUpdateOneRequiredWithoutArtworksCollaboratorsNestedInput
  }

  export type artworksCollaboratorsUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    artistId?: IntFieldUpdateOperationsInput | number
  }

  export type artworksColorsUpdateWithoutArtworksInput = {
    color?: StringFieldUpdateOperationsInput | string
  }

  export type artworksColorsUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type artworksColorsUncheckedUpdateManyWithoutArtworksColorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type artworksMaterialsUpdateWithoutArtworksInput = {
    material?: StringFieldUpdateOperationsInput | string
  }

  export type artworksMaterialsUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    material?: StringFieldUpdateOperationsInput | string
  }

  export type artworksMaterialsUncheckedUpdateManyWithoutArtworksMaterialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    material?: StringFieldUpdateOperationsInput | string
  }

  export type artworksMovementsUpdateWithoutArtworksInput = {
    movement?: StringFieldUpdateOperationsInput | string
  }

  export type artworksMovementsUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    movement?: StringFieldUpdateOperationsInput | string
  }

  export type artworksMovementsUncheckedUpdateManyWithoutArtworksMovementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    movement?: StringFieldUpdateOperationsInput | string
  }

  export type artworksTagsUpdateWithoutArtworksInput = {
    tag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type artworksTagsUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type artworksTagsUncheckedUpdateManyWithoutArtworksTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commentsUpdateWithoutArtworksInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_comments_commentatorIdTousers?: usersUpdateOneRequiredWithoutComments_comments_commentatorIdTousersNestedInput
    users_commentsTousers?: usersUpdateOneWithoutComments_commentsTousersNestedInput
    comments?: commentsUpdateOneWithoutOther_commentsNestedInput
    other_comments?: commentsUpdateManyWithoutCommentsNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutCommentsNestedInput
    reports?: reportsUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentatorId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    other_comments?: commentsUncheckedUpdateManyWithoutCommentsNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutCommentsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateManyWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentatorId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type favoritesArtworksUpdateWithoutArtworksInput = {
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutFavoritesArtworksNestedInput
  }

  export type favoritesArtworksUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsUpdateWithoutArtworksInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_reports_reporterIdTousers?: usersUpdateOneRequiredWithoutReports_reports_reporterIdTousersNestedInput
    users_reports_userIdTousers?: usersUpdateOneWithoutReports_reports_userIdTousersNestedInput
    comments?: commentsUpdateOneWithoutReportsNestedInput
  }

  export type reportsUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reportsUncheckedUpdateManyWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    commentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentsCreateManyCommentsInput = {
    id?: number
    commentatorId: number
    comment: string
    userId?: number | null
    artworkId?: number | null
    createdDate?: Date | string | null
  }

  export type commentsLikesCreateManyCommentsInput = {
    id?: number
    userId: number
    positive?: boolean | null
  }

  export type reportsCreateManyCommentsInput = {
    id?: number
    reporterId: number
    description: string
    userId?: number | null
    artworkId?: number | null
    createdDate?: Date | string | null
  }

  export type commentsUpdateWithoutCommentsInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_comments_commentatorIdTousers?: usersUpdateOneRequiredWithoutComments_comments_commentatorIdTousersNestedInput
    users_commentsTousers?: usersUpdateOneWithoutComments_commentsTousersNestedInput
    artworks?: artworksUpdateOneWithoutCommentsNestedInput
    other_comments?: commentsUpdateManyWithoutCommentsNestedInput
    commentsLikes?: commentsLikesUpdateManyWithoutCommentsNestedInput
    reports?: reportsUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentatorId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    other_comments?: commentsUncheckedUpdateManyWithoutCommentsNestedInput
    commentsLikes?: commentsLikesUncheckedUpdateManyWithoutCommentsNestedInput
    reports?: reportsUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateManyWithoutOther_commentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentatorId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentsLikesUpdateWithoutCommentsInput = {
    positive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: usersUpdateOneRequiredWithoutCommentsLikesNestedInput
  }

  export type commentsLikesUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    positive?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type reportsUpdateWithoutCommentsInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users_reports_reporterIdTousers?: usersUpdateOneRequiredWithoutReports_reports_reporterIdTousersNestedInput
    users_reports_userIdTousers?: usersUpdateOneWithoutReports_reports_userIdTousersNestedInput
    artworks?: artworksUpdateOneWithoutReportsNestedInput
  }

  export type reportsUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    createdDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type artworkCollectionsCreateManyCollectionsInput = {
    id?: number
    artworkId: number
  }

  export type artworkCollectionsUpdateWithoutCollectionsInput = {
    artworks?: artworksUpdateOneRequiredWithoutArtworkCollectionsNestedInput
  }

  export type artworkCollectionsUncheckedUpdateWithoutCollectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}